<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Caesar!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title><type>double **</type> háromszögmátrix</title>
        <para>
        Írj egy olyan <function>malloc</function> és <function>free</function>
        párost használó C programot, amely helyet foglal
        egy alsó háromszögmátrixnak a szabad tárban!
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Caesar/Haromszog">https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Caesar/Haromszog</link>                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...:
            </para>
            <para>Tutor: <link xlink:href="https://gitlab.com/fupn26/">Fürjes-Benke Péter</link></para>
            <para>
            A mátrixok m darab sorral és n darab oszloppal rendelkező táblázatok. Akkor beszélünk háromszögmátrixról, ha a négyzetes mátrix (sorok és oszlopok száma megegyezik) főátlója alatt vagy felett csupa 0 elem található.
            Az alsó háromszögmátrix elemeit sorfolytonosan bejárva el tudjuk helyezni egy tömbben, az így kapott elemek száma n(n+1)/2 lesz.
            <mediaobject>
            <imageobject>
            <imagedata fileref="img/haromszog.png" format="PNG" scale="60"/>
            </imageobject>
        </mediaobject>
        </para>
        <para>
Jelen esetben 5 sorral (nr) fogunk dolgozni, tehát az elemek száma 15.
Deklaráljuk a <![CDATA[**tm]]> pointert, majd kiírjuk tm memóriacímét.
            <programlisting language="C"><![CDATA[
#include <stdio.h>
#include <stdlib.h>

int
main ()
{
    int nr = 5;
    double **tm;
    printf("%p\n", &tm);]]>
</programlisting>
</para>
<para>
A <function>malloc</function> függvény képes lefoglalni a dinamikus területen egy, a paramétereként kapott méretű területet.
Ezt követően vagy a lefoglalt terület kezdőcímét, vagy NULL-t ad vissza (hiba esetén).
A man 3 malloc parancs terminálba való beírásával megkaphatjuk a függvény pontos szintaktikai leírását.
</para>
<para>
A <function>malloc</function> fogja lefoglalni nekünk a tárterületet, majd az általa visszaadott mutató egy lefoglalt tárra mutat. Ezután kiiratjuk a második sor memóriacímét.
</para>
<para>
Cikluson belül a tm mutatót tömbként kezeljük, és az általa mutatott pointerekhez foglalunk most tárterületet. Kiiratásra kerül a tömb első elemének (harmadik sor) a memóriacíme.
</para>
<programlisting language="C"><![CDATA[
    if ((tm = (double **) malloc (nr * sizeof (double *))) == NULL)
    {
        return -1;
    }

    printf("%p\n", tm);
    
    for (int i = 0; i < nr; ++i)
    {
        if ((tm[i] = (double *) malloc ((i + 1) * sizeof (double))) == NULL)
        {
            return -1;
        }

    }
    
    printf("%p\n", tm[0]);]]>
</programlisting>
<para>
Újabb for ciklusokkal történik meg az értékadás is mindhárom sorban. 
A kétdimenziós tömbben az i a sorok számát, a j az oszlopok számát jelöli.
</para>
<programlisting language="C"><![CDATA[
    for (int i = 0; i < nr; ++i)
        for (int j = 0; j < i + 1; ++j)
            tm[i][j] = i * (i + 1) / 2 + j;

    for (int i = 0; i < nr; ++i)
    {
        for (int j = 0; j < i + 1; ++j)
            printf ("%f, ", tm[i][j]);
        printf ("\n");
    }

    for (int i = 0; i < nr; ++i)
    {
        for (int j = 0; j < i + 1; ++j)
            printf ("%f, ", tm[i][j]);
        printf ("\n");
    }]]>
</programlisting>
<para>
A <function>free</function> függvény felszabadítja a lefoglalt területet.
Manuáljából (man 3 free) megtudhatjuk, hogy bemeneti paramétere a memóriát azonosító pointer (ptr).
<programlisting language="C"><![CDATA[
    for (int i = 0; i < nr; ++i)
        free (tm[i]);

    free (tm);

    return 0;
}]]>
</programlisting>
</para>
<para>Fordítás/futtatás:
<programlisting><![CDATA[
$ gcc haromszog.c -o haromszog
$ ./haromszog
0x7ffe03039ad0
0x55f1c91b7670
0x55f1c91b76a0
0.000000, 
1.000000, 2.000000, 
3.000000, 4.000000, 5.000000, 
6.000000, 7.000000, 8.000000, 9.000000, 
10.000000, 11.000000, 12.000000, 13.000000, 14.000000, 
0.000000, 
1.000000, 2.000000, 
3.000000, 4.000000, 5.000000, 
6.000000, 7.000000, 8.000000, 9.000000, 
10.000000, 11.000000, 12.000000, 13.000000, 14.000000,]]>
            </programlisting>
        </para>            
    </section>        
    <section>
        <title>C EXOR-titkosító</title>
        <para>
            Írj egy EXOR-titkosítót C-ben!
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Caesar/Titkosito_C">https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Caesar/Titkosito_C</link>                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...: 
        </para>
        <para>
            A feladat kidolgozásához a következő cikket is igénybe vettem: <link xlink:href="https://www.webmaster442.hu/alapveto-titkositasi-modszerek-es-algoritmusok/">Alapvető titkosítási módszerek és algoritmusok</link>
        </para>
        <para>
            Az EXOR titkosítási algoritmus a Boole-algebra XOR műveletének következő azonosságain alapul: A XOR B = C és C XOR B = A.
            Titkosításra ez úgy használható fel, hogy az A változó jelenti az adat egy titkosítandó bitjét, B a hozzá tartozó kulcs egy bitjét, C pedig a kimenetként kapott titkosított bitet.
            Hátránya a módszernek, hogy 10GB adat titkosítása ezzel a módszerrel 10GB kulcsot és 10GB titkosított adatot generál, amit célszerű külön helyeken tárolni.
            Éppen ezért fogjuk használni a <filename>tiszta.txt</filename> fájlt, amely egy rövid szövegrészletet tartalmaz.
            <programlisting><![CDATA[
$ more tiszta.txt
Nem tudok kimerítő leírást adni arról, hogy hogyan tudsz megtanulni
programozni -- nagyon összetett tudásról van szó. Egyet azonban
elárulhatok: a könyvek és tanfolyamok nem érnek túl sokat (sok,
valószínűleg a legtöbb hacker autodidakta). Aminek van értelme:
(a) kódot olvasni és kódot írni.

Hogyan lesz az emberből Hacker]]>
            </programlisting>
            Ahhoz, hogy titkosítani tudjuk a szövegrészletet, az <filename>e.c</filename> kódot kell fordítanunk, majd egy tetszőleges kulcs megadása után futtatnunk.
            </para>
            <para>
            A header fileok inkludálása után meghatározzuk a kulcs maximális karakterszámát (100), illetve a buffer méretet (256 byte).
            Létrehozzuk a kulcs és buffer char tömböket, melyek megkapják az előbb definiált adatokat.
            A kulcs_index a kulcs aktuális karakterének elhelyezkedését, az olvasott_bajtok pedig az eddig beolvasott bájtok számát jelöli.
            A kulcs_meret a parancssorban megadott kulccsal dolgozik, annak hosszát pedig az <function>strlen()</function> függvény segítségével adjuk meg neki.
            </para>
            <para>
            A külső while ciklus addig fut, amíg van olyan input bájt, amit még nem olvasott be.
            A belső for ciklus pedig az általunk megadott szöveget titkosítja az EXOR algoritmus segítségével.
            <programlisting language="C"><![CDATA[
$ more e.c
#include <stdio.h>
#include <unistd.h>
#include <string.h>

#define MAX_KULCS 100
#define BUFFER_MERET 256

int
main (int argc, char **argv)
{

  char kulcs[MAX_KULCS];
  char buffer[BUFFER_MERET];

  int kulcs_index = 0;
  int olvasott_bajtok = 0;

  int kulcs_meret = strlen (argv[1]);
  strncpy (kulcs, argv[1], MAX_KULCS);

  while ((olvasott_bajtok = read (0, (void *) buffer, BUFFER_MERET)))
    {

      for (int i = 0; i < olvasott_bajtok; ++i)
	{

	  buffer[i] = buffer[i] ^ kulcs[kulcs_index];
	  kulcs_index = (kulcs_index + 1) % kulcs_meret;

	}

      write (1, buffer, olvasott_bajtok);

    }
}
$ gcc e.c -o e -std=c99
$ ./e 56789012 <tiszta.txt >titkos.szoveg]]>
            </programlisting>
            Megvan a 8 számjegyű kulcs (56789012), és mostmár a tiszta szövegünk is titkosítva van (létrejött a <filename>titkos.szoveg</filename> fájl). Ezt egy dekódolási paranccsal is le tudjuk ellenőrizni:
            <programlisting><![CDATA[
$ ./e 56789012 <titkos.szoveg
Nem tudok kimerítő leírást adni arról, hogy hogyan tudsz megtanulni
programozni -- nagyon összetett tudásról van szó. Egyet azonban
elárulhatok: a könyvek és tanfolyamok nem érnek túl sokat (sok,
valószínűleg a legtöbb hacker autodidakta). Aminek van értelme:
(a) kódot olvasni és kódot írni.

Hogyan lesz az emberből Hacker]]>
            </programlisting>
        </para>            
    </section>        
    <section>
        <title>Java EXOR-titkosító</title>
        <para>
            Írj egy EXOR-titkosítót Java-ban!
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Caesar/Titkosito_Java">https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Caesar/Titkosito_Java</link>         
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...:
            </para>
            <para>
Az előző feladathoz hasonlóan titkosítanunk kell egy tiszta szöveget kizáró vagy algoritmussal (EXOR), azonban ezúttal Java környezetben.
</para>
<para>
A <filename>Titkosito.java</filename> fájlban a Titkosito publikus osztályban létehozzuk a konstruktort, amivel átadjuk a kapott értékeket.
Egy byte tömbben tároljuk a kulcsot, aminek karaktereit a kulcsSzöveg sztringből nyerjük ki, majd a <function>getBytes()</function> függvény segítségével bontjuk azt.
Szintén byte tömbben lesz a buffer, melynek méretét is meghatározzuk (ismét 256 byte).
</para>
<para>
A külső while ciklus tömbönként addig olvassa a terminálba beírt tiszta szövegünket, amíg csak tudja. 
A belső for ciklusban helyezzük rá a kulcsot a beolvasott szövegre a kulcsIndex változó segítségével, majd végrehajtjuk a kizáró vagy műveletet. 
Az eredmény a buffer tömbben keletkezik, amit végül a kimenetre írunk.
Az esetleges hibák elkapásához try-catch blokkot használunk.
<programlisting language="Java"><![CDATA[
$ more Titkosito.java
public class Titkosito {
    
    public Titkosito(String kulcsSzöveg,
            java.io.InputStream bejövőCsatorna,
            java.io.OutputStream kimenőCsatorna)
            throws java.io.IOException {
        
        byte [] kulcs = kulcsSzöveg.getBytes();
        byte [] buffer = new byte[256];
        int kulcsIndex = 0;
        int olvasottBájtok = 0;

        while((olvasottBájtok =
                bejövőCsatorna.read(buffer)) != -1) {
            
            for(int i=0; i<olvasottBájtok; ++i) {
                
                buffer[i] = (byte)(buffer[i] ^ kulcs[kulcsIndex]);
                kulcsIndex = (kulcsIndex+1) % kulcs.length;
                
            }
            
            kimenőCsatorna.write(buffer, 0, olvasottBájtok);
            
        }
        
    }
    
    public static void main(String[] args) {
        
        try {
            
            new Titkosito(args[0], System.in, System.out);
            
        } catch(java.io.IOException e) {
            
            e.printStackTrace();
            
        }
        
    }
    
}]]>
</programlisting>
A fordítás és a futtatás is hasonlóképp zajlik, mint C környezetben.
Ezúttal azonban nem txt fájlban fogjuk tárolni a tiszta szövegünket, hanem a kulcs megadása után (jelen esetben ez a <filename>pelda</filename> lenne) írjuk a terminálba soronként a titkosításra váró csipetet.
Ctrl+D billentyűkombináció lenyomásáig a terminál várni fogja az inputot, tehát tetszőleges hosszúságú szöveget tudunk írni.
<programlisting><![CDATA[
$ javac Titkosito.java
$ java Titkosito pelda > titkositott.szoveg
első sor    
második sor]]>
</programlisting>
A szöveg titkosítva lett, dekódolni hasonló paranccsal tudunk, azonban figyeljünk arra, hogy ezúttal ellentétes relációjelet kell használnunk.
Ekkor outputként megkapjuk az eredeti, jól értelmezhető szöveget.
<programlisting><![CDATA[
$ java Titkosito pelda < titkositott.szoveg
első sor
második sor]]>
</programlisting>
        </para>            
    </section>        
    <section>
        <title>C EXOR-törő</title>
        <para>
            Írj egy olyan C programot, amely megtöri az első feladatban előállított titkos szövegeket!
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Caesar/Toro_C">https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Caesar/Toro_C</link>                                 
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...: 
            </para>
            <para>Tutor: <link xlink:href="https://gitlab.com/fail99">Hajnal Gergő</link></para>
            <para>
            Mivel ez a feladat a korábban létrehozott EXOR-titkosítónkra épül, ezért dolgozhatunk ugyanazokkal 
            a szövegfájlokkal (<filename>tiszta.txt</filename> fájlban az eredeti szöveg és <filename>titkos.szoveg</filename> állományban a titkosító által generált szöveg).
            Az előző feladatban egy 8 számjegyű kulccsal dolgoztunk (56789012), ennek megfelelően a <filename>t.c</filename> kódja is ehhez alkalmazkodik (#define KULCS_MERET 8).
            A titkos szövegünk maximális mérete 4096 karakter lehet.
            </para>
            <para>
            A <function>tiszta_lehet</function> függvényben feltételezzük, hogy a tiszta szöveg valószínűleg tartalmazza a leggyakoribb magyar szavakat pl. hogy, nem, az, ha.
            Az átlagos szóhossz definiálásával csökkentjük a potenciális töréseket, ennek ellenére valószínűleg nem csak a helyes kulcsot (és tiszta szöveget) fogjuk visszakapni.
            </para>
            <para>Beolvassuk a titkos szöveg bájtjait egy while ciklus segítségével, illetve a titkos bufferben nullázuk a maradék helyet.
            For ciklusokkal és az EXOR algoritmus segítségével létrehozzuk a lehetséges kulcsokat.
            Ha van találat, akkor kiiratjuk a kulcsot és a feltört szöveget.
        <programlisting language="C"><![CDATA[
$ more t.c
#define MAX_TITKOS 4096
#define OLVASAS_BUFFER 256
#define KULCS_MERET 8
#define _GNU_SOURCE

#include <stdio.h>
#include <unistd.h>
#include <string.h>

double
atlagos_szohossz (const char *titkos, int titkos_meret)
{
  int sz = 0;
  for (int i = 0; i < titkos_meret; ++i)
    if (titkos[i] == ' ')
      ++sz;

  return (double) titkos_meret / sz;
}

int
tiszta_lehet (const char *titkos, int titkos_meret)
{

  double szohossz = atlagos_szohossz (titkos, titkos_meret);

  return szohossz > 6.0 && szohossz < 9.0
    && strcasestr (titkos, "hogy") && strcasestr (titkos, "nem")
    && strcasestr (titkos, "az") && strcasestr (titkos, "ha");

}

void
exor (const char kulcs[], int kulcs_meret, char titkos[], int titkos_meret)
{

  int kulcs_index = 0;

  for (int i = 0; i < titkos_meret; ++i)
    {

      titkos[i] = titkos[i] ^ kulcs[kulcs_index];
      kulcs_index = (kulcs_index + 1) % kulcs_meret;

    }

}

int
exor_tores (const char kulcs[], int kulcs_meret, char titkos[],
	    int titkos_meret)
{

  exor (kulcs, kulcs_meret, titkos, titkos_meret);

  return tiszta_lehet (titkos, titkos_meret);

}

int
main (void)
{

  char kulcs[KULCS_MERET];
  char titkos[MAX_TITKOS];
  char *p = titkos;
  int olvasott_bajtok;

  while ((olvasott_bajtok =
	  read (0, (void *) p,
		(p - titkos + OLVASAS_BUFFER <
		 MAX_TITKOS) ? OLVASAS_BUFFER : titkos + MAX_TITKOS - p)))
    p += olvasott_bajtok;

  for (int i = 0; i < MAX_TITKOS - (p - titkos); ++i)
    titkos[p - titkos + i] = '\0';

  for (int ii = '0'; ii <= '9'; ++ii)
    for (int ji = '0'; ji <= '9'; ++ji)
      for (int ki = '0'; ki <= '9'; ++ki)
	for (int li = '0'; li <= '9'; ++li)
	  for (int mi = '0'; mi <= '9'; ++mi)
	    for (int ni = '0'; ni <= '9'; ++ni)
	      for (int oi = '0'; oi <= '9'; ++oi)
		for (int pi = '0'; pi <= '9'; ++pi)
		  {
		    kulcs[0] = ii;
		    kulcs[1] = ji;
		    kulcs[2] = ki;
		    kulcs[3] = li;
		    kulcs[4] = mi;
		    kulcs[5] = ni;
		    kulcs[6] = oi;
		    kulcs[7] = pi;

		    if (exor_tores (kulcs, KULCS_MERET, titkos, p - titkos))
		      printf
			("Kulcs: [%c%c%c%c%c%c%c%c]\nTiszta szoveg: [%s]\n",
			 ii, ji, ki, li, mi, ni, oi, pi, titkos);

		    exor (kulcs, KULCS_MERET, titkos, p - titkos);
		  }

  return 0;
}
$ gcc t.c -O3 -o t -std=c99
$ time ./t <titkos.szoveg |grep 56789012
Kulcs: [56789012]

real	2m29,536s
user	2m29,363s
sys	0m0,053s]]>
        </programlisting>
        Annak ellenére, hogy a -O3 kapcsolót is felhasználtuk az optimalizáláshoz, viszonylag sok ideig tartott a törés (legalábbis ahhoz képest, hogy milyen rövid szövegrészlettel dolgoztunk).
        Éppen ezért átszervezzük a kódot: a ciklusmagba egy lokális kulcsnak dinamikusan foglaljuk a helyet, a ciklusmag dolgozik vele, majd felszabadítja a tömböt. Ezzel biztosítjuk, hogy a vizsgált kulcsok nem zavarodnak össze.
        A program készen áll arra, hogy párhuzamos szálak dolgozzanak a ciklusmagon (#pragma omp parallel).
        <programlisting language="C"><![CDATA[
$ more t2.c
#define MAX_TITKOS 4096
#define OLVASAS_BUFFER 256
#define KULCS_MERET 8
#define _GNU_SOURCE

#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <stdlib.h>

double
atlagos_szohossz (const char *titkos, int titkos_meret)
{
    int sz = 0;
    for (int i = 0; i < titkos_meret; ++i)
        if (titkos[i] == ' ')
            ++sz;

    return (double) titkos_meret / sz;
}

int
tiszta_lehet (const char *titkos, int titkos_meret)
{

    double szohossz = atlagos_szohossz (titkos, titkos_meret);

    return szohossz > 6.0 && szohossz < 9.0
           && strcasestr (titkos, "hogy") && strcasestr (titkos, "nem")
           && strcasestr (titkos, "az") && strcasestr (titkos, "ha");

}

void
exor (const char kulcs[], int kulcs_meret, char titkos[], int titkos_meret, char *buffer)
{

    int kulcs_index = 0;

    for (int i = 0; i < titkos_meret; ++i)
    {

        buffer[i] = titkos[i] ^ kulcs[kulcs_index];
        kulcs_index = (kulcs_index + 1) % kulcs_meret;

    }

}

void
exor_tores (const char kulcs[], int kulcs_meret, char titkos[],
            int titkos_meret)
{

    char *buffer;

    if ((buffer = (char *)malloc(sizeof(char)*titkos_meret)) == NULL)
    {
        printf("Memoria (buffer) faliora\n");
        exit(-1);
    }

    exor (kulcs, kulcs_meret, titkos, titkos_meret, buffer);

    if (tiszta_lehet (buffer, titkos_meret))
    {
        printf("Kulcs: [%c%c%c%c%c%c%c%c]\nTiszta szoveg: [%s]\n",
               kulcs[0],kulcs[1],kulcs[2],kulcs[3],kulcs[4],kulcs[5],kulcs[6],kulcs[7], buffer);
    }

    free(buffer);

}

int
main (void)
{

    char kulcs[KULCS_MERET];
    char titkos[MAX_TITKOS];
    char *p = titkos;
    int olvasott_bajtok;

    while ((olvasott_bajtok =
                read (0, (void *) p,
                      (p - titkos + OLVASAS_BUFFER <
                       MAX_TITKOS) ? OLVASAS_BUFFER : titkos + MAX_TITKOS - p)))
        p += olvasott_bajtok;

    for (int i = 0; i < MAX_TITKOS - (p - titkos); ++i)
        titkos[p - titkos + i] = '\0';

#pragma omp parallel for private(kulcs)
    for (int ii = '0'; ii <= '9'; ++ii)
        for (int ji = '0'; ji <= '9'; ++ji)
            for (int ki = '0'; ki <= '9'; ++ki)
                for (int li = '0'; li <= '9'; ++li)
                    for (int mi = '0'; mi <= '9'; ++mi)
                        for (int ni = '0'; ni <= '9'; ++ni)
                            for (int oi = '0'; oi <= '9'; ++oi)
                                for (int pi = '0'; pi <= '9'; ++pi)
                                {
                                    kulcs[0] = ii;
                                    kulcs[1] = ji;
                                    kulcs[2] = ki;
                                    kulcs[3] = li;
                                    kulcs[4] = mi;
                                    kulcs[5] = ni;
                                    kulcs[6] = oi;
                                    kulcs[7] = pi;

                                    exor_tores (kulcs, KULCS_MERET, titkos, p - titkos);

                                }

    return 0;
}
$ gcc t2.c -O3 -fopenmp -o t2 -std=c99
$ time ./t2 <titkos.szoveg |grep 56789012
Kulcs: [56789012]

real	0m28,091s
user	1m31,213s
sys	0m0,494s]]>
        </programlisting>
        Visszakaptuk tehát a kulcsot és a tiszta szöveget is, illetve a törési időt is sikerült jelentősen redukálnunk.
        </para>            
    </section>        
    <section>
        <title>Neurális OR, AND és EXOR kapu</title>
        <para>
            R
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/Koyw6IH5ScQ">https://youtu.be/Koyw6IH5ScQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Caesar/Neuralis">https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Caesar/Neuralis</link>       
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...:
            </para>
            <para>
            A neuron az elektromos jelek összegyűjtéséért, feldolgozásáért és szétterjesztéséért felelős agysejt.
            Az agy információfeldolgozó kapacitása elsősorban neuronok hálózatából alakult ki.
            Neurális hálónak nevezzük azt a párhuzamos működésre képes információfeldolgozó eszközt, amely nagyszámú, hasonló típusú elem összekapcsolt rendszeréből áll.
            Továbbá jellemzője az is, hogy rendelkezik tanulási algoritmussal és képes előhívni a megtanult információt.
            Éppen ezért a neurális kapu szimulálásához az R programozási nyelvet fogjuk használni.
            </para>
            <para>
            a1 és a2 értékeket tartalmaz, az OR pedig a logikai VAGY műveletet jelöli. A program az általunk meghatározott szabályok alapján elkezd tanulni.
            A <function>compute</function> parancs segítségével tudjuk leellenőrizni, hogy a megfelelő eredményeket kaptuk-e vagy sem.
            A logikai ÉS művelet (AND) betanítása is hasonló módon történik.
            Az EXOR műveletnél azonban csak többrétegű neuronokkal lehetséges a tanítás (hidden = 2).
            <programlisting language="R"><![CDATA[
$ more neuralis.r
library(neuralnet)

a1    <- c(0,1,0,1)
a2    <- c(0,0,1,1)
OR    <- c(0,1,1,1)

or.data <- data.frame(a1, a2, OR)

nn.or <- neuralnet(OR~a1+a2, or.data, hidden=0, linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.or)

compute(nn.or, or.data[,1:2])

a1    <- c(0,1,0,1)
a2    <- c(0,0,1,1)
OR    <- c(0,1,1,1)
AND   <- c(0,0,0,1)

orand.data <- data.frame(a1, a2, OR, AND)

nn.orand <- neuralnet(OR+AND~a1+a2, orand.data, hidden=0, linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.orand)

compute(nn.orand, orand.data[,1:2])

a1      <- c(0,1,0,1)
a2      <- c(0,0,1,1)
EXOR    <- c(0,1,1,0)

exor.data <- data.frame(a1, a2, EXOR)

nn.exor <- neuralnet(EXOR~a1+a2, exor.data, hidden=0, linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.exor)

compute(nn.exor, exor.data[,1:2])

a1      <- c(0,1,0,1)
a2      <- c(0,0,1,1)
EXOR    <- c(0,1,1,0)

exor.data <- data.frame(a1, a2, EXOR)

nn.exor <- neuralnet(EXOR~a1+a2, exor.data, hidden=c(6, 4, 6), linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.exor)

compute(nn.exor, exor.data[,1:2])]]>
            </programlisting>
            A Turing-fejezet egyes feladataihoz már használtuk az R nyelvet, így az alapcsomagot már a sudo apt install r-base paranccsal sikerült telepítenünk.
            A neurális hálóhoz azonban szükség van egy új package, a neuralnet telepítésére is.
            <programlisting><![CDATA[
$ sudo -i R

$ Rscript neuralis.r

dev.new(): using pdf(file="Rplots4.pdf")
$neurons
$neurons[[1]]
       a1 a2
[1,] 1  0  0
[2,] 1  1  0
[3,] 1  0  1
[4,] 1  1  1


$net.result
           [,1]
[1,] 0.00130551
[2,] 0.99900203
[3,] 0.99974514
[4,] 1.00000000

dev.new(): using pdf(file="Rplots5.pdf")
$neurons
$neurons[[1]]
       a1 a2
[1,] 1  0  0
[2,] 1  1  0
[3,] 1  0  1
[4,] 1  1  1


$net.result
             [,1]         [,2]
[1,] 0.0001239806 2.492037e-09
[2,] 0.9999041722 1.324437e-03
[3,] 0.9999719727 1.210962e-03
[4,] 1.0000000000 9.984525e-01

dev.new(): using pdf(file="Rplots6.pdf")
$neurons
$neurons[[1]]
       a1 a2
[1,] 1  0  0
[2,] 1  1  0
[3,] 1  0  1
[4,] 1  1  1


$net.result
          [,1]
[1,] 0.4999963
[2,] 0.5000000
[3,] 0.4999994
[4,] 0.5000032

dev.new(): using pdf(file="Rplots7.pdf")
$neurons
$neurons[[1]]
       a1 a2
[1,] 1  0  0
[2,] 1  1  0
[3,] 1  0  1
[4,] 1  1  1

$neurons[[2]]
     [,1]         [,2]         [,3]        [,4]         [,5]       [,6]
[1,]    1 6.290729e-01 0.1141913758 0.245739867 6.979066e-01 0.80869013
[2,]    1 5.353683e-03 0.0008501629 0.876876282 4.109718e-03 0.14928619
[3,]    1 3.667414e-03 0.5907603579 0.001167598 2.409593e-03 0.64460030
[4,]    1 1.168213e-05 0.0094382898 0.024916372 4.314535e-06 0.07002245
            [,7]
[1,] 0.333047941
[2,] 0.006800589
[3,] 0.575668527
[4,] 0.018262513

$neurons[[3]]
     [,1]       [,2]       [,3]       [,4]       [,5]
[1,]    1 0.09072998 0.88375320 0.04604784 0.00359369
[2,]    1 0.80284598 0.10697184 0.90651143 0.96633263
[3,]    1 0.93078733 0.07347964 0.92216665 0.89298832
[4,]    1 0.20851748 0.87840601 0.09806825 0.54612603

$neurons[[4]]
     [,1]       [,2]       [,3]       [,4]       [,5]       [,6]       [,7]
[1,]    1 0.84331763 0.02579372 0.01369172 0.02099259 0.06751112 0.97187381
[2,]    1 0.02760510 0.97573337 0.98856118 0.97624236 0.98292454 0.04089352
[3,]    1 0.02041818 0.98083541 0.99245998 0.97961148 0.99042589 0.02940778
[4,]    1 0.74684284 0.09712259 0.03664443 0.09323795 0.08422345 0.86794567


$net.result
             [,1]
[1,] 0.0002000245
[2,] 0.9993322487
[3,] 0.9994111852
[4,] 0.0006265804]]>
            </programlisting>
Ezután megkapjuk a szimuláció eredményeit szemléltető ábrákat:
            <mediaobject>
            <imageobject>
            <imagedata fileref="img/neuralis1.PNG" format="PNG" scale="90"/>
            </imageobject>
        </mediaobject>
        <mediaobject>
            <imageobject>
            <imagedata fileref="img/neuralis2.PNG" format="PNG" scale="90"/>
            </imageobject>
        </mediaobject>
        <mediaobject>
            <imageobject>
            <imagedata fileref="img/neuralis3.PNG" format="PNG" scale="90"/>
            </imageobject>
        </mediaobject>
        <mediaobject>
            <imageobject>
            <imagedata fileref="img/neuralis4.PNG" format="PNG" scale="90"/>
            </imageobject>
        </mediaobject>
        </para>            
    </section>        
    <section>
        <title>Hiba-visszaterjesztéses perceptron</title>
        <para>
            C++
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Caesar/Perceptron">https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Caesar/Perceptron</link>                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...:
            </para>
            <para>
A Benoît Mandelbrot nevéhez köthető Mandelbrot-halmaz a komplex számsíkon ábrázolva egy fraktálalakzatot jelent. 
A kétdimenziós halmaz png ábráját fogjuk először létrehozni a <filename>mandel.cpp</filename> file segítségével.
<programlisting language="C++"><![CDATA[
$ more mandel.cpp
#include <iostream>
#include "png++/png.hpp"

int main (int argc, char *argv[])
{
    if (argc != 2) {
        std::cout << "Hasznalat: ./mandelpng fajlnev";
        return -1;
    }

    double a = -2.0, b = .7,  c = -1.35, d = 1.35;
    int szelesseg = 600, magassag = 600, iteraciosHatar = 1000;

    png::image <png::rgb_pixel> kep (szelesseg, magassag);

    double dx = (b-a)/szelesseg;
    double dy = (d-c)/magassag;
    double reC, imC, reZ, imZ, ujreZ, ujimZ;
    int iteracio = 0;
    std::cout << "Szamitas";
    for (int j=0; j<magassag; ++j) {

        for (int k=0; k<szelesseg; ++k) {

            reC = a+k*dx;
            imC = d-j*dy;

            reZ = 0;
            imZ = 0;
            iteracio = 0;
            while (reZ*reZ + imZ*imZ < 4 && iteracio < iteraciosHatar) {

                ujreZ = reZ*reZ - imZ*imZ + reC;
                ujimZ = 2*reZ*imZ + imC;
                reZ = ujreZ;
                imZ = ujimZ;

                ++iteracio;

            }

            kep.set_pixel(k, j, png::rgb_pixel(255-iteracio%256,
                                               255-iteracio%256, 255-iteracio%256));
        }
        std::cout << "." << std::flush;
    }

    kep.write (argv[1]);
    std::cout << argv[1] << " mentve" << std::endl;
}]]>
</programlisting>
Ahogy látjuk, a <filename>mandel.cpp</filename> sikeres fordításához és futtatásához szükségünk lesz a libpng, libpng++ könyvtárakra és a <filename>png++/png.hpp</filename> header filera.
A könyvtárakat a sudo parancs segítségével tudjuk telepíteni, viszont a headerhez le kell töltenünk a png++ hivatalos oldaláról a becsomagolt telepítő állományokat: <link xlink:href="http://download.savannah.nongnu.org/releases/pngpp/png++-0.2.9.tar.gz">png++-0.2.9.tar.gz</link>
<programlisting><![CDATA[
//A terminálba leadott parancsok:
$ sudo apt-get install libpng-dev
$ sudo apt-get install libpng++-dev
$ tar -zxf png++-0.2.9.tar.gz -C ~/Letöltések
$ cd ~/Letöltések/png++-0.2.9
$ make]]>
</programlisting>
Ha minden jól megy, mostmár tudjuk fordítani és futtatni a png elkészítéséhez szükséges programot.
<programlisting><![CDATA[
$ g++ mandel.cpp `libpng-config --ldflags` -o mandel
$ ./mandel mandel.png
Szamitas......................................mandel.png mentve]]>
</programlisting>
<mediaobject>
            <imageobject>
            <imagedata fileref="img/mandel.png" format="PNG" scale="50"/>
            </imageobject>
        </mediaobject>
A perceptron az egyik legegyszerűbb előrecsatolt neurális hálózat. 
A <filename>main.cpp</filename> segítségével fogjuk szimulálni a hiba-visszaterjesztéses módszert, mely a többrétegű perceptronok (MLP) egyik legfőbb tanítási módszere.
Ahhoz, hogy ezt fordítani és futtatni tudjuk később, szükségünk lesz az <filename>mlp.hpp</filename> header filera, mely már tartalmazza a Perceptron osztályt.
</para>
<para>
Az előző program futtatásával létrejött Mandelbrot png ábrát fogjuk beimportálni.
A header filenak köszönhetően megadhatjuk a rétegek számát, illetve a neuronok darabszámát.
A beolvasásra kerülő kép piros részeit a lefoglalt tárba másoljuk bele.
</para>
<para>
A fordításhoz a C++11 szabványt használjuk, futtatáskor pedig megadjuk annak a képfájlnak a nevét és kiterjesztését, amelyet be kívánunk olvasni (jelen esetben ez a <filename>mandel.cpp</filename>-ből kapott <filename>mandel.png</filename> ábra).
<programlisting language="C++"><![CDATA[
$ more main.cpp
#include <iostream>
#include "mlp.hpp"
#include <png++/png.hpp>

int main (int argc, char **argv)
{
	png::image <png::rgb_pixel> png_image (argv[1]);
	int size = png_image.get_width() *png_image.get_height();
	Perceptron* p = new Perceptron (3, size, 256, 1);
	double* image = new double[size];
	for (int i {0}; i<png_image.get_width(); ++i)
		for (int j {0}; j<png_image.get_height(); ++j)
			image[i*png_image.get_width() +j] = png_image[i][j].red;
	double value = (*p) (image);
	std::cout << value << std::endl;
	delete p;
	delete [] image;
}

$ g++ mlp.hpp main.cpp -o perc -lpng -std=c++11
$ ./perc mandel.png
0.731059]]>
</programlisting>

        </para>            
    </section>        
        
</chapter>                
