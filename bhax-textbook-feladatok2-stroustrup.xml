<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Stroustrup!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>JDK osztályok</title>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Stroustrup/JDK">https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Stroustrup/JDK</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...:
        </para>
        <para>Tutor: <link xlink:href="https://drive.google.com/file/d/1LslRBwfjhPvwQJeZ-nE3B6hduiE85uJ5/view?fbclid=IwAR3ihYoYe-VFCJhuv6-qPQDSq24LI-k041qOPwhCU-NCfue0U7tNDumCRoI">Varga Erik Szilveszter</link></para>

<para>
A JDK összes osztályát kilistázó program elkészítéséhez mintául szolgálhat a FUTURE projekt <filename>fenykard.cpp</filename> fájlja, melynek <function>read_acts</function> függvénye a .props fájlok kereséséért és listázásáért volt felelős.
<programlisting language="C++"><![CDATA[
void read_acts ( boost::filesystem::path path, std::map <std::string, int> &acts )
{

        if ( is_regular_file ( path ) ) {

                std::string ext ( ".props" );
                if ( !ext.compare ( boost::filesystem::extension ( path ) ) ) {

                        std::string actpropspath = path.string();
                        std::size_t end = actpropspath.find_last_of ( "/" );
                        std::string act = actpropspath.substr ( 0, end );

                        acts[act] = get_points ( path );

                }

        } else if ( is_directory ( path ) )
                for ( boost::filesystem::directory_entry & entry : boost::filesystem::directory_iterator ( path ) )
                        read_acts ( entry.path(), acts );

}]]>
</programlisting>
</para>

<para>
A <filename>boost.cpp</filename>-vel tehát a JDK-ban található <filename>src.zip</filename>-ben lévő .java állományokat fogjuk kilistázni (a könyvtárszerkezet kicsomagolása után), majd ezek alapján kiiratjuk a JDK osztályok számát.
A Boost könyvtár segítségével megyünk végig a könyvtárszerkezeten, így a .java fájlokban lévő osztályok kigyűjtése felgyorsul és leegyszerűsödik.
<programlisting language="C++"><![CDATA[
class Feldolgoz {
    
private:
    std::string _path;
    int _count = 0;
    
public:
    Feldolgoz(std::string filePath):_path(filePath) {}
    
    void travel(boost::filesystem::path path) {
        boost::filesystem::directory_iterator it{path}, eod;
        BOOST_FOREACH(boost::filesystem::path const& p, std::make_pair(it, eod)) {
            if (boost::filesystem::is_regular_file(p) && boost::filesystem::extension(p.string()) == ".java") {
                std::cout << p << std::endl;
                _count++;
            }
            else if(boost::filesystem::is_directory(p)) travel(p);
        }
    }
    
    std::string getPath() {
        return _path;
    }
    
    int getCount() {
        return _count;
    }
    
};

void usage(){
    std::cout << "./boost <mappa>\n";
}

int main(int argc, char** argv){
    if (argc < 2) {
        usage();
        return -1;
    }

    Feldolgoz* obj = new Feldolgoz (argv[1]);
    obj->travel(obj->getPath());
    std::cout << obj->getCount() << std::endl;
}]]>
</programlisting>
</para>

<para>
Ha az <filename>src.zip</filename> tartalmát kicsomagoltuk, akkor következhet a .cpp fordítása.
Ezután ha argumentumként megadjuk az src mappát futtatáskor, megkapjuk a JDK osztályok számát:
<programlisting><![CDATA[
$ g++ boost.cpp -o boost -lboost_system -lboost_filesystem -lboost_program_options -std=c++14
$ ./boost src]]>
</programlisting>
</para>

<mediaobject>
<imageobject>
<imagedata fileref="img/jdk.PNG" format="PNG" scale="100"/>
</imageobject>
</mediaobject>
    </section>
    
    <section>
        <title>Másoló-mozgató szemantika</title>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Stroustrup/Szemantika">https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Stroustrup/Szemantika</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...:
        </para>
        <para>Tutor: <link xlink:href="https://github.com/battila7">Bagossy Attila</link></para>

<para>Forrás: <link xlink:href="http://www.mogi.bme.hu/TAMOP/c++programozas/ch03.html#ch-III.2.1.4">Objektum-orientált programozás C++ nyelven</link></para>

<para>
A konstruktor olyan tagfüggvény, melynek neve megegyezik az osztály nevével, illetve nincs visszatérési típusa.
Nem foglal új tárterületet, mert feladata a meglévő tárterület inicializálása.
Szintén speciális tagfüggvény a destruktor, a lefoglalt erőforrások felszabadításáért felel, és szintén nincs visszatérési típusa.
</para>

<para>
A másoló konstruktor és a másoló értékadás lényege, hogy egy objektum tartalmát át tudjuk másolni egy másikba.
Az objektum-orientált programozásban ismert szabály, a Rule of Three lényege, hogy amennyiben az osztályunk tartalmaz másoló konstruktort, másoló értékadó operátort vagy destruktort, úgy kötelesek vagyunk mindhármat használni.
A következő kódcsipetben a Rule of Three működését fogjuk látni gyakorlatban.
</para>

<para>
Először is létrehozzuk az Array nevű osztályunkat, mely tartalmazni fogja az elemszámláló konstruktorunkat és a másoló konstruktorunkat.
A copy constructor segítségével beletöltjük az eredeti tömb elemeit az új tömbbe.

<programlisting language="C++"><![CDATA[
#include <cstdio>

class Array
{
public:
    Array(size_t elementCount):
        elementCount(elementCount), elements(new int[elementCount])
    {}

    Array(const Array &other):
        elementCount(other.elementCount), elements(new int[other.elementCount])
    {
        std::printf("Copy Constructor\n");

        for (size_t i = 0; i < this->elementCount; ++i)
        {
            this->elements[i] = other.elements[i];
        }
    }]]>
</programlisting>
</para>

<para>
Az Array osztály részeként következhet a destruktor megírása, melynek feladata a memóriatár felszabadítása.
Az array destructor kiírja a két tömb első elemének kezdőcímét, majd felszabadítja a memóriát a tömbök kiűrítésével.

<programlisting language="C++"><![CDATA[
    ~Array()
    {
        std::printf("Array Destructor\n");
        std::printf("%X\n", elements);
        delete []elements;
    }]]>
</programlisting>
</para>

<para>
A hármas szabály értelmében már csak a másoló értékadó operátor hiányzik.
Túlterheljük az egyenlőségjel operátort, a paramétert nem módosítjuk (const).
Ha az eredeti és a copy ctor segítségével feltöltött tömb nem egyenlő értékekkel rendelkezik, akkor a két tömb elemszámát egyenlővé tesszük, majd kiürítjük az első tömböt.
Ezután létrehozunk egy új tömböt megegyező elemszámmal, majd for ciklussal az első tömb aktuális elemét egyenlővé tesszük az új tömb aktuális elemével.

<programlisting language="C++"><![CDATA[
    Array &operator=(const Array &other)
    {
        std::printf("Copy Assignment\n");

        if (&other != this)
        {
            this->elementCount = other.elementCount;

            delete []this->elements;

            this->elements = new int[this->elementCount];

            for (size_t i = 0; i < this->elementCount; ++i)
            {
                this->elements[i] = other.elements[i];
            }
        }

        return *this;
    }]]>
</programlisting>
</para>

<para>
Az Array osztály fillWith függvényével töltjük fel az első, ötelemű tömböt értékekkel (csupa ötössel).
A hármas szabály betartásának köszönhetően az eredeti tömbbe beletöltött értékek a második tömbbe is bekerülnek.

<programlisting language="C++"><![CDATA[
    void fillWith(int value)
    {
        for (size_t i = 0; i < elementCount; ++i)
        {
            elements[i] = value;
        }
    }

    void print()
    {
        for (size_t i = 0; i < elementCount; ++i)
        {
            std::printf("%d\n", elements[i]);
        }
    }

    size_t elementCount;
    int *elements;
};

int main(int argc, char **argv)
{
    Array first(5);
    first.fillWith(5);

    Array second(first);

    first.print();
    second.print();

    return 0;
}]]>
</programlisting>
</para>

<para>
Kiiratáskor így a következőket kapjuk:
<programlisting><![CDATA[
$ g++ copy.cpp -o copy
$ ./copy
Copy Constructor
5
5
5
5
5
5
5
5
5
5
Array Destructor
A94ABED0
Array Destructor
A94ABEB0]]>
</programlisting>
</para>

<para>
A mozgató szemantika lényege, hogy átruházza az erőforrásokat egyik objektumról a másikra, tehát az eredeti objektum (forrásobjektum) elveszti a tartalmát.
A Rule of Three mellett létezik az ún. Rule of Five szabály is, melyben megjelenik a mozgató konstruktor és a mozgató értékadó operátor osztályon belüli használata is.
A szabály bemutatásához akár az előző kódot is tudjuk bővíteni, ezúttal az eredeti tömb értékei megszorozva fognak az új tömbbe bekerülni. 
</para>

<para>
A C++11-ben bevezetett rvalue (<![CDATA[&&]]>) olyan érték, melynek nem tudjuk lekérdezni a memóriacímét (temporary).
Mozgató értékadásnál egyeztetjük a két tömb elemszámát és kezdőcímét.
A kezdőcímet nullára állítjuk, így nem fog kétszer felszabadulni.

<programlisting language="C++"><![CDATA[
    Array &operator=(Array &&other)
    {
        std::printf("Array Move Assignment\n");

        if (&other != this)
        {
            this->elementCount = other.elementCount;
            this->elements = other.elements;

            other.elements = nullptr;
        }

        return *this;
    }]]>
</programlisting>
</para>

<para>
A szorzáshoz új tömböt hozunk létre, memóriát foglalunk le a tömbnek.
Feltöltjük az új tömböt úgy, hogy az eredeti értékeket megszorozzuk egy szorzóval, majd kiiratjuk az új tömb kezdőcímét.
Az első tömbben tehát marad az 5 db ötös, míg a másikba ezúttal a négyzetre emelt értékek kerülnek, hiszen a multiplier is 5 lesz.
Kiiratjuk továbbá a két tömb kezdőcímét, melyek meg fognak egyezni.

<programlisting language="C++"><![CDATA[
Array multiply(Array &array, int multiplier)
{
    Array multiplied(array.elementCount);

    for (size_t i = 0; i < multiplied.elementCount; ++i)
    {
        multiplied.elements[i] = array.elements[i] * multiplier;
    }

    std::printf("Multiplied %X\n", multiplied.elements);

    return multiplied;
}

int main(int argc, char **argv)
{
    Array first(5);

    first.fillWith(5);
    first.print();
    first = multiply(first, 5); 

    std::printf("First %X\n", first.elements);

    first.print();

    return 0;
}]]>
</programlisting>
</para>

<para>
Futtatáskor meg is kapjuk a megtárgyalt értékeket és címeket:

<programlisting><![CDATA[
$ g++ move.cpp -o move
$ ./move
Array Constructor
5
5
5
5
5
Array Constructor
Multiplied 6B32E0
Array Move Assignment
Array Destructor
0
First 6B32E0
25
25
25
25
25
Array Destructor
6B32E0]]>
</programlisting>
</para>

    </section>
    
    <section>
        <title>Hibásan implementált RSA törése + Összefoglaló</title>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Stroustrup/RSA">https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Stroustrup/RSA</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...:
        </para>
        <para>
            Tutor: <link xlink:href="http://github.com/Vamosz/PROG2">Vámosi Patrik</link>
        </para>
        <para>Forrás: <link xlink:href="http://java.inf.elte.hu/java-5.0/">Java 2 útikalauz programozóknak 5.0</link>, <link xlink:href="http://www.inf.u-szeged.hu/~tnemeth/eloadas/a2_A.pdf">Nyilvános kulcsú titkosítás - RSA algoritmus</link></para>

<para>
A Java a JDK 1.1 verziótól tartalmaz két új osztályt, a BigIntegert és a BigDecimalt. Az osztályokat azzal a szándékkal fejlesztették ki, hogy megkönnyítsék azoknak a munkáját, akiknek a Long nem elég nagy, illetve a Float osztály nem elég pontos.
</para>

<para>
A BigDecimal osztály tetszőleges pontosságú előjeles valós szám ábrázolására alkalmas, amely már a Java 1.1 
verziótól a java.math csomag része és amelyet a J25E 5.0 verziótól valódi lebegőpontos műveletekkel is kiegészítettek.
A típus egy tetszőlegesen nagy egész értékből és egy nem negatív 32-bites egészből, a skálázó faktorból áll.
Pl. a 123.456 valós számot BigDecimalként felírva a típus egész értéke 123456, míg a skálázó faktor értéke 3.
</para>

<programlisting language="Java"><![CDATA[
//helyes megoldás:
BigDecimal a = new BigDecimal("123.456");
//a keletkezett változó értéke 123.456

//helytelen megoldás:
BigDecimal a = new BigDecimal(" 123.456");
//a hiba típusa NumberFormatException]]>
</programlisting>

<para>
Az eltérő skálázó értékkel rendelkező számaink nem egyenlőek:
<programlisting language="Java"><![CDATA[
class Main {
    public static void main(String[] args) {
        BigDecimal a = new BigDecimal("1.23");
        BigDecimal b = new BigDecimal("1.230");
        System.out.println(a.equals(b)); //false lesz
        System.out.println(a.compareTo(b)); //0, stringként megegyeznek]]>
</programlisting>
</para>

<para>
A BigInteger osztály egy érdekes használata a számelmélet egy speciális területe: 
a nagy értékű kongruenciák vizsgálata, a hozzákapcsolódó moduló műveletek, valamint a nagy prímszámok előállítása, illetve megbízható prímtesztek. 
A jelentőséget az adja ennek a matematikai területnek, hogy különös módon összefonódott a kriptográfiával; a biztonságos üzenetküldés problematikájával.
</para>

<para>
A nyilvános kulcsú rejtjelezés alapötlete, hogy a kódolás, titkosítás folyamatát elválasztja a dekódolástól, és olyan algoritmust használ, 
ahol a kódoláshoz használt paraméter nem azonos a dekódoláshoz használt paraméterrel, és a kódoláshoz használt paraméterből nem határozható meg a dekódoláshoz szükséges paraméter.
A nyilvános kulcsú rejtjelezés legelterjedtebb módszere az 1978-ban publikált RSA algoritmus, amely nevét alkotóinak kezdőbetűjéből kapta.
</para>

<para>
Az RSA (Ronald L. Rivest, Adi Shamir, Leon Adleman) aszimmetrikus algoritmus egy matematikai tételen (Fermat-tétel) alapszik, amely kimondja, 
hogy ha p prímszám és nem osztója egy a egész számnak, akkor a^(p-1)-1 osztható a p számmal.
Vegyünk először két véletlenszerű nagy prímszámot, p-t és q-t, n = pq.
Amennyiben p értéke 5 és q értéke 7, úgy n értéke 35 lesz értelemszerűen.
Ezután vegyünk egy olyan kis páratlan e számot, amely relatív prím fí(n) = (p-1)(q-1)-hez.
</para>

<para>
Amennyiben maradunk a korábbi példaértékeknél, úgy 24-et kapunk fí(n)-re, e értéke pedig 7 lesz (relatív prím 24-hez).
Keressünk egy olyan d számot, amely ed = 1 mod fí(n).
Mivel e értéke 7, ezért e*d = 7*31 = 1 mod 24 lesz.
Az RSA nyilvános kulcs a P = (e,n) pár lesz (P = (7,35)), az RSA titkos kulcs az S = (d,n) pár lesz (S = (31,35).
</para>

<para>
Az RSA titkosításra vonatkozó ellenőrzési eljárások közül talán a legismertebb a Solovay-Strassen teszt, illetve a Miller-Rabin teszt.
Utóbbi a következő tényeken alapszik: legyen n egy páratlan prím, és n-1 = 2*r, ahol r egy páratlan szám.
Legyen a egy tetszőleges egész úgy, hogy gcd(a,n) = 1.
Ekkor mind az a^r = 1 (modn), mind az a^2^jr = -1 mod(n) igaz, bármely j értékre.
</para>

<para>
A Miller-Rabin prímteszt pedig a következő: MILLER-RABIN(n,t).
A bemenő érték egy páratlan 3-nál nagyobb vagy egyenlő egész és egy t egynél nagyobb biztonsági paraméter.
A kimenő paraméter egy válasz, "prím" vagy "összetett" az n számunk.
</para>

<para>
Az RSA összefoglalója után következhet a "Hibásan implementált RSA törése".
A feladat megoldásához kapott <link xlink:href="https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_3.pdf">fóliák</link> alapján így néz ki a kulcsgenerálás:
<programlisting language="Java"><![CDATA[
public class RSA{
	public static void main(String[] args)
	{ 	
        int meretBitekben = (int) (700 * (int) (java.lang.Math.log( (double) 10)) / java.lang.Math.log((double) 2));
		
		System.out.println("Méret bitekben: ");
		System.out.println(meretBitekben);
		
		java.math.BigInteger p_i = new java.math.BigInteger(meretBitekben, 100, new java.util.Random() );
		
		System.out.println("p_i");
		System.out.println(p_i);
		System.out.println("p_i hexa");
		System.out.println(p_i.toString(16));
		
		java.math.BigInteger q_i = new java.math.BigInteger(meretBitekben, 100, new java.util.Random() );
		
		System.out.println("q_i");
		System.out.println(q_i);
		
		java.math.BigInteger m_i =p_i.multiply(q_i);
		
		System.out.println("m_i");
		System.out.println(m_i);
			
		java.math.BigInteger z_i = p_i.subtract(java.math.BigInteger.ONE).multiply(q_i.subtract(java.math.BigInteger.ONE));
		
		System.out.println("z_i");
		System.out.println(z_i);

		java.math.BigInteger d_i;
		do {
			do {
				d_i = new java.math.BigInteger(meretBitekben, new java.util.Random());

			} while(d_i.equals(java.math.BigInteger.ONE));
		} while(!z_i.gcd(d_i).equals(java.math.BigInteger.ONE));		
		
		System.out.println("d_i");
		System.out.println(d_i);

		java.math.BigInteger e_i = d_i.modInverse(z_i);
		
		System.out.println("e_i");
		System.out.println(e_i);
	}
}]]>
</programlisting>

A fordítást és futtatást követően megkapjuk a hibás implementáció alapján létrejövő kulcsokat:
</para>
<mediaobject>
<imageobject>
<imagedata fileref="img/rsa.PNG" format="PNG" scale="45"/>
</imageobject>
</mediaobject>

<para>
Az RSA titkosításhoz egy titkos és egy nyilvános kulcsot használunk.
Először létrehozzuk a modulust, a kitevőt és annak inverzét a KulcsPar osztályban.
A p és a q lesz a két nagy prímszámunk, melyeket összeszorozva kapjuk meg a modulus értékét.
</para>

<programlisting language="Java"><![CDATA[
public class RSA2{

static class KulcsPar{

  java.math.BigInteger d, e, m;

  public KulcsPar(){
      
      int meretBitekben = 700 * (int) (java.lang.Math.log((double) 10) / java.lang.Math.log((double) 2));

      java.math.BigInteger p = new java.math.BigInteger(meretBitekben, 100, new java.util.Random());

      java.math.BigInteger q = new java.math.BigInteger(meretBitekben, 100, new java.util.Random());

      m = p.multiply(q);

      java.math.BigInteger z = p.subtract(java.math.BigInteger.ONE).multiply(q.subtract(java.math.BigInteger.ONE));

      do {
        do {
            d = new java.math.BigInteger(meretBitekben, new java.util.Random());
          } while (d.equals(java.math.BigInteger.ONE));
        } while (!z.gcd(d).equals(java.math.BigInteger.ONE));
        
      e = d.modInverse(z);
    }
  }]]>
  </programlisting>

<para>
A titkosítás lényege, hogy a titkos szöveget kell feltölteni a tiszta szöveg ASCII kódjával.
A modPow függvénynek megadjuk az exponenst (hatványkitevőt), majd a modulust, így az ASCII kódból nagy integert kapunk.
</para>

<programlisting language="Java"><![CDATA[
public static void main(String[] args){

    KulcsPar jSzereplo = new KulcsPar();

    String tisztaSzoveg = "Utra kelunk. Megyunk az Oszbe, Vijjogva, sirva, kergetozve, Ket lankadt szarnyu heja-madar.";
    
    byte[] buffer = tisztaSzoveg.getBytes();
    java.math.BigInteger[] titkos = new java.math.BigInteger[buffer.length];

    for(int i = 0; i < titkos.length; i++)
      {
        titkos[i] = new java.math.BigInteger(new byte[]{buffer[i]});
        titkos[i] = titkos[i].modPow(jSzereplo.e, jSzereplo.m);
      }]]>
</programlisting>

<para>
Visszafejtéskor ismét igénybe vesszük ezt a függvényt, ezúttal viszont az első paraméter a kitevő inverze (d) lesz, így a nagy integerből ismét ASCII kód lesz.
A buffer tömbbe ezt betöltve megkapjuk stringként a korábban megadott tiszta szöveget.
</para>

<programlisting language="Java"><![CDATA[
    for(int i = 0; i < titkos.length; i++)
      {
        titkos[i] = titkos[i].modPow(jSzereplo.d, jSzereplo.m);
        buffer[i] = titkos[i].byteValue();
      }
    System.out.println(new String(buffer));
    }
  }]]>
  </programlisting>
<para>
Fordítás és futtatás esetén az RSA titkosítás alapján visszafejtett szöveget kapjuk vissza.
<mediaobject>
<imageobject>
<imagedata fileref="img/rsa2.PNG" format="PNG" scale="100"/>
</imageobject>
</mediaobject>
</para>
    </section>
    
    <section>
        <title>Változó argumentumszámú ctor</title>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Stroustrup/Ctor">https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Stroustrup/Ctor</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...:
        </para>
        <para>
A Benoît Mandelbrot nevéhez köthető Mandelbrot-halmaz a komplex számsíkon ábrázolva egy fraktálalakzatot jelent. 
A kétdimenziós halmaz png ábráját fogjuk először létrehozni a <filename>mandel.cpp</filename> file segítségével.
<programlisting language="C++"><![CDATA[
$ more mandel.cpp
#include <iostream>
#include "png++/png.hpp"

int main (int argc, char *argv[])
{
    if (argc != 2) {
        std::cout << "Hasznalat: ./mandelpng fajlnev";
        return -1;
    }

    double a = -2.0, b = .7,  c = -1.35, d = 1.35;
    int szelesseg = 600, magassag = 600, iteraciosHatar = 1000;

    png::image <png::rgb_pixel> kep (szelesseg, magassag);

    double dx = (b-a)/szelesseg;
    double dy = (d-c)/magassag;
    double reC, imC, reZ, imZ, ujreZ, ujimZ;
    int iteracio = 0;
    std::cout << "Szamitas";
    for (int j=0; j<magassag; ++j) {

        for (int k=0; k<szelesseg; ++k) {

            reC = a+k*dx;
            imC = d-j*dy;

            reZ = 0;
            imZ = 0;
            iteracio = 0;
            while (reZ*reZ + imZ*imZ < 4 && iteracio < iteraciosHatar) {

                ujreZ = reZ*reZ - imZ*imZ + reC;
                ujimZ = 2*reZ*imZ + imC;
                reZ = ujreZ;
                imZ = ujimZ;

                ++iteracio;

            }

            kep.set_pixel(k, j, png::rgb_pixel(255-iteracio%256,
                                               255-iteracio%256, 255-iteracio%256));
        }
        std::cout << "." << std::flush;
    }

    kep.write (argv[1]);
    std::cout << argv[1] << " mentve" << std::endl;
}]]>
</programlisting>
Ahogy látjuk, a <filename>mandel.cpp</filename> sikeres fordításához és futtatásához szükségünk lesz a libpng, libpng++ könyvtárakra és a <filename>png++/png.hpp</filename> header filera.
A könyvtárakat a sudo parancs segítségével tudjuk telepíteni, viszont a headerhez le kell töltenünk a png++ hivatalos oldaláról a becsomagolt telepítő állományokat: <link xlink:href="http://download.savannah.nongnu.org/releases/pngpp/png++-0.2.9.tar.gz">png++-0.2.9.tar.gz</link>
<programlisting><![CDATA[
//A terminálba leadott parancsok:
$ sudo apt-get install libpng-dev
$ sudo apt-get install libpng++-dev
$ tar -zxf png++-0.2.9.tar.gz -C ~/Letöltések
$ cd ~/Letöltések/png++-0.2.9
$ make]]>
</programlisting>
Ha minden jól megy, mostmár tudjuk fordítani és futtatni a png elkészítéséhez szükséges programot.
<programlisting><![CDATA[
$ g++ mandel.cpp `libpng-config --ldflags` -o mandel
$ ./mandel mandel.png
Szamitas......................................mandel.png mentve]]>
</programlisting>
<mediaobject>
            <imageobject>
            <imagedata fileref="img/mandel.png" format="PNG" scale="50"/>
            </imageobject>
        </mediaobject>
</para>
<para>
A perceptron az egyik legegyszerűbb előrecsatolt neurális hálózat. 
A <filename>main.cpp</filename> segítségével fogjuk szimulálni a hiba-visszaterjesztéses módszert, mely a többrétegű perceptronok (MLP) egyik legfőbb tanítási módszere.
Ahhoz, hogy ezt fordítani és futtatni tudjuk később, szükségünk lesz az <filename>mlp.hpp</filename> header filera, mely már tartalmazza a Perceptron osztályt.
</para>
<para>
Az előző program futtatásával létrejött Mandelbrot png ábrát fogjuk beimportálni.
A header filenak köszönhetően megadhatjuk a rétegek számát, illetve a neuronok darabszámát.
A beolvasásra kerülő kép piros részeit a lefoglalt tárba másoljuk bele.
A <filename>mandel.png</filename> alapján új képet állítunk elő, mely megkapja az eredeti kép magasságát és szélességét. A visszakapott értékeket megfeleltetjük a blue értékeknek.
</para>

<programlisting language="C++"><![CDATA[
#include <iostream>
#include "mlp.hpp"
#include <png++/png.hpp>
#include <fstream>

int main (int argc, char **argv)
{
	png::image <png::rgb_pixel> png_image (argv[1]);
	int size = png_image.get_width() *png_image.get_height();
    
	Perceptron* p = new Perceptron (3, size, 256, size);
    
	double* image = new double[size];
    
	for (int i {0}; i<png_image.get_width(); ++i)
		for (int j {0}; j<png_image.get_height(); ++j)
			image[i*png_image.get_width() +j] = png_image[i][j].red;
            
	double* newimage = (*p) (image);
    
    for (int i = 0; i<png_image.get_width(); ++i)
		for (int j = 0; j<png_image.get_height(); ++j)
			png_image[i][j].blue = newimage[i*png_image.get_width()+j];
	
    png_image.write("output.png");
    
	delete p;
	delete [] image;
}]]>
</programlisting>

<para>
Az első felvonás Perceptron feladatához képest módosításokat kell végeznünk a header file-on is, ugyanis új képet akarunk előállítani.
A double pointer () operátor már egy tömböt térít vissza, melynek segítségével bele tudunk nyúlni a képbe.
Az utolsó units tömb értékei átkerülnek a paraméterként kapott tömbbe, az eredeti és az új kép egyforma méretű lesz.
</para>

<programlisting language="C++"><![CDATA[
double* operator() ( double image [] )
  {

    units[0] = image;

    for ( int i {1}; i < n_layers; ++i )
      {

#ifdef CUDA_PRCPS

        cuda_layer ( i, n_units, units, weights );

#else

        #pragma omp parallel for
        for ( int j = 0; j < n_units[i]; ++j )
          {
            units[i][j] = 0.0;

            for ( int k = 0; k < n_units[i-1]; ++k )
              {
                units[i][j] += weights[i-1][j][k] * units[i-1][k];
              }

            units[i][j] = sigmoid ( units[i][j] );

          }

#endif

      }

    for (int i = 0; i < n_units[n_layers - 1]; i++)
        image[i] = units[n_layers - 1][i];
    
    return image;

  }]]>
</programlisting>

<para>
A fordításhoz a C++11 szabványt használjuk, futtatáskor pedig megadjuk annak a képfájlnak a nevét és kiterjesztését, amelyet be kívánunk olvasni 
(a <filename>mandel.cpp</filename>-ből kapott <filename>mandel.png</filename> ábra).
</para>
<mediaobject>
<imageobject>
<imagedata fileref="img/perceptron.PNG" format="PNG" scale="65"/>
</imageobject>
</mediaobject>
    </section>
    
</chapter>