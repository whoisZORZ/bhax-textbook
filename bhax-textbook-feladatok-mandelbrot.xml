<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Mandelbrot!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>A Mandelbrot-halmaz</title>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Mandelbrot/Halmaz">https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Mandelbrot/Halmaz</link>                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...:
            </para>
            <para>
            Benoît Mandelbrot francia-amerikai matematikus volt a fraktálok felfedezője.
            A fraktálok végtelenül komplex matematikai alakzatok, melyek változatos formáiban legalább egy felismerhető ismétlődés tapasztalható. 
            Az elnevezést Mandelbrot a latin fractus (törés) szó alapján adta, ami az ilyen alakzatok tört számú dimenziójára utal.
            </para>
            <para>
            A Mandelbrot-halmaz azon c komplex számokból áll, melyekre az alábbi rekurzív sorozat nem tart végtelenbe, azaz korlátos:
            x<subscript>1</subscript> := c és x<subscript>n+1</subscript> := x<subscript>n</subscript>*x<subscript>n</subscript> + c.
            A <filename>mandel.cpp</filename> fordításával és futtatásával fogjuk elkészíteni a Mandelbrot-halmaz kétdimenziós, számítógépes ábráját.
            </para>
            <para>
            Kezdésnek segítséget nyújtunk a kiiratáshoz: amennyiben nem adtunk meg elég argumentumot, úgy kikerül a parancssorra egy rövid használati útmutató.
            Ezután meghatározzuk a számítás adatait: szélességet, magasságot, iterációs határértéket.
            PNG képet a png++ csomaggal fogunk készíteni.
            For ciklusokkal megyünk végig a magasságon (külső), szélességen (belső) és kiszámítjuk a csomópontokhoz tartozó komplex számot. 
            A while ciklusban az iterációkat számoljuk, míg az iteráció nem éri el a határt.
            Ha viszont elérte, akkor a c komplex számra az iteráció konvergens, tehát a szám a Mandelbrot-halmaz eleme.
            <programlisting language="C++"><![CDATA[
$ more mandel.cpp
#include <iostream>
#include "png++/png.hpp"

int main (int argc, char *argv[])
{
    if (argc != 2) {
        std::cout << "Hasznalat: ./mandel fajlnev";
        return -1;
    }

    double a = -2.0, b = .7,  c = -1.35, d = 1.35;
    int szelesseg = 600, magassag = 600, iteraciosHatar = 1000;

    png::image <png::rgb_pixel> kep (szelesseg, magassag);

    double dx = (b-a)/szelesseg;
    double dy = (d-c)/magassag;
    double reC, imC, reZ, imZ, ujreZ, ujimZ;
    int iteracio = 0;
    std::cout << "Szamitas";
    for (int j=0; j<magassag; ++j) {

        for (int k=0; k<szelesseg; ++k) {

            reC = a+k*dx;
            imC = d-j*dy;

            reZ = 0;
            imZ = 0;
            iteracio = 0;
            while (reZ*reZ + imZ*imZ < 4 && iteracio < iteraciosHatar) {

                ujreZ = reZ*reZ - imZ*imZ + reC;
                ujimZ = 2*reZ*imZ + imC;
                reZ = ujreZ;
                imZ = ujimZ;

                ++iteracio;

            }

            kep.set_pixel(k, j, png::rgb_pixel(255-iteracio%256,
                                               255-iteracio%256, 255-iteracio%256));
        }
        std::cout << "." << std::flush;
    }

    kep.write (argv[1]);
    std::cout << argv[1] << " mentve" << std::endl;
}]]>
            </programlisting>
    Ahogy látjuk, a <filename>mandel.cpp</filename> sikeres fordításához és futtatásához szükségünk lesz a libpng, libpng++ könyvtárakra és a <filename>png++/png.hpp</filename> header filera.
A könyvtárakat a sudo parancs segítségével tudjuk telepíteni, viszont a headerhez le kell töltenünk a png++ hivatalos oldaláról a becsomagolt telepítő állományokat: <link xlink:href="http://download.savannah.nongnu.org/releases/pngpp/png++-0.2.9.tar.gz">png++-0.2.9.tar.gz</link>
<programlisting><![CDATA[
//A terminálba leadott parancsok:
$ sudo apt-get install libpng-dev
$ sudo apt-get install libpng++-dev
$ tar -zxf png++-0.2.9.tar.gz -C ~/Letöltések
$ cd ~/Letöltések/png++-0.2.9
$ make]]>
</programlisting>
Ha minden jól megy, mostmár tudjuk fordítani és futtatni a png elkészítéséhez szükséges programot.
<programlisting><![CDATA[
$ g++ mandel.cpp `libpng-config --ldflags` -o mandel
$ ./mandel mandel.png
Szamitas......................................mandel.png mentve]]>
</programlisting>
<mediaobject>
            <imageobject>
            <imagedata fileref="img/mandel.png" format="PNG" scale="50"/>
            </imageobject>
        </mediaobject>
        </para>
    </section>        
        
    <section>
        <title>A Mandelbrot-halmaz a <filename>std::complex</filename> osztállyal</title>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Mandelbrot/Complex">https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Mandelbrot/Complex</link>                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...:
            </para>
            <para>Tutor: <link xlink:href="https://github.com/p-adrian05/BHAX">Petraskó Adrián</link></para>
            <para>
Az első feladatban a komplex számokat még két változóban tároltuk (külön a valós, külön a képzetes részét), viszont az std::complex osztály lehetővé teszi, hogy egy változó is elegendő legyen a tároláshoz.
Megadjuk ismét a kép szélességét, magasságát, iterációs határt, a számítás adatait, majd beolvassuk a kapott adatokat.
</para>
<para>
A program sikeres futtatása érdekében írunk egy használati útmutatót a szükséges argumentumokról.
A háló sorain és oszlopain for ciklussal megyünk végig. 
A while ciklussal megvizsgáljuk, hogy mennyire távolodik el a z_n a koordinátarendszer középpontjától.
Ha a távolság nagyobb mint 2, akkor a vizsgált c pontban az iteráció nem sűrűsödik be az origóhoz közeli valamelyik pontban.
Ha az iterációs határ elérése miatt lépünk ki a while ciklusból, akkor ebben a pontban az iteráció konvergens és feketére szinezzük, a Mandelbrot-halmaz elemének tekintjük. 
<programlisting language="C++"><![CDATA[
$ more complex.cpp
#include <iostream>
#include "png++/png.hpp"
#include <complex>

int
main ( int argc, char *argv[] )
{
  int szelesseg = 1920;
  int magassag = 1080;
  int iteraciosHatar = 255;
  double a = -1.9;
  double b = 0.7;
  double c = -1.3;
  double d = 1.3;
  if ( argc == 9 )
    {
      szelesseg = atoi ( argv[2] );
      magassag =  atoi ( argv[3] );
      iteraciosHatar =  atoi ( argv[4] );
      a = atof ( argv[5] );
      b = atof ( argv[6] );
      c = atof ( argv[7] );
      d = atof ( argv[8] );
    }
  else
    {
      std::cout << "Hasznalat: ./complex fajlnev szelesseg magassag n a b c d" << std::endl;
      return -1;
    }
  png::image < png::rgb_pixel > kep ( szelesseg, magassag );
  double dx = ( b - a ) / szelesseg;
  double dy = ( d - c ) / magassag;
  double reC, imC, reZ, imZ;
  int iteracio = 0;
  std::cout << "Szamitas\n";

  for ( int j = 0; j < magassag; ++j )
    {

      for ( int k = 0; k < szelesseg; ++k )
        {

          reC = a + k * dx;
          imC = d - j * dy;
          std::complex<double> c ( reC, imC );
          std::complex<double> z_n ( 0, 0 );
          iteracio = 0;
          while ( std::abs ( z_n ) < 4 && iteracio < iteraciosHatar )
            {
              z_n = z_n * z_n + c;
              ++iteracio;
            }
          kep.set_pixel ( k, j,
                          png::rgb_pixel ( iteracio%255, (iteracio*iteracio)%255, 0 ) );
        }
      int szazalek = ( double ) j / ( double ) magassag * 100.0;
      std::cout << "\r" << szazalek << "%" << std::flush;
    }
  kep.write ( argv[1] );
  std::cout << "\r" << argv[1] << " mentve." << std::endl;
}]]>
</programlisting>
A fordításhoz ismét a png könyvtárat használjuk, de a futtatáshoz ezúttal a számítás adatait is meg kell adnunk.
<programlisting><![CDATA[
$ g++ complex.cpp -lpng -O3 -o complex
$ ./complex complex.png 1920 1080 1020 0.4127655418209589255340574709407519549131 0.4127655418245818053080142817634623497725 0.2135387051768746491386963270997512154281 0.2135387051804975289126531379224616102874
Szamitas
complex.png mentve]]>
</programlisting>
<mediaobject>
            <imageobject>
                <imagedata fileref="img/complex.png" scale="25"/>
            </imageobject>
        </mediaobject>
        <programlisting><![CDATA[
$ g++ complex.cpp -lpng -O3 -o complex
$ ./complex complex2.png 1920 1080 2040 -0.01947381057309366392260585598705802112818 -0.0194738105725413418456426484226540196687 0.7985057569338268601555341774655971676111 0.79850575693437919611028519284445792436
Szamitas
complex2.png mentve]]>
</programlisting>
        
        <mediaobject>
            <imageobject>
                <imagedata fileref="img/complex2.png" scale="25"/>
            </imageobject>
        </mediaobject>
              
        </para>
    </section>        
                
    <section>
        <title>Biomorfok</title>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/IJMbgRzY76E">https://youtu.be/IJMbgRzY76E</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Mandelbrot/Biomorf">https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Mandelbrot/Biomorf</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...:
            </para>
            <para>
            Clifford Pickover amerikai író-kutató nevéhez köthető a biomorfok felfedezése.
Maga a kifejezés a görög bios (élet) és morphe (ötvözni) szavakból ered, a jelenség pedig a Júlia-halmaz tanulmányozása során bukkant fel az egyik bugos programjában.
Pickoverről és a biomorfokról bővebben olvashatunk a következő tanulmányban:  <link xlink:href="https://www.emis.de/journals/TJNSA/includes/files/articles/Vol9_Iss5_2305--2315_Biomorphs_via_modified_iterations.pdf">Biomorphs via modified iterations</link>.
</para>
<para>
Az előző feladatokban tárgyalt Mandelbrot-halmaz tartalmazza az összes Júlia-halmazt.
A Júlia-halmaz esetén a c konstans, és a rácsot z-vel járjuk be, viszont a Mandelbrot-halmazban a c változóként szerepel, melyhez kiszámoljuk a z értékeket.
</para>
<para>
Pickover bugos programja alapján készítjük el tehát az előző feladatok Mandelbrot-halmazkészítő kódjainak módosított változatát.
<programlisting><![CDATA[
//A cikkben található kódrészlet, melyet a programunkban is hasznosítunk:
1 for x = xmin to xmax by s do
2   for y = ymin to ymax by s do
3       z = x + yi
4       ic = 0
5       for i = 1 to K do
6           z = f(z) + c
7           if |z| > R then
8               ic = i
9               break
10      PrintDotAt(x, y) with color ic]]>
</programlisting>
A c értékét a terminálban fogjuk meghatározni, a cikk alapján a valós rész 0.285, az imaginárius pedig 0 lesz.
A z komplex számnak a valós és imaginárius részének kiszámítása után előállítjuk az aktuális rácsponthoz tartozó számot. 
Pickover programja miatt a while loopot átírjuk for ciklusra, és a bugos sorát felhasználva vizsgáljuk meg z-nek a valós és imaginárius részét, ha az egyik rész nagyobb, mint az R.
Amennyiben ismét a megfelelő számú argumentumot adjuk meg, sikeres lesz a futtatás. 
<programlisting language="C++"><![CDATA[
$ more biomorf.cpp
#include <iostream>
#include "png++/png.hpp"
#include <complex>

int
main ( int argc, char *argv[] )
{

    int szelesseg = 1920;
    int magassag = 1080;
    int iteraciosHatar = 255;
    double xmin = -1.9;
    double xmax = 0.7;
    double ymin = -1.3;
    double ymax = 1.3;
    double reC = .285, imC = 0;
    double R = 10.0;

    if ( argc == 12 )
    {
        szelesseg = atoi ( argv[2] );
        magassag =  atoi ( argv[3] );
        iteraciosHatar =  atoi ( argv[4] );
        xmin = atof ( argv[5] );
        xmax = atof ( argv[6] );
        ymin = atof ( argv[7] );
        ymax = atof ( argv[8] );
        reC = atof ( argv[9] );
        imC = atof ( argv[10] );
        R = atof ( argv[11] );

    }
    else
    {
        std::cout << "Hasznalat: ./biomorf fajlnev szelesseg magassag n a b c d reC imC R" << std::endl;
        return -1;
    }

    png::image < png::rgb_pixel > kep ( szelesseg, magassag );

    double dx = ( xmax - xmin ) / szelesseg;
    double dy = ( ymax - ymin ) / magassag;

    std::complex<double> cc ( reC, imC );

    std::cout << "Szamitas\n";

    for ( int y = 0; y < magassag; ++y )
    {

        for ( int x = 0; x < szelesseg; ++x )
        {

            double reZ = xmin + x * dx;
            double imZ = ymax - y * dy;
            std::complex<double> z_n ( reZ, imZ );

            int iteracio = 0;
            for (int i=0; i < iteraciosHatar; ++i)
            {

                z_n = std::pow(z_n, 3) + cc;
                if(std::real ( z_n ) > R || std::imag ( z_n ) > R)
                {
                    iteracio = i;
                    break;
                }
            }

            kep.set_pixel ( x, y,
                            png::rgb_pixel ( (iteracio*20)%255, (iteracio*40)%255, (iteracio*60)%255 ));
        }

        int szazalek = ( double ) y / ( double ) magassag * 100.0;
        std::cout << "\r" << szazalek << "%" << std::flush;
    }

    kep.write ( argv[1] );
    std::cout << "\r" << argv[1] << " mentve." << std::endl;

}]]>
</programlisting>
A helyes fordításhoz szükségünk lesz a korábban telepített png könyvtárra, illetve a sebesség növelése érdekében a 3. szintű optimalizációt is bekapcsoljuk.
A futtatáshoz a globális változókat is meg kell adnunk.
<programlisting><![CDATA[
$ g++ biomorf.cpp -lpng -O3 -o biomorf
$ ./biomorf biomorf.png 800 800 10 -2 2 -2 2 .285 0 10
Szamitas
biomorf.png mentve]]>
</programlisting>
<mediaobject>
            <imageobject>
                <imagedata fileref="img/biomorf.png" scale="50"/>
            </imageobject>
        </mediaobject>  
        </para>                        
    </section>                     

    <section>
        <title>A Mandelbrot-halmaz CUDA megvalósítása</title>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Mandelbrot/CUDA">https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Mandelbrot/CUDA</link>                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...:
            </para>
            <para>
            A CUDA az NVIDIA által kifejlesztett rendszerfejlesztői készlet (SDK), melyet GPGPU-képességek (General Purpose GPU) kiaknázására hozott létre.
            Azzal, hogy a GPU-t, tehát a grafikai számítóegységet használjuk az összetett grafikai műveletek számítására, a CPU más műveleteket tud közben elvégezni.
            </para>
            <para>
            A CUDA hasznosságát úgy bizonyítjuk, hogy összehasonlítjuk az új kódot az első feladatban használt C++ programunkkal.
            Az underline-t tartalmazó függvénynévvel ellátott függvényekben fogjuk azokat a parancsokat megírni, amelyekkel a GPU foglalkozik.
            Egy 600x600 darab blokkból álló gridet hozunk létre, mindegyik blokkhoz tartozni fog egy szál, a program futását párhuzamosítjuk.
            Az <![CDATA[<<<a, b>>>]]> kifejezésben lévő 2 érték közül az <function>a</function> jelöli, hogy hány blokkot akarunk létrehozni, a <function>b</function> pedig a blokkokhoz tatrtozó szálak számát. 
            Előbbi 3600, utóbbi 100 lesz.
            Ha a függvény lefutott, akkor átmásoljuk az értékeket az argumentumként megadott tömbbe, és felszabadítjuk a lefoglalt területet.
            </para>
            <para>
            A <filename>notcuda.cpp</filename> fordításához és futtatásához szükséges paramétereket már az első feladatban megírtam, a <filename>cuda.cu</filename> esetében azonban több változást is tapasztalhatunk.
            A CUDA Toolkit telepítése nélkül nem fog lefordulni a kód, tehát a 'sudo apt install nvidia-cuda-toolkit' parancs segítségével le kell szednünk a telepítőfájlokat.
            Ha ez megvan, akkor az 'nvcc -version' parancs segítségével tudjuk ellenőrizni, hogy működőképes-e a toolkit.
            <programlisting language="C++"><![CDATA[
$ more cuda.cu
#include <png++/image.hpp>
#include <png++/rgb_pixel.hpp>

#include <sys/times.h>
#include <iostream>

#define MERET 600
#define ITER_HAT 32000

__device__ int
mandel (int k, int j)
{
  float a = -2.0, b = .7, c = -1.35, d = 1.35;
  int szelesseg = MERET, magassag = MERET, iteraciosHatar = ITER_HAT;

  float dx = (b - a) / szelesseg;
  float dy = (d - c) / magassag;
  float reC, imC, reZ, imZ, ujreZ, ujimZ;
  
  int iteracio = 0;

  reC = a + k * dx;
  imC = d - j * dy;
 
  reZ = 0.0;
  imZ = 0.0;
  iteracio = 0;

  while (reZ * reZ + imZ * imZ < 4 && iteracio < iteraciosHatar)
    {

      ujreZ = reZ * reZ - imZ * imZ + reC;
      ujimZ = 2 * reZ * imZ + imC;
      reZ = ujreZ;
      imZ = ujimZ;

      ++iteracio;

    }
  return iteracio;
}

/*
__global__ void
mandelkernel (int *kepadat)
{

  int j = blockIdx.x;
  int k = blockIdx.y;

  kepadat[j + k * MERET] = mandel (j, k);

}
*/

__global__ void
mandelkernel (int *kepadat)
{

  int tj = threadIdx.x;
  int tk = threadIdx.y;

  int j = blockIdx.x * 10 + tj;
  int k = blockIdx.y * 10 + tk;

  kepadat[j + k * MERET] = mandel (j, k);

}

void
cudamandel (int kepadat[MERET][MERET])
{

  int *device_kepadat;
  cudaMalloc ((void **) &device_kepadat, MERET * MERET * sizeof (int));
  
  dim3 grid (MERET / 10, MERET / 10);
  dim3 tgrid (10, 10);
  mandelkernel <<< grid, tgrid >>> (device_kepadat);  
  
  cudaMemcpy (kepadat, device_kepadat,
	      MERET * MERET * sizeof (int), cudaMemcpyDeviceToHost);
  cudaFree (device_kepadat);

}

int
main (int argc, char *argv[])
{

  clock_t delta = clock ();
  struct tms tmsbuf1, tmsbuf2;
  times (&tmsbuf1);

  if (argc != 2)
    {
      std::cout << "Hasznalat: ./mandelpngc fajlnev";
      return -1;
    }

  int kepadat[MERET][MERET];

  cudamandel (kepadat);

  png::image < png::rgb_pixel > kep (MERET, MERET);

  for (int j = 0; j < MERET; ++j)
    {
      //sor = j;
      for (int k = 0; k < MERET; ++k)
	{
	  kep.set_pixel (k, j,
			 png::rgb_pixel (255 -
					 (255 * kepadat[j][k]) / ITER_HAT,
					 255 -
					 (255 * kepadat[j][k]) / ITER_HAT,
					 255 -
					 (255 * kepadat[j][k]) / ITER_HAT));
	}
    }
  kep.write (argv[1]);

  std::cout << argv[1] << " mentve" << std::endl;

  times (&tmsbuf2);
  std::cout << tmsbuf2.tms_utime - tmsbuf1.tms_utime
    + tmsbuf2.tms_stime - tmsbuf1.tms_stime << std::endl;

  delta = clock () - delta;
  std::cout << (float) delta / CLOCKS_PER_SEC << " sec" << std::endl;

}]]>
            </programlisting>
            Amennyiben NVIDIA CUDA-kártyánk van, úgy a következő parancsok segítségével nemcsak az első feladat kódját, de az új kódot is tudjuk fordítani és futtatni:
<programlisting><![CDATA[
$ g++ notcuda.cpp -o -lpng16 -O3 notcuda
$ ./notcuda t.png
1111
11.1227 sec
t.png mentve
$ nvcc cuda.cu -lpng16 -O3 -o cuda
$ ./cuda t2.png
13
0.145409 sec
t2.png mentve]]>
</programlisting>
Jól látható, hogy az új program sokkal gyorsabban dolgozik, köszönhetően a CUDA platformnak.
        </para>
    </section>                     

    <section>
        <title>Mandelbrot nagyító és utazó C++ nyelven</title>
        <para>
            Építs GUI-t a Mandelbrot algoritmusra, lehessen egérrel nagyítani egy területet, illetve egy pontot
            egérrel kiválasztva vizualizálja onnan a komplex iteráció bejárta z<subscript>n</subscript> komplex számokat!
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Mandelbrot/Nagyito_C++">https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Mandelbrot/Nagyito_C++</link>
        </para>
        <para>Tanulságok, tapasztalatok, magyarázat...:
        </para>
        <para>Tutor: <link xlink:href="https://gitlab.com/cant0r/bhax">Racs Tamás</link></para>
        <para>
Az előző programokban tapasztaltak alapján dolgozzuk ki ezt a feladatot.
Ismételten egy Mandelbrot-halmazt kell készíteni, azonban a mostani program lehetővé teszi azt is, hogy ki tudjunk nagyítani területeket, és azokat részletesen meg tudjuk vizsgálni külön ábrában.
</para>
<para>
A <filename>main.cpp</filename> fájlban hozzuk létre a GUI alkalmazást. Elkészül a fő űrlap is, amelyet a <function>show()</function> függvény segítségével láthatóvá teszünk.
<programlisting language="C++"><![CDATA[
$ more main.cpp
#include <QtGui/QApplication>
#include "frakablak.h"

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);

    FrakAblak w1,
    w2(-.08292191725019529, -.082921917244591272,
       -.9662079988595939, -.9662079988551173, 600, 3000),
    w3(-.08292191724880625, -.0829219172470933,
       -.9662079988581493, -.9662079988563615, 600, 4000),
    w4(.14388310361318304, .14388310362702217,
       .6523089200729396, .6523089200854384, 600, 38655);
    w1.show();
    w2.show();
    w3.show();
    w4.show();

    return a.exec();
}]]>
</programlisting>
</para>
<para>
    A <filename>frakablak.cpp</filename> konstruktorában beállítjuk a Mandelbrot-halmaz tartományának intervallumait, illetve azt, hogy az ablak ne legyen újraméretezhető. 
    Az ablak értelemszerűen a "Mandelbrot-halmaz" címet kapja.
    A Mandelbrotos számításokat külön szálon végezzük. Az első eventben (paintEvent) újrarajzoljuk a fraktal képet, 
    ha pedig nem zajlik számítás, akkor fehér, a felhasználó által rajzolt négyzetet jelenítünk meg a képernyőn, mely a kijelölésről vizuális információt ad vissza.
    Ha a felhasználó lenyomja a jobb egérgombot, akkor a számítás során érintett komplex számokat összekötjük egy egyenessel (mousePressEvent).
    <programlisting language="C++"><![CDATA[
$ more frakablak.cpp
#include "frakablak.h"

FrakAblak::FrakAblak(double a, double b, double c, double d,
                     int szelesseg, int iteraciosHatar, QWidget *parent)
                         : QMainWindow(parent)
{
    setWindowTitle("Mandelbrot halmaz");

    int magassag = (int)(szelesseg * ((d-c)/(b-a)));

    setFixedSize(QSize(szelesseg, magassag));
    fraktal= new QImage(szelesseg, magassag, QImage::Format_RGB32);

    mandelbrot = new FrakSzal(a, b, c, d, szelesseg, magassag, iteraciosHatar, this);
    mandelbrot->start();

}

FrakAblak::~FrakAblak()
{
    delete fraktal;
    delete mandelbrot;
}

void FrakAblak::paintEvent(QPaintEvent*) {
    QPainter qpainter(this);
    qpainter.drawImage(0, 0, *fraktal);
    if(!szamitasFut) {
        qpainter.setPen(QPen(Qt::white, 1));
        qpainter.drawRect(x, y, mx, my);
        if(!zX.empty())
        {
            for(int i=0; i<zX.size(); i++)
            {
                qpainter.drawLine(zX[i],zY[i],zX2[i],zY2[i]);
            }
 
        }
 
    }
    qpainter.end();
}
 
void FrakAblak::mousePressEvent(QMouseEvent* event) {
 
    if(event->button() == Qt::LeftButton)
    {
    x = event->x();
    y = event->y();
    mx = 0;
    my = 0;
    }
    else if(event->button() == Qt::RightButton)
    {
               double dx = (b-a)/szelesseg;
               double dy = (d-c)/magassag;
               double reC, imC, reZ, imZ, ujreZ, ujimZ;
 
               int iteracio = 0;
 
               reC = a+event->x()*dx;
               imC = d-event->y()*dy;
 
               reZ = 0;
               imZ = 0;
               iteracio = 0;
 
               while(reZ*reZ + imZ*imZ < 4 && iteracio < 255) {
                   ujreZ = reZ*reZ - imZ*imZ + reC;
                   ujimZ = 2*reZ*imZ + imC;
                   zX.push_back((int)((reZ - a)/dx));
                   zY.push_back( (int)((d - imZ)/dy));
                   zX2.push_back((int)((ujreZ - a)/dx));
                   zY2.push_back((int)((d - ujimZ)/dy));
                   reZ = ujreZ;
                   imZ = ujimZ;
 
                   ++iteracio;
    }
    }
    update();
}]]>
    </programlisting>
</para>
<para>
    A <filename>frakszal.cpp</filename>-ben a Mandelbrot-számítás elvégzése a main threadtől külön szálon történik, méghozzá a <function>run()</function> függvényben.
    Értesítjük az argumentumként átadott FrakAblak példányát, hogy kész vagyunk a számítással, frissítse az ablak tartalmát. 
    Mi is közvetlenül frissítjük a privát tagváltozóját, a fraktal-t, soroként beleírjuk számításaink eredményét.
    <programlisting language="C++"><![CDATA[
$ more frakszal.cpp
#include "frakszal.h"

FrakSzal::FrakSzal(double a, double b, double c, double d,
                   int szelesseg, int magassag, int iteraciosHatar, FrakAblak *frakAblak)
{
    this->a = a;
    this->b = b;
    this->c = c;
    this->d = d;
    this->szelesseg = szelesseg;
    this->iteraciosHatar = iteraciosHatar;
    this->frakAblak = frakAblak;
    this->magassag = magassag;

    egySor = new int[szelesseg];
}

FrakSzal::~FrakSzal()
{
    delete[] egySor;
}

void FrakSzal::run()
{
    double dx = (b-a)/szelesseg;
    double dy = (d-c)/magassag;
    double reC, imC, reZ, imZ, ujreZ, ujimZ;

    int iteracio = 0;

    for(int j=0; j<magassag; ++j) {

        for(int k=0; k<szelesseg; ++k) {

            reC = a+k*dx;
            imC = d-j*dy;

            reZ = 0;
            imZ = 0;
            iteracio = 0;

            while(reZ*reZ + imZ*imZ < 4 && iteracio < iteraciosHatar) {

                ujreZ = reZ*reZ - imZ*imZ + reC;
                ujimZ = 2*reZ*imZ + imC;
                reZ = ujreZ;
                imZ = ujimZ;

                ++iteracio;

            }

            iteracio %= 256;

            egySor[k] = iteracio;
        }

        frakAblak->vissza(j, egySor, szelesseg);
    }
}]]>
    </programlisting>
</para>
<para>
A program fordításához és futtatásához szükségünk lesz mind az öt C++ környezetben megírt fájlra, melyeket azonos mappában kell elhelyeznünk.
Ahhoz, hogy tudjunk kezdeni a .cpp és .h fileokkal valamit, fel kell telepítenünk a libqt könyvtárat is.
A könyvtár telepítése után a 'qmake -project' commandot kell beírnunk a terminálba, mely a mappa nevéhez alkalmazkodva létrehoz és elnevez egy .pro kiterjesztésű fájlt.
</para>
<para>
Most, hogy létrejött a .pro fájl, el tudjuk készíteni a Makefile-t, amit a fordításhoz fogunk felhasználni.
A Makefile létrehozza a nagyító programunkat, melyet a szokásos parancs segítségével futtatunk.
<programlisting><![CDATA[
//A terminálban leadott parancsok:
$ sudo apt-get install libqt5-dev 
$ cd nagyitocpp/
$ ls
frakablak.cpp  frakablak.h  frakszal.cpp  frakszal.h  main.cpp
$ qmake -project
$ ls
frakablak.cpp  frakablak.h  frakszal.cpp  frakszal.h  main.cpp  nagyitocpp.pro
$ qmake nagyitocpp.pro
$ ls
frakablak.cpp  frakszal.cpp  main.cpp  nagyitocpp.pro
frakablak.h    frakszal.h    Makefile
$ make
$ ./nagyitocpp]]>
</programlisting>
<mediaobject>
            <imageobject>
            <imagedata fileref="img/nagyito1.PNG" format="PNG" scale="100"/>
            </imageobject>
        </mediaobject>
        <mediaobject>
            <imageobject>
            <imagedata fileref="img/nagyito2.PNG" format="PNG" scale="100"/>
            </imageobject>
        </mediaobject>
        <mediaobject>
            <imageobject>
            <imagedata fileref="img/nagyito3.PNG" format="PNG" scale="100"/>
            </imageobject>
        </mediaobject>
        <mediaobject>
            <imageobject>
            <imagedata fileref="img/nagyito4.PNG" format="PNG" scale="100"/>
            </imageobject>
        </mediaobject>
        </para>
    </section>                     
                                                                                                                                                                            
    <section>
        <title>Mandelbrot nagyító és utazó Java nyelven</title>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Mandelbrot/Nagyito_Java">https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Mandelbrot/Nagyito_Java</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...:
            </para>
            <para>Tutoriáltam: <link xlink:href="https://gitlab.com/cant0r/bhax">Racs Tamás</link></para>
            <para>
Az ötödik feladatban már kidolgoztuk C++ környezetben a nagyítót/utazót, ennek megfelelően kell átírnunk Java nyelvre a programot.
A források között megtalálható a Mandelbrot-halmaz Java környezetben történő kidolgozása, erre fog épülni a Java-nagyító is.
</para>
<para>
    A MandelbrotHalmazNagyító osztály privát változói közül az x és y a nagyítandó terület bal felső sarkát, az mx és my pedig a nagyítandó terület szélességét és magasságát tárolják.
    Az ősosztály konstruktorát a <function>super()</function> függvény hívja meg.
    A <function>setTitle</function> függvény segítségével megadjuk az ablak címét: "A Mandelbrot-halmaz nagyításai".
    A <function>mousePressed</function> függvényben lévő x és y az egérmutató pozícióját tárolja, az 1. egér gombbal pedig a nagyítandó terület kijelölését végezzük, amit if feltétel segítségével
    adunk meg.
    </para>
    <para>
    A pillanatfelvételek készítéséhez igénybe vesszük az Abstract Window Toolkit könyvtárat (java.awt).
    A fájl nevébe belevesszük, hogy melyik tartományban találtuk a halmazt, png formátumú képet mentünk.
    A <function>paint</function> függvényben történik a Mandelbrot-halmaz kirajzolása. Ha éppen fut a számítás, akkor egy vörös vonallal jelöljük, hogy melyik sorban tart.
    A kiinduló halmazt a komplex sík [-2.0, .7]x[-1.35, 1.35] tartományában keressük egy 600x600-as hálóval és az aktuális nagyítási pontossággal.
</para>
            <programlisting language="Java"><![CDATA[
$ more MandelbrotHalmazNagyító.java
public class MandelbrotHalmazNagyító extends MandelbrotHalmaz {
    private int x, y;
    private int mx, my;

    public MandelbrotHalmazNagyító(double a, double b, double c, double d,
            int szélesség, int iterációsHatár) {
        super(a, b, c, d, szélesség, iterációsHatár);
        setTitle("A Mandelbrot halmaz nagyításai");
        addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent m) {
                x = m.getX();
                y = m.getY();
                if(m.getButton() == java.awt.event.MouseEvent.BUTTON1 ) {
                    mx = 0;
                    my = 0;
                    repaint();
                } else {
                    MandelbrotIterációk iterációk =
                            new MandelbrotIterációk(
                            MandelbrotHalmazNagyító.this, 50);
                    new Thread(iterációk).start();
                }
            }

            public void mouseReleased(java.awt.event.MouseEvent m) {
                if(m.getButton() == java.awt.event.MouseEvent.BUTTON1 ) {
                    double dx = (MandelbrotHalmazNagyító.this.b
                            - MandelbrotHalmazNagyító.this.a)
                            /MandelbrotHalmazNagyító.this.szélesség;
                    double dy = (MandelbrotHalmazNagyító.this.d
                            - MandelbrotHalmazNagyító.this.c)
                            /MandelbrotHalmazNagyító.this.magasság;
                    new MandelbrotHalmazNagyító(
                            MandelbrotHalmazNagyító.this.a+x*dx,
                            MandelbrotHalmazNagyító.this.a+x*dx+mx*dx,
                            MandelbrotHalmazNagyító.this.d-y*dy-my*dy,
                            MandelbrotHalmazNagyító.this.d-y*dy,
                            600,
                            MandelbrotHalmazNagyító.this.iterációsHatár);
                }
            }
        });

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent m) {
                mx = m.getX() - x;
                my = m.getY() - y;
                repaint();
            }
        });
    }

    public void pillanatfelvétel() {
        java.awt.image.BufferedImage mentKép =
                new java.awt.image.BufferedImage(szélesség, magasság,
                java.awt.image.BufferedImage.TYPE_INT_RGB);
        java.awt.Graphics g = mentKép.getGraphics();
        g.drawImage(kép, 0, 0, this);
        g.setColor(java.awt.Color.BLACK);
        g.drawString("a=" + a, 10, 15);
        g.drawString("b=" + b, 10, 30);
        g.drawString("c=" + c, 10, 45);
        g.drawString("d=" + d, 10, 60);
        g.drawString("n=" + iterációsHatár, 10, 75);
        if(számításFut) {
            g.setColor(java.awt.Color.RED);
            g.drawLine(0, sor, getWidth(), sor);
        }
        g.setColor(java.awt.Color.GREEN);
        g.drawRect(x, y, mx, my);
        g.dispose();
        StringBuffer sb = new StringBuffer();
        sb = sb.delete(0, sb.length());
        sb.append("MandelbrotHalmazNagyitas_");
        sb.append(++pillanatfelvételSzámláló);
        sb.append("_");
        sb.append(a);
        sb.append("_");
        sb.append(b);
        sb.append("_");
        sb.append(c);
        sb.append("_");
        sb.append(d);
        sb.append(".png");

        try {
            javax.imageio.ImageIO.write(mentKép, "png",
                    new java.io.File(sb.toString()));
        } catch(java.io.IOException e) {
            e.printStackTrace();
        }
    }

    public void paint(java.awt.Graphics g) {

        g.drawImage(kép, 0, 0, this);
        if(számításFut) {
            g.setColor(java.awt.Color.RED);
            g.drawLine(0, sor, getWidth(), sor);
        }

        g.setColor(java.awt.Color.GREEN);
        g.drawRect(x, y, mx, my);
    }
  
    public int getX() {
        return x;
    }

    public int getY() {
        return y;
    }

    public static void main(String[] args) {
        new MandelbrotHalmazNagyító(-2.0, .7, -1.35, 1.35, 600, 255);
    }
}]]>
            </programlisting>
       <para>
A fordításhoz és futtatáshoz elég a <filename>MandelbrotHalmazNagyító.java</filename> fájlt leszedni, majd a Java EXOR-titkosítónknál is használt parancsokat beírni a terminálba.
Ezután jól látható a Mandelbrot-halmaz, amit ezúttal már nagyítani is tudunk, a kinagyított részeket pedig új ablakban tudjuk vizsgálni.
                    <mediaobject>
            <imageobject>
            <imagedata fileref="img/nagyitojava.PNG" format="PNG" scale="70"/>
            </imageobject>
        </mediaobject>
        </para>
    </section>

</chapter>                
