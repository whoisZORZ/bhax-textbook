<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Turing!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Végtelen ciklus</title>
        <para>
            Írj olyan C végtelen ciklusokat, amelyek 0 illetve 100 százalékban dolgoztatnak egy magot és egy olyat, amely  
            100 százalékban minden magot!
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Turing/Vegtelen">https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Turing/Vegtelen</link>                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...:
        </para>
        
        <para>Végtelen ciklust úgy idézhetünk elő, ha olyan feltételt adunk, mely sosem következhet be. A való életben is találkozhatunk olyan ciklusokkal, amelyek (elméletileg) soha nem állnak meg: ilyen pl. az évszakok folyamatos váltakozása.
        </para>
<para>A <filename>vegtelen1.c</filename> kódja 100%-ban dolgoztat egy magot. Ez a megoldás jól ismert példája a végtelen ciklusoknak, szerepel a Kernigan-Ritchie C-könyvben is, mely alapműnek számít a programozásban.

<programlisting language="c"><![CDATA[
int main ()
{
  for (;;);

  return 0;
}]]>
</programlisting>
<mediaobject>
            <imageobject>
            <imagedata fileref="img/vegtelen1.PNG" format="PNG" scale="100"/>
            </imageobject>
        </mediaobject>

A <filename>vegtelen2.c</filename> kódja abban különbözik az elsőtől, hogy megjelenik a <function>sleep</function> függvény. Ezzel tehát a megoldás figyelembe veszi a 'man 3 sleep' kézikönyvlapban foglaltakat, a program pedig nyugovóra tér és elérjük a közel 0%-os magkihasználtságot.

<programlisting language="c"><![CDATA[
#include <unistd.h>
int main ()
{
  for (;;)
    sleep (1);

  return 0;
}]]>
</programlisting>
<mediaobject>
            <imageobject>
            <imagedata fileref="img/vegtelen2.PNG" format="PNG" scale="100"/>
            </imageobject>
        </mediaobject>

A <filename>vegtelen3.c</filename> kódjában 4 maggal dolgozunk. Amennyiben a munkagép is 4 magos, nincs szükség változtatásra, írhatjuk is a 'gcc vegtelen3.c -o vegtelen3 -lm' parancsot a terminálba a futtatáshoz.
Ezt a változatot <link xlink:href="https://gitlab.com/cant0r">Racs Tamás</link> megoldása ihlette, amit az UDPROG Facebook-csoportban láttam. 
<programlisting language="c"><![CDATA[
#include <unistd.h>
#include <sys/types.h>
int main()
{
    int p1, p2, p3;
    
    if(!(p1 = fork()))
    {
        for(;;);
    }
    if(!(p2 = fork()))
    {
        for(;;);
    }
    if(!(p3 = fork()))
    {
        for(;;);
    }

    for(;;);
    
    return 0;
}]]>
</programlisting>
<mediaobject>
            <imageobject>
            <imagedata fileref="img/vegtelen3.PNG" format="PNG" scale="100"/>
            </imageobject>
        </mediaobject>

A <filename>vegtelen4.c</filename> program szintén 100%-ban dolgoztat minden magot, ezúttal OpenMP használatával. Ehhez az omp.h header filet is inkludálnunk kell.
<programlisting language="c"><![CDATA[
#include <stdio.h>
#include <omp.h>

int main(void)
{
	#pragma omp parallel 
	{
		
		for(;;)
		{

		}
	}
	return 0;
}]]>
</programlisting>
<mediaobject>
            <imageobject>
            <imagedata fileref="img/vegtelen4.PNG" format="PNG" scale="100"/>
            </imageobject>
        </mediaobject>

        </para>            
    </section>        
        
    <section>
        <title>Lefagyott, nem fagyott, akkor most mi van?</title>
        <para>
            Mutasd meg, hogy nem lehet olyan programot írni, amely bármely más programról eldönti, hogy le fog-e fagyni vagy sem!
        </para>
        <para>
            Megoldás forrása: tegyük fel, hogy akkora haxorok vagyunk, hogy meg tudjuk írni a <function>Lefagy</function>
            függvényt, amely tetszőleges programról el tudja dönteni, hogy van-e benne végtelen ciklus:              
        </para>
        <programlisting language="c"><![CDATA[Program T100
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	main(Input Q)
	{
		Lefagy(Q)
	}
}]]></programlisting>            
        <para>
            A program futtatása, például akár az előző <filename>v.c</filename> ilyen pszeudókódjára:
            <screen><![CDATA[T100(t.c.pseudo)
true]]></screen>            
            akár önmagára
            <screen><![CDATA[T100(T100)
false]]></screen>  
            ezt a kimenetet adja.          
        </para>
        <para>
            A T100-as programot felhasználva készítsük most el az alábbi T1000-set, amelyben a
            Lefagy-ra épülő Lefagy2 már nem tartalmaz feltételezett, csak konkrét kódot:
        </para>
        <programlisting language="c"><![CDATA[Program T1000
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	boolean Lefagy2(Program P)
	{
		 if(Lefagy(P))
			return true;
		 else
			for(;;); 
	}

	main(Input Q)
	{
		Lefagy2(Q)
	}

}]]></programlisting>            
        <para>
            Mit fog kiírni erre a <computeroutput>T1000(T1000)</computeroutput> futtatásra?
                                
            <itemizedlist>
                <listitem>
                    <para>Ha T1000 lefagyó, akkor nem fog lefagyni, kiírja, hogy true</para>                        
                </listitem>
                <listitem>
                    <para>Ha T1000 nem fagyó, akkor pedig le fog fagyni...</para>                        
                </listitem>
            </itemizedlist>
            akkor most hogy fog működni? Sehogy, mert ilyen <function>Lefagy</function>
            függvény, azaz a T100 program nem is létezik.                
        </para>
        <para>Tanulságok, tapasztalatok, magyarázat...:
        </para>
        <para>
        Ez az egyetlen feladat a 'Helló, Turing!' feladatsorban, melynek nincs kézzel fogható megoldása, kizárólag elméleti szinten tudunk vele foglalkozni. 
        A <computeroutput>T100</computeroutput> programban szereplő <function>Lefagy</function> függvény egy tetszőleges programról képes elvileg megállapítani, hogy van-e benne végtelen ciklus (return true) vagy sem (return false).
        A <computeroutput>T1000</computeroutput> programban már megjelenik a függvény továbbfejlesztett változata is (<function>Lefagy2</function>).
        </para>
        <para>
        Tegyük fel, hogy a vizsgált programban van végtelen ciklus: a <function>Lefagy</function> true-t ad vissza, az erre épülő <function>Lefagy2</function> pedig szintén.
        Ha nincs végtelen ciklus a programban, akkor a <function>Lefagy</function> false-t ad vissza, az erre épülő <function>Lefagy2</function> pedig végtelen ciklust indít.
        A <computeroutput>T100</computeroutput> és <computeroutput>T1000</computeroutput> programok mögött álló gondolatmenet tehát ellentmondásos.
        </para>
    </section>        
                
    <section>
        <title>Változók értékének felcserélése</title>
        <para>
            Írj olyan C programot, amely felcseréli két változó értékét, bármiféle logikai utasítás vagy kifejezés
            használata nélkül!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk">https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Turing/Valtozocsere">https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Turing/Valtozocsere</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...:
        </para>
        <para>
            A feladat két változó értékének a felcserélése segédváltozó használata nélkül. Első lépésben tehát fel kell töltenünk a változóinkat tetszőleges értékekkel.
        </para>
        <para>
Kezdésnek b értékét újra meghatározzuk azzal, hogy b-ből kivonjuk a-t. Jelen esetben ez azt jelenti, hogy b új értéke -1 lesz.
Ezután a értékét kell újradefiniálnunk, hozzáadjuk b értékét. A mi példánkban a új értéke 1 lesz, tehát már megkapta b változó eredeti értékét.
Az a-b művelet azt eredményezi, hogy b pedig megkapja a változó eredeti értékét (1+1=2).
</para>
<para>
A változók értékét felcseréltük, kedvenc compilerünk segítségével mehet a program fordítása, majd futtatása.

<programlisting language="c"><![CDATA[
$ more valtozocsere.c
#include <stdio.h>
int main()
{
	int a = 2;
	int b = 1;
	
	b = b-a;
	a = a+b;
	b = a-b;
	
	printf("a es b ertekek: %d, %d.\n",a,b);
	return 0;
}
$ gcc valtozocsere.c -o valtozocsere
$ ./valtozocsere
a es b ertekek: 1, 2.]]>
</programlisting>
A változócsere megvalósítható egyébként egy logikai kifejezés, az EXOR (azaz kizáró vagy) segítségével is.
A művelet eredménye akkor hamis, ha mindkét állítás logikai értéke megegyezik.
</para>
<para>
Dolgozzunk ismét ugyanazokkal az értékekkel, de ezúttal kettes számrendszerben gondolkodva:
a értéke 1010, b értéke 0101 lesz.
A logikai kifejezés használatával a értéke 1111-re módosul, hiszen a számokat megvizsgálva láthatjuk, hogy a számjegyek egyik helyiértéken sem egyeznek, ezáltal a művelet eredménye sem lesz hamis.
Ismét EXOR-ozunk, és mivel a új értékét nézzük, ezért b módosul a eredeti értékére.
A harmadik EXOR-ra pedig már a is megkapja ezáltal b eredeti értékét.
A fordítás és futtatás ugyanúgy zajlik, mint az előző megoldásnál.

<programlisting language="c"><![CDATA[
$ more valtozocsere2.c
#include <stdio.h>

int main()
{
	int a = 2; //a = 1010
	int b = 1; //b = 0101
	
	a = a^b; //a = 1111
	b = a^b; //b = 1010
	a = a^b; //a = 0101
	
	printf("a es b ertekek: %d, %d.\n",a,b);
	return 0;
}
$ gcc valtozocsere2.c -o valtozocsere2
$ ./valtozocsere2
a es b ertekek: 1, 2.]]>
</programlisting>

        </para>
    </section>                     

    <section>
        <title>Labdapattogás</title>
        <para>
            Először if-ekkel, majd bármiféle logikai utasítás vagy kifejezés
            használata nélkül írj egy olyan programot, ami egy labdát pattogtat a karakteres konzolon! (Hogy mit értek
            pattogtatás alatt, alább láthatod a videókon.)
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/labdapattogas">https://bhaxor.blog.hu/2018/08/28/labdapattogas</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Turing/Labdapattogas">https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Turing/Labdapattogas</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...:
        </para>
        <para>
            Labdapattogást karakteres konzolon is tudunk szimulálni, a két forráskód C programnyelven íródott. 
            
            A megjelenítésben nagy szerepet játszanak a <function>usleep</function> és <function>clear</function> függvények, éppen ezért mindkét megoldásnál használjuk is ezeket.
        </para>
        <para>
            A <filename>unistd.h</filename> header file segítségével előhozható <function>usleep</function> függvény a paraméterként kapott értéket ezredmásodpercként értelmezi, így '50000' alá már nem érdemes menni. Alacsonyabb értékekkel is lefut a program, azonban vizuálisan kielégítőbb lesz a végeredmény.
        </para>
        <para>
            A <function>clear</function> függvény segítségével minden egyes elmozdulás után 'letörölhetjük' a képernyőt, így marad egyetlen labdaszerű karakter, mely folyamatosan változtatja helyzetét. 
            Gépeljük be a terminálba a szükséges fordítóparancsokat, majd illesszük a sor végére az '-lncurses' flaget, ugyanis enélkül valószínűleg sikertelen lesz a program fordítása.
        </para>
        <para>
            Az első megoldásban feltételvizsgálattal nézzük, hogy elérte-e már az egyik oldalt a labda. Ha igen, akkor változtatjuk a lépések irányát.
            <programlisting language="c"><![CDATA[
$ more labdapattogas1.c
#include <stdio.h>
#include <curses.h>
#include <unistd.h>

int main ( void )
{
    WINDOW *ablak;
    ablak = initscr ();

    int x = 0;
    int y = 0;

    int xnov = 1;
    int ynov = 1;

    int mx;
    int my;

    for ( ;; ) {

        getmaxyx ( ablak, my , mx );

        mvprintw ( y, x, "O" );

        refresh ();
        usleep ( 100000 );
        
        clear();

        x = x + xnov;
        y = y + ynov;

        if ( x>=mx-1 ) {
            xnov = xnov * -1;
        }
        if ( x<=0 ) {
            xnov = xnov * -1;
        }
        if ( y<=0 ) {
            ynov = ynov * -1;
        }
        if ( y>=my-1 ) {
            ynov = ynov * -1;
        }
    }
    return 0;
}
$ gcc labdapattogas1.c -o labdapattogas1 -lncurses
$ ./labdapattogas1]]>
        </programlisting>
        <mediaobject>
            <imageobject>
            <imagedata fileref="img/patt.PNG" format="PNG" scale="100"/>
            </imageobject>
        </mediaobject>
Mint említettem, if nélkül is meg lehet oldani a feladatot.
A <function>gotoxy</function> függvényben történik a kurzor pozicionálása, tehát a lefelé/jobbra tolás, illetve itt írjuk ki a labda ikonjának tekinthető kis 'o' betű.
A labda kezdeti pozícióját az x és y, a pálya méretét pedig ty (magasság) és tx változók tárolják.
Ezután egy for ciklusban meghatározzuk a pálya széleit.
Ezt követően egy végtelen for ciklusban történik meg a címsor és a pozíció kijelzése, hiszen a program addig fut, amíg Ctrl+C billentyűkombinációval le nem állítjuk a terminálon belül.

<programlisting language="c"><![CDATA[
$ more labdapattogas2.c
#include<stdio.h>
#include<stdlib.h>
#include<time.h>

static void gotoxy(int x, int y)
{
  int i;
  for(i=0; i<y; i++) printf("\n");
  for(i=0; i<x; i++) printf(" ");
  printf("o\n");

}

void usleep(int);
int main(void)
{
  
  int egyx=1;
  int egyy=-1;
  int i;
  int x=10;
  int y=20;
  int ty[23];
  int tx[80];

  for(i=0; i<23; i++)
       ty[i]=1;

  ty[1]=-1;
  ty[22]=-1;

  for(i=0; i<79; i++)
       tx[i]=1;

  tx[1]=-1;
  tx[79]=-1;

  for(;;)
  {
    for(i=0; i<36; i++)
       printf("_");

    printf("x=%2d", x);
    printf("y=%2d", y);

    for(i=0; i<=35; i++)
         printf("_");

    (void)gotoxy(x,y);
    
    x+=egyx;
    y+=egyy;

    egyx*=tx[x];
    egyy*=ty[y];

    usleep (200000);
    (void)system("clear");
  }
}
$ gcc labdapattogas2.c -o labdapattogas2
./labdapattogas2]]>
        </programlisting>
<mediaobject>
            <imageobject>
            <imagedata fileref="img/patt2.PNG" format="PNG" scale="100"/>
            </imageobject>
        </mediaobject>
        </para>
    </section>                     

    <section>
        <title>Szóhossz és a Linus Torvalds-féle BogoMIPS</title>
        <para>
            Írj egy programot, ami megnézi, hogy hány bites a szó a gépeden, azaz mekkora az <type>int</type> mérete.
            Használd ugyanazt a while ciklus fejet, amit Linus Torvalds a BogoMIPS rutinjában! 
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Turing/Szohossz">https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Turing/Szohossz</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...:
            </para>
            <para>
            A MIPS jelentése Million Instructions Per Second, ez a számítógép számítási sebességének a mértékegysége. A BogoMIPS pedig Linus Torvalds nevéhez köthető, csakúgy mint a Linux oprendszer fejlesztése.
A BogoMIPS lényegében egy C függvény, értéke következtetni enged a processzor sebességére, de nem pontos. Innen ered a 'Bogo' kifejezés is egyébként, hiszen az angol 'bogus' szó jelentése 'hamis'.
A BogoMIPS tanulmányozásához csak ajánlani tudom a következő kisokost: <link xlink:href="http://www.tldp.org/pub/Linux/docs/HOWTO/translations/hungarian/html_single/BogoMips-hu.html">BogoMIPS mini-HOGYAN</link>
</para>
<para>
A <filename>szohossz.c</filename> kódjában tehát felidézzük a BogoMIPS-ben megjelenő while ciklusfejet, így megvizsgálva azt, hogy hány bites a szó a munkagépen.
A ciklusfejben szereplő bitshiftelés (bitléptetés) lényege, hogy a kettes számrendszerbe átírt számok bitjeit addig léptetjük balra, amíg nem fog csupa 0 bitet tartalmazni az n változó.
Az int típusú változók 4 byteon tárolódnak, ezért a szóhossz ezen a gépen 32 bites lesz.
        <programlisting language="c"><![CDATA[
$ more szohossz.c
#include <stdio.h>
int main (void)
{
  int h = 0;
  int n = 0x01;
  do
    ++h;
  while (n <<= 1);
  printf ("A szohossz ezen a gepen: %d bites\n", h);
  return 0;
}
$ gcc szohossz.c -o szohossz
$ ./szohossz
A szohossz ezen a gepen: 32 bites]]>
</programlisting>
Most pedig következzen a BogoMIPS program, melynek while ciklusfejével már a szóhossz feladat kapcsán foglalkoztunk.
Ebben a ciklusban a ticks változó tárolja a CPU által felhasznált processzoridőt, a loops_per_sec bitjeit pedig a <function>delay</function> függvény segítségével odébb toljuk.
A ticks változó értékét újra meghatározzuk, méghozzá úgy, hogy az új processzoridőből kivonjuk a korábban tárolt időt.
Ha a ticks nagyobb (vagy egyenlő), mint a CLOCKS_PER_SEC értéke, akkor a program meg tudja határozni a CPU sebességét.
        <programlisting language="c"><![CDATA[
$ more bogomips.c
#include <time.h>
#include <stdio.h>

void
delay (unsigned long long int loops)
{
unsigned long long int i;
for (i = 0; i < loops; i++);
}

int
main (void)
{
unsigned long long int loops_per_sec = 1;
unsigned long long int ticks;

printf ("Calibrating delay loop..");
fflush (stdout);

while ((loops_per_sec <<= 1))
{
ticks = clock ();
delay (loops_per_sec);
ticks = clock () - ticks;

printf ("%llu %llu\n", ticks, loops_per_sec);

if (ticks >= CLOCKS_PER_SEC)
{
loops_per_sec = (loops_per_sec / ticks) * CLOCKS_PER_SEC;

printf ("ok - %llu.%02llu BogoMIPS\n", loops_per_sec / 500000,
(loops_per_sec / 5000) % 100);

return 0;
}
}

printf ("failed\n");
return -1;
}]]>
        </programlisting>
                <mediaobject>
            <imageobject>
            <imagedata fileref="img/bogomips.PNG" format="PNG" scale="100"/>
            </imageobject>
        </mediaobject>
        </para>
    </section>                     

    <section>
        <title>Helló, Google!</title>
        <para>
            Írj olyan C programot, amely egy 4 honlapból álló hálózatra kiszámolja a négy lap PageRank 
            értékét!
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Turing/PageRank">https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Turing/PageRank</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...:
            </para>
            <para>Tutor: <link xlink:href="https://github.com/p-adrian05">Petraskó Adrián</link></para>
            <para>
            A PageRank algoritmus alapötlete, hogy azok a weblapok jobb minőségűek, amelyekre jobb minőségű lapok mutatnak. Nevét a Google egyik fejlesztője, Larry Page után kapta. Annak ellenére, hogy a Google nem közli a hivatalos PageRank értékeket, képletek segítségével készíthetünk C szimulációt.
</para>
<para>A PageRank képlete: PR(A) = (1-d) + d (PR(T1)/C(T1) + ... + PR(Tn)/C(Tn))</para>
<para>A: az „A” oldal, vagyis az aktuális oldal</para>
<para>T: azon oldalak, amelyek az „A” oldalra mutató linkkel rendelkeznek</para>
<para>PR(A): az „A” oldal PageRank száma</para>
<para>PR(Tn): azon oldalak PageRank száma, amelyek az „A” oldalra mutatnak</para>
<para>C(Tn): a „T” oldalakon található összes link, melyek az „A” oldalra mutatnak</para>
<para>d: damping factor, avagy csillapító tényező, amely 0 és 1 közé esik</para>
<para>Az L kétdimenziós tömbben látható, hogy mátrix alakban rögzítjük azt, hogy egy bizonyos oldalra melyik oldal linkel és mennyit.
A végtelen for ciklusban először lenullázásra kerülnek a PR elemek, majd összeszorozzuk a mátrix és a PRv vektor értékeit, és hozzáadjuk a kinullázott értékekhez.
A <function>tavolsag</function> függvényben kivonjuk egymásból PRv és PR vektorok értékeit, majd négyzetre emeljük őket (így biztosan pozitív végeredményt kapunk), és ennek a gyökét adjuk vissza.

<programlisting language="c"><![CDATA[
$ more pagerank.c
#include <stdio.h>
#include <math.h>
    void
kiir (double tomb[], int db){
	
	int i;
	for (i=0; i<db; ++i){
		printf("%f\n",tomb[i]);
	}
}

double
tavolsag (double PR[], double PRv[], int n){
	
	int i;
	double osszeg=0;
	
	for (i = 0; i < n; ++i)
		osszeg += (PRv[i] - PR[i]) * (PRv[i] - PR[i]);
	return sqrt(osszeg);
}
void
pagerank(double T[4][4]){
	double PR[4] = { 0.0, 0.0, 0.0, 0.0 };
	double PRv[4] = { 1.0/4.0, 1.0/4.0, 1.0/4.0, 1.0/4.0};
	int i, j;
	for(;;){
		
		for (i=0; i<4; i++){
			PR[i]=0.0;
			for (j=0; j<4; j++){
				PR[i] = PR[i] + T[i][j]*PRv[j];
			}
		}]]>
</programlisting>
</para>
<para>
Ha a távolság kisebb, mint 0.0000000001, akkor megszakítjuk (break) a végtelen ciklust.
Ha nem, akkor PRv aktuális értéke egyenlő lesz PR értékével egy for ciklusnak köszönhetően, tehát sikeresen feltöltöttük a PRv egydimenziós tömböt.
<programlisting language="C"><![CDATA[
			if (tavolsag(PR,PRv,4) < 0.0000000001) 
				break;
		
			for (i=0;i<4; i++){
				PRv[i]=PR[i];
			}	
	}
	
	kiir (PR, 4);
}
int main (void){
	double L[4][4] = {
		{0.0,  0.0,      1.0/3.0,  0.0},
		{1.0,  1.0/2.0,  1.0/3.0,  1.0},
		{0.0,  1.0/2.0,  0.0,      0.0},
		{0.0,  0.0, 	 1.0/3.0,  0.0}
	};	
	
	double L1[4][4] = {
		{0.0,  0.0,      1.0/3.0,  0.0},
		{1.0,  1.0/2.0,  1.0/3.0,  0.0},
		{0.0,  1.0/2.0,  0.0,      0.0},
		{0.0,  0.0, 	 1.0/3.0,  0.0}
	};
	
	double L2[4][4] = {
		{0.0,  0.0,      1.0/3.0,  0.0},
		{1.0,  1.0/2.0,  1.0/3.0,  0.0},
		{0.0,  1.0/2.0,  0.0,      0.0},
		{0.0,  0.0, 	 1.0/3.0,  1.0}
	};
	printf("\nAz eredeti mátrix értékeivel történő futás:\n");
	pagerank(L);
	printf("\nAmikor az egyik oldal semmire sem mutat:\n");
	pagerank(L1);
	printf("\nAmikor az egyik oldal csak magára mutat:\n");
	pagerank(L2);
	printf("\n");
	return 0;
}
$ gcc pagerank.c -o pagerank -lm
$ ./pagerank

Az eredeti mátrix értékeivel történő futás:
0.090909
0.545455
0.272727
0.090909

Amikor az egyik oldal semmire sem mutat:
0.000000
0.000000
0.000000
0.000000

Amikor az egyik oldal csak magára mutat:
0.000000
0.000000
0.000000
1.000000]]>
</programlisting>
</para>
    </section>

    <section xml:id="Brun">
        <title>100 éves a Brun-tétel</title>
        <para>
            Írj R szimulációt a Brun-tétel demonstrálására!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/xbYhp9G6VqQ">https://youtu.be/xbYhp9G6VqQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Turing/Brun">https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Turing/Brun</link></para>
    <para>Tanulságok, tapasztalatok, magyarázat...: 
    </para>
    <para>Prímszám az a természetes szám, amely csak önmagával és eggyel osztható. 
    Minden természetes szám előállítható prímszámok szorzataként.
    Két prím ikerprím, ha különbségük 2.
    Két egymást követő páratlan prím között a legkisebb távolság 2, a legnagyobb távolság bármilyen nagy lehet.
    </para>
<para>
A Brun-tétel azt mondja, hogy az ikerprímszámok reciprokaiból képzett sor összege, 
azaz a (1/3 + 1/5) + (1/5 + 1/7) + (1/11 + 1/13) + ... véges vagy végtelen sor konvergens, 
ami azt jelenti, hogy ezek a törtek összeadva egy határt adnak ki pontosan vagy azt át nem lépve növekednek. 
Ezt a határszámot B<subscript>2</subscript> Brun-konstansnak nevezzük.
</para>
<para>A <filename>brun.r</filename> program kiszámolja az ikerprímeket, összegzi a reciprokaikat és vizualizálja a kapott részeredményt.
A primes segítségével kapjuk meg megadott számig a prímeket.
A diff fogja meghatározni nekünk az egymást követő prímszámok különbségét.
Az idx megnézi a diff-ben, hogy mikor lett 2 az eredmény, hiszen akkor beszélhetünk ikerprím-párokról.
A t1primes kiveszi a prímpárok első tagját, a t2primes pedig meghatározza a pár második tagját azzal, hogy az elsőhöz hozzáad kettőt.
1/t1primes és 1/t2primes reciprokokat képeznek a prímekből, az rt1plust2-ben pedig ezeket a törteket összeadjuk.
Visszatérési értékünk egy szumma lesz.
        </para>

<programlisting language="R"><![CDATA[
$ more brun.r
library(matlab)
stp <- function(x){
    primes = primes(x)
    diff = primes[2:length(primes)]-primes[1:length(primes)-1]
    idx = which(diff==2)
    t1primes = primes[idx]
    t2primes = primes[idx]+2
    rt1plust2 = 1/t1primes+1/t2primes
    return(sum(rt1plust2))
}

x=seq(13, 1000000, by=10000)
y=sapply(x, FUN = stp)
plot(x,y,type="b")]]>
        </programlisting>
    <para>
    Ha feltelepítettük az R szoftvert és a matlab könyvtárat, akkor a programkód le fog futni, és a következő ábrát kapjuk:
    <mediaobject>
            <imageobject>
            <imagedata fileref="img/brun.PNG" format="PNG" scale="100"/>
            </imageobject>
        </mediaobject>
        Az ábra azt mutatja, hogy a szumma értéke egy határértékhez, a B<subscript>2</subscript> Brun-konstanshoz tart (konvergencia).
        A számítást először 13-ig végezzük, majd 10013-ig, aztán 20013-ig, egészen 990013-ig.
    </para>
    </section>
    
    <section xml:id="bhax-textbook-feladatok-turing.MontyHall">
        <title>A Monty Hall-probléma</title>
        <para>
            Írj R szimulációt a Monty Hall-problémára!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan">https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Turing/MontyHall">https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Turing/MontyHall</link></para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...: 
        </para>
        <para>
            Az előszó egyik ajánlott művében, a <link xlink:href="https://www.imdb.com/title/tt0478087/">'21 - Las Vegas ostroma'</link> című filmben is feldolgozásra került a Monty Hall-paradoxon. 
            Ha még nem láttad, <link xlink:href="https://youtu.be/mROwuUVkD_E">ide</link> kattintva megtekintheted a filmrészletet.
        </para>
        <para>
        A Monty Hall-paradoxon lényege, hogy három csukott ajtó közül kettő mögött nincs semmi, de a harmadik mögött van egy vadonatúj autó.
Ha választunk egy ajtót, akkor a másik két ajtó közül nyitnak ki egyet, ami mögött nem az autó van. Döntés elé állítanak minket: vagy kitartunk az eredeti választásunk mellett, vagy az új ajtót választjuk.
Heves reakciót váltott ki a matematikusokból ez a probléma, ugyanis a számítógépes szimulációk azt bizonyítják, hogy megéri változtatni a döntésünkön.
</para>
<para>
A <filename>montyhall.r</filename> szimuláció is ezek közé tartozik.
A kiserletek_szama változóban 10000000 kísérletet határozunk meg.
A kiserlet és jatekos vektorokban véletlenszerűen kerül kisorsolásra 1 és 3 között egy szám.
Ha a kiserlet értéke megegyezik a jatekos találatával, akkor a játékos eltalálta a nyereményt, tehát az nem a másik két ajtó mögött van.
Ellenkező esetben a mibol értéke az lesz, amelyik nem a nyeremény és nem is a játékos találata.
A musorvezeto vektorba bekerül a mibol értéke.
<programlisting language="R"><![CDATA[
$ more montyhall.r
kiserletek_szama=10000000
kiserlet = sample(1:3, kiserletek_szama, replace=T)
jatekos = sample(1:3, kiserletek_szama, replace=T)
musorvezeto=vector(length = kiserletek_szama)

for (i in 1:kiserletek_szama) {
    if(kiserlet[i]==jatekos[i]){
        mibol=setdiff(c(1,2,3), kiserlet[i])
    }else{
        mibol=setdiff(c(1,2,3), c(kiserlet[i], jatekos[i]))
    }
    musorvezeto[i] = mibol[sample(1:length(mibol),1)]
}]]>
</programlisting>
</para>
<para>
A nemvaltoztatesnyer vektorba azok az esetek kerülnek be, amikor a játékos megtalálta a nyereményt, pedig nem is változtatott döntésén.
A valtoztat vektorba azok az esetek kerülnek be, amikor a játékos úgy döntött, hogy változtat.
Egy for ciklus segítségével végigmegyünk a kísérleteken: a holvalt vektorba azok a számok kerülnek be, amelyek nem egyeznek a játékos által választottal és a nyereménnyel sem, tehát ha változtatna a játékos a döntésén, akkor nyerne.
A valtoztat vektorba pedig a holvalt értékei közül bekerül az egyik.
A valtoztatesnyer vektorban már azok az esetek vannak, amikor a játékos változtatott a döntésén, és nyert is.
<programlisting language="R"><![CDATA[
nemvaltoztatesnyer= which(kiserlet==jatekos)
valtoztat=vector(length = kiserletek_szama)

for (i in 1:kiserletek_szama) {
    holvalt = setdiff(c(1,2,3), c(musorvezeto[i], jatekos[i]))
    valtoztat[i] = holvalt[sample(1:length(holvalt),1)]
}

valtoztatesnyer = which(kiserlet==valtoztat)

sprintf("Kiserletek szama: %i", kiserletek_szama)
length(nemvaltoztatesnyer)
length(valtoztatesnyer)
length(nemvaltoztatesnyer)/length(valtoztatesnyer)
length(nemvaltoztatesnyer)+length(valtoztatesnyer)]]>
</programlisting>
</para>
<para>
A fordítás és futtatás után pedig megkapjuk a bizonyítást:
<programlisting><![CDATA[
$ Rscript montyhall.r
[1] "Kiserletek szama: 10000000"
[1] 3335205
[1] 6664795
[1] 0.5004212
[1] 10000000]]>
</programlisting>
    <mediaobject>
            <imageobject>
            <imagedata fileref="img/monty.png" format="PNG" scale="100"/>
            </imageobject>
        </mediaobject>
        </para>
    </section>

</chapter>                
