<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Gutenberg!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Juhász István: Magas szintű programozási nyelvek 1-2</title>
        <formalpara>
            <title>Alapfogalmak:</title>
            <para>
A magas szintű nyelv a számítógépek programozására kialakult nyelvek egyik szintje.
Forrásszövegnek nevezzük a magas szintű programozási nyelven írt programot.
Kétféle technikával is készíthetünk gépi nyelvű programot a forrásprogramból: fordítóprogramos és interpreteres technikával.
Én személy szerint eddig csak fordítóprogrammal alakítottam ki a programjaim végleges formáját (GNU Compiler), szóval az interpreteres technikáról még csak nem is hallottam korábban. 
</para>
</formalpara>
<para>
A fordítóprogram a következő lépéseket hajtja végre: lexikális elemzés (darabolás egységekre), szintaktikai elemzés (teljesülnek-e a nyelv szabályai), szemantikai elemzés és kódgenerálás.
Míg a fordítóprogramos technikánál készül tárgyprogram, addig az interpreteres technikánál nem, ez a fő eltérés.
A programozási nyelvek saját szabványait hivatkozási nyelvnek nevezzük (szintaktikai + szemantikai szabályok).
</para>
<para>
Következik ezután a programnyelvek osztályozása: vannak imperatív, deklaratív és egyéb nyelvek.
Imperatív nyelvek esetén a program utasítások sorozata és a legfőbb programozói eszköz a változó. Az algoritmus működteti a processzort.
Én elsősorban imperatív nyelveken szoktam programozni (C - eljárásorientált, C++ - objektumorientált).
A deklaratív nyelvek nem algoritmikus nyelvek, a programozónak nincs lehetősége memóriaműveletekre (vagy csak korlátozott módon).
            </para>
        <formalpara>
            <title>Adattípusok:</title>
            <para>
Az adattípus konkrét programozási eszközök komponenseként jelenik meg.
Egyik meghatározó tényezője a tartomány, amely olyan elemeket tartalmaz, amiket felvehet értékként egy programozási eszköz.
Fontosak a műveletek is, amelyeket az elemeken tudunk végrehajtani.
A harmadik meghatározó dolog az adattípusok világában a reprezentáció, azaz egyfajta belső ábrázolási mód.
Saját reprezentációt megadni azonban csak nagyon kevés programozási nyelvben lehet (pl. Ada).
</para>
</formalpara>
<para>
Az adattípusok két nagy csoportja az egyszerű és az összetett adattípusok. Mindkét csoportra hoz példát a könyv, ezek közül egy jópárat már ismertem én is.
Az egyszerű típusok közül az egész, valós, karakteres és a logikai típus már a programozás-tanulás korai fázisában előjön.
Ugyanez elmondható a tömbről is, mely ugyan az összetett típusokhoz tartozik, de egy- és kétdimenziós változatait gyakran használjuk, szinte a kezdetektől fogva.
</para>
<para>
A mutató típus értéke egy tárbeli cím, illetve elérhetünk vele egy megcímzett területen elhelyezkedő értéket is.
            </para>
        <formalpara>
            <title>A nevesített konstans:</title>
            <para>
Olyan programozási eszköz, amelynek három komponense van: név, típus és érték.
</para>
</formalpara>
<para>
C-ben van beépített nevesített konstans, de FORTRAN-ban pl. nem volt. A legegyszerűbb a #define név literál makró használata.
Ekkor az előfordító a forrásprogramban a név minden előfordulását helyettesíti a literállal.
            </para>
        <formalpara>
            <title>Változó:</title>
            <para>
Az imperatív programozási nyelvek fő eszköze, négy komponense van: név, attribútumok, cím, érték.
A változó mindig a nevével jelenik meg, a másik három komponenst a névhez rendeljük hozzá.
</para>
</formalpara>
<para>
Az attribútumok a változó futás közbeni viselkedését határozzák meg, a cím pedig a tárnak azt a részét, ahol a változó értéke elhelyezkedik.
Ha két különböző névvel rendelkező változónak a futási idő egy adott pillanatában azonos a címkomponense és az értékkomponense is, akkor beszélhetünk többszörös tárhivatkozásról.
Az eljárásorientált nyelvek leggyakoribb utasítása az értékadó utasítás pl. C: változónév = kifejezés;
            </para>
        <formalpara>
            <title>Kifejezések:</title>
            <para>
Szintaktikai eszközök, két komponensük az érték és a típus.
Összetevői az operandusok, az operátorok és a kerek zárójelek.
Létezik egyoperandusú (unáris), kétoperandusú (bináris) és háromoperandusú (ternáris) operátor is.
</para>
</formalpara>
<para>
A kifejezések három alakja a prefix (pl. * 3 5 - operátor, operandusok), az infix (pl. 3 * 5 - operandus, operátor, operandus) és a postfix (pl. 3 5 * - operandusok, operátor).
A kifejezés kiértékelésének nevezzük azt a folyamatot, amikor a kifejezés értéke és típusa meghatározódik.
</para>
<para>
A kiértékelés szempontjából a logikai operátorokkal rendelkező kifejezések speciálisak, ugyanis előfordulhat, hogy nem végezzük el az összes műveletet.
Pl. ha ÉS műveletnél az első operandus hamis, akkor mindenképp hamis lesz a végeredmény.
Két programozási eszköz típusa azonos deklaráció-, név- és struktúra egyenértékűség esetén.
</para>
<para>
A C egy kifejezésorientált nyelv.
A mutató típus tartományának elemeivel összeadás és kivonás végezhető.
A tömb típusú eszköz neve mutató típusú.
<programlisting><![CDATA[
//Operátorok: 
() - függvényoperátor; 
[] - tömboperátor; 
. - minősítő operátor; 
-> - mutatóval történő minősítés operátora; 
* - indirekciós operátor;
! - egyoperandusú operátor; 
~ - egyes komplemens operátora; 
* - szorzás operátora; 
/ - osztás operátora; 
% - maradékképzés operátora; 
+ - összeadás operátora; 
- - kivonás operátora; 
<< >> - léptető operátorok;
< > <= >= = != - hasonlító operátorok; 
& ^ | - nem rövidzár logikai operátorok; 
&& || - rövidzár logikai operátorok; 
? : - háromoperandusú operátor.]]>
</programlisting>
            </para>
<formalpara>
    <title>Utasítások:</title>
<para>
Olyan egységek, amelyekkel megadjuk az algoritmusok lépéseit és amely segítségével a fordítóprogram tárgyprogramot generálhat.
Két nagy csoportjuk a deklarációs és a végrehajtható utasítások.
</para>
</formalpara>
<para>
A deklarációs utasítások mögött nem áll tárgykód. A tárgykód a végrehajtható utasításokból generálódik, fordítóprogram segítségével.
Az értékadó utasítás feladata beállítani vagy módosítani a változók értékkomponensét.
Az üres utasítások hatására a processzor egy üres gépi utasítást hajt végre.
Az ugró utasítás (GOTO címke) a program egy adott pontjáról egy adott címkével ellátott végrehajtható utasításra adja át a vezérlést.
</para>
<para>
A kétirányú elágaztató utasítás (IF feltétel THEN tevékenység [ELSE tevékenység]) arra szolgál, hogy a program egy adott pontján két tevékenység közül válasszunk, illetve egy adott tevékenységet végrehajtsunk vagy sem.
ELSE-ág hiánya esetén rövid kétirányú elágaztató utasításról beszélünk.
</para>
<para>
A többirányú elágaztató utasítás arra szolgál, hogy a program egy adott pontján egymást kölcsönösen kizáró tevékenységek közül egyet végrehajtsunk.
<programlisting><![CDATA[
C-ben:
SWITCH (kifejezés) {
CASE egész_konstans_kifejezés: [tevékenység]
[CASE egész_konstans_kifejezés: [tevékenység]]...
[DEFAULT: tevékenység]
};]]>
</programlisting>
A ciklusszervező utasítások lehetővé teszik, hogy a program egy adott pontján egy bizonyos tevékenységet akárhányszor megismételjünk. Felépítése: fej, mag, vég.
</para>
<para>
A feltételes ciklusnál az ismétlődést az igaz vagy hamis érték határozza meg. A feltétel a fejben vagy a végben szerepel, a mag az ismételendő végrehajtható utasításokat tartalmazza.
Az előírt lépésszámú ciklusnál a ciklusparaméterek a fejben vannak. A változó által felvett értékekre fut le a ciklusmag. A ciklusváltozó a tartománynak vagy minden elemét fölveheti, vagy csak a tartományban szabályosan elhelyezkedő bizonyos értékeket.
</para>
<para>
A felsorolásos ciklusnak van ciklusváltozója, és minden felvett érték mellett lefut a mag.
A végtelen ciklusnál sem a fejben, sem a végben nincs információ az ismétlődésre vonatkozóan.
Az összetett ciklus pedig az előző ciklusfajták kombinációja.
<programlisting><![CDATA[
C-ben:
//Kezdőfeltételes ciklus:
WHILE(feltétel) végrehajtható_utasítás
//Végfeltételes ciklus:
DO végrehajtható_utasítás WHILE(feltétel);
//FOR-ciklus:
FOR([kifejezés1]; [kifejezés2]; [kifejezés3]) végrehajtható_utasítás
//Vezérlő utasítások:
CONTINUE;
BREAK;
RETURN[kifejezés];]]>
</programlisting>
</para>
<formalpara>
            <title>A programok szerkezete:</title>
            <para>
Az eljárásorientált programnyelvekben a program szövege programegységekre tagolható.
A program vagy fizikailag önálló részekből áll (külön-külön fordíthatóak), vagy egyetlen egységként kell lefordítani, ez nyelvfüggő.
A kettő kombinációja is előfordulhat.
</para>
</formalpara>
<para>
Az eljárásorientált nyelvek programegységei: alprogram, blokk, csomag, taszk.
Az alprogram egy bemeneti adatcsoportot képez le egy kimeneti adatcsoportra úgy, hogy egy specifikáció megadja az adatok leírását.
Az alprogram akkor alkalmazható, ha a program különböző pontjain ugyanaz a programrész megismétlődik.
Felépítése: fej vagy specifikáció, törzs vagy implementáció, vég.
</para>
<para>
Az alprogram komponensei: név, formális paraméterlista, törzs, környezet.
A név a fejben szereplő azonosító. A formális paraméterlistában azonosítók szerepelnek.
A törzsben deklarációs és végrehajtható utasítások szerepelnek.
A környezet alatt a globális változók együttesét értjük.
</para>
<para>
Az alprogramok két fajtája az eljárás és a függvény.
Az eljárás valamilyen tevékenységet hajt végre, a függvény egyetlen értéket határoz meg.
Hívási láncról akkor beszélünk, ha egy programegység meghív egy másik programegységet, az egy programegységet, és így tovább.
</para>
<para>
Amikor egy aktív alprogramot hívunk meg, akkor rekurzióról beszélünk.
A rekurzió lehet közvetlen (önmagát hívja meg) vagy közvetett (korábban szereplő alprogramot hívunk meg).
</para>
<para>
A blokk olyan programegység, amely csak másik programegység belsejében helyezkedhet el.
Van kezdete, törzse, vége. Bárhol elhelyezhető, ahol végrehajtható utasítás állhat.
Csak eljárásorientált nyelveknek egy része ismeri.
            </para>
        <formalpara>
            <title>Paraméterek:</title>
            <para>
Akkor beszélünk paraméterkiértékelésről, amikor egy alprogram hívásánál egymáshoz rendelődnek a formális- és aktuális paraméterek, és meghatározódnak azok az információk, amelyek a paraméterátadásnál a kommunikációt szolgálják.
Mindig a formális paraméterlista az elsődleges, egy darab van belőle.
Aktuális paraméterlista viszont annyi lehet, ahányszor meghívjuk az alprogramot.
</para>
</formalpara>
<para>
Az, hogy melyik formális paraméterhez melyik aktuális paraméter fog hozzárendelődni, függ a kötéstől.
Sorrendi kötés esetén a formális paraméterekhez a felsorolás sorrendjében rendelődnek hozzá az aktuális paraméterek.
Név szerinti kötés esetén az aktuális paraméterlistában határozhatjuk meg az egymáshoz rendelést úgy, hogy megadjuk a formális paraméter nevét és mellette valamilyen szintaktikával az aktuális paramétert.
Ha a formális paraméterek száma fix, akkor a paraméterkiértékelés kétféle módon mehet végbe.
Vagy meg kell egyeznie az aktuális paraméterek számának a formális paraméterek számával, vagy kevesebb lehet, mint a formális paraméterek száma.
</para>
<para>
A programozási nyelvek egy része a típusegyenértékűséget vallja, ekkor az aktuális paraméter típusának azonosnak kell lennie a formális paraméter típusával.
A programozási nyelvek másik része azt mondja, hogy az aktuális paraméter típusának konvertálhatónak kell lennie a formális paraméter típusára.
</para>
<para>
A paraméterátadás az alprogramok és más programegységek közötti kommunikáció egy formája.
Mindig van egy hívó (tetszőleges programegység) és egy hívott (alprogram). 
A nyelvek a következő paraméterátadási módokat ismerik: érték szerinti, cím szerinti, eredmény szerinti, érték-eredmény szerinti, név szerinti, szöveg szerinti.
</para>
<para>
Az érték szerinti paraméterátadás esetén a formális paramétereknek van címkomponensük a hívott alprogram területén.
A cím szerinti paraméterátadásnál a formális paramétereknek nincs címkomponensük a hívott alprogram területén.
Az eredmény szerinti paraméterátadásnál a formális paramétereknek van címkomponense a hívott alprogram területén, az aktuális paraméternek pedig lennie kell címkomponensének.
</para>
<para>
Az érték-eredmény szerinti paraméterátadásnál a formális paraméternek van címkomponense a hívott területén és az aktuális paraméternek rendelkeznie kell érték- és címkomponenssel.
A név szerinti paraméterátadásnál az aktuális paraméter egy, az adott szövegkörnyezetben értelmezhető tetszőleges szimbólumsorozat lehet.
A szöveg szerinti paraméterátadás a név szerintinek egy változata, annyiban különbözik tőle, hogy a hívás után az alprogram elkezd működni, az aktuális paraméter értelmező szövegkörnyezetének rögzítése és a formális paraméter felülírása csak akkor következik be, amikor a formális paraméter neve először fordul elő az alprogram szövegében a végrehajtás folyamán.
</para>
<para>
Az alprogramok formális paramétereit három csoportba sorolhatjuk: input (pl. érték szerinti), output (pl. eredmény szerinti), input-output (pl. érték-eredmény szerinti).
            </para>
                <formalpara>
            <title>Blokk és hatáskör:</title>
            <para>
A blokk programegység, amely csak másik programegység belsejében helyezkedhet el, külső szinten nem állhat.
Van kezdete, törzse és vége.
A kezdetet és a véget egy-egy speciális karaktersorozat vagy alapszó jelzi.
A törzsben lehetnek deklarációs és végrehajtható utasítások.
A blokknak nincs paramétere és bárhol elhelyezhető, ahol végrehajtható utasítás állhat.
</para>
</formalpara>
<para>
Egy név hatásköre alatt értjük a program szövegének azon részét, ahol az adott név ugyanazt a programozási eszközt hivatkozza, tehát jelentése, felhasználási módja, jellemzői azonosak.
Azt a tevékenységet, amikor egy név hatáskörét megállapítjuk,
hatáskörkezelésnek hívjuk.
</para>
<para>
A statikus hatáskörkezelés fordítási időben történik, a fordítóprogram végzi.
Azt a nevet, amely egy adott programegységben nem lokális név, de onnan látható, globális névnek hívjuk.
A dinamikus hatáskörkezelés futási idejű tevékenység, a futtató rendszer végzi.
</para>
<para>
Az eljárásorientált nyelvek a statikus hatáskörkezelést valósítják meg.
A C nyelv a függvényt és a blokkot ismeri.
<programlisting><![CDATA[
//A blokk alakja:
{
	deklarációk
	végrehajtható_utasítások
}]]>
</programlisting>
            </para>
                        <formalpara>
            <title>Absztrakt adattípus:</title>
            <para>
Olyan adattípus, amely megvalósítja a bezárást vagy információrejtést.
Ezen adattípusnál nem ismerjük a reprezentációt és a műveletek
implementációját.
</para>
</formalpara>
<para>
Az ilyen típusú programozási eszközök értékeihez csak szabályozott módon,
a műveleteinek specifikációi által meghatározott interfészen keresztül férhetünk hozzá.
Az elmúlt évtizedekben az ADT a programnyelvek egyik legfontosabb fogalmává vált és alapvetően befolyásolta a nyelvek fejlődését.
            </para>
                                <formalpara>
            <title>Generikus programozás:</title>
            <para>
Az újrafelhasználhatóság és a procedurális absztrakció eszköze.
Bármely programozási nyelvbe beépíthető ilyen eszközrendszer.
</para>
</formalpara>
<para>
Lényege, hogy egy paraméterezhető forrásszöveg-mintát adunk meg.
A mintaszöveget a fordító kezeli, előállítható belőle egy konkrét szöveg, ami aztán lefordítható.
A generikus formális paramétereinek száma mindig fix.
            </para>
        <formalpara>
            <title>Input/output:</title>
            <para>
Az I/O platform-, operációs rendszer-, implementációfüggő.
Az az eszközrendszer a programnyelvekben, amely a perifériákkal történő
kommunikációért felelős, amely az operatív tárból oda küld adatokat, vagy onnan vár adatokat.
</para>
</formalpara>
<para>
Középpontjában az állomány áll.
A logikai állomány egy olyan programozási eszköz, amelynek neve van, és amelynél pl. a rekordfelépítés, rekordformátum, elérés, szerkezet stb. attribútumként jelenik meg.
A fizikai állomány pedig a szokásos operációs rendszer szintű, konkrét, a perifériákon megjelenő, az adatokat tartalmazó állomány.
Egy állomány funkció szerint lehet input, output vagy input-output.
</para>
<para>
Kétféle adatátviteli mód létezik: a folyamatos és a bináris/rekord módú.
Formátumos módú adatátvitelnél minden egyes egyedi adathoz a formátumok segítségével explicit módon meg kell adni a kezelendő karakterek darabszámát és a típust.
Szerkesztett módú adatátvitelnél minden egyes egyedi adathoz meg kell adni egy maszkot, amely szerkesztő és átviendő karakterekből áll.
Listázott módú adatátvitelnél a folytonos karaktersorozatban vannak a tördelést végző speciális karakterek, amelyek az egyedi adatokat elhatárolják egymástól, a típusra nézve pedig nincs explicit módon megadott információ.
</para>
<para>
Ha egy programban állományokkal akarunk dolgozni, akkor a következőket kell végrehajtanunk: deklaráció, összerendelés, állomány megnyitása, feldolgozás, lezárás.
C-ben az I/O eszközrendszer nem része a nyelvnek, standard könyvtári függvények állnak rendelkezésre.
Létezik a bináris és a folyamatos módú átvitel, utóbbinál egy formátumos és egy szerkesztett átvitel keverékeként.
            </para>
            <formalpara>
                <title>Kivételkezelés:</title>
                    <para>
A kivételkezelés lényege, hogy az operációs rendszertől átvegyük a megszakítások kezelését. A kivételek megszakítást okoznak, kivételkezelő alatt pedig olyan programrészt értünk, ami reagál egy adott kivétel bekövetkezésére.
</para>
</formalpara>
<para>
Egyes kivételek figyelése letiltható vagy engedélyezhető. Egy kivétel figyelésének letiltása a legegyszerűbb kivételkezelés.
Ilyenkor a megszakítás feljön programszintre, kiváltódik a kivétel, de a program fut tovább.
</para>
<para>
Az eseményhez kapcsolódó üzenet szerepét a kivétel neve játssza. A kivételeknek általában van kódja is, ami egy egész szám.
</para>
<para>
Javaban akkor jön létre kivétel-objektum, ha bekövetkezik egy speciális esemény egy módszer futása közben.
A kivétel a Java virtuális gép hatáskörébe kerül át, a módszer pedig befejezi a futását.
A Java Virtual Machine megkeresi az adott pontba látható kivételkezelőt, amely elkapja az adott kivételt.
Megfelelő típusú a kivételkezelő, ha típusa megegyezik a kivétel típusával, vagy típusas őse a kivétel típusának.
</para>
<para>
Ebben a programozási nyelvben a kivételkezelők blokkok, melyek tetszőleges mélységben egymásba ágyazhatók.
Ha talál megfelelő típusú kivételkezelőt a JVM, akkor átadja a vezérlést, lefut a kivételkezelő, majd a program folytatódik a következő utasításon.
A kivételek két csoportja az ellenőrzött és a nem ellenőrzött kivételek.
Az ellenőrzött kivételeket a programozónak kell specifikálnia, vagy elkapnia. A fordító hibát jelez, ha ez nem teljesül.
Nem ellenőrzött kivételről beszélhetünk pl. abban az esetben, ha az ellenőrzés irreálisan nagy kódtöbbletet eredményezne.
</para>
<programlisting><![CDATA[
//A kivételkezelő szerkezete a Javaban:
TRY
{
	utasítások
}
	CATCH (típus változónév) {utasítások}
	[CATCH (típus változónév) {utasítások}]...
	[FINALLY {utasítások}]]]>
</programlisting>
<para>
A TRY blokk utasításaiban keletkezett kivételek esetén a JVM a CATCH utasításoknak adja át a vezérlést.
A FINALLY ág akkor is, ha nem volt kivétel, de a CATCH ág akár teljesen hiányozhat.
                </para>
            
    </section>
    
    <section>
        <title>Kernigan-Ritchie: A C programozási nyelv</title>
        <formalpara>
            <title>Vezérlési szerkezetek:</title>
        <para>
            Egy nyelv vezérlésátadó utasításai az egyes műveletek végrehajtási sorrendjét határozzák meg.
Egy olyan kifejezés, mint x = 0, i++ vagy printf(...) utasítássá válik, ha egy pontosvesszőt írunk utána.
A C nyelvben ugyanis a pontosvessző az utasításlezáró jel (terminátor).
</para>
</formalpara>
<para>
A {} kapcsos zárójelekkel deklarációk és utasítások csoportját tudjuk összefogni egyetlen összetett utasításba vagy blokkba.
Pl. if, else, while, for utasítások utáni utasításokat összefogó zárójelpár.
Az if-else utasítást döntés kifejezésére használjuk.
</para>
<para>
Az utasítás először kiértékeli a kifejezést, és ha ennek értéke igaz, akkor az 1. utasítást hajtja végre. Ha hamis és van else rész, akkor a 2. utasítás hajtódik végre.
<programlisting><![CDATA[
if (kifejezés)
	1. utasítás
else
	2. utasítás
//az else rész opcionális]]>
</programlisting>
Az else-if utasítás adja a többszörös döntések programozásának egyik legáltalánosabb lehetőségét.
A gép sorra kiértékeli a kifejezéseket és ha bármelyik ezek közül igaz, akkor végrehajtja a megfelelő utasítást, majd befejezi a láncot.
<programlisting><![CDATA[
if (kifejezés)
	utasítás
else if (kifejezés)
	utasítás
.
.
.
else
	utasítás]]>
	</programlisting>
A switch utasítás úgy működik, hogy összehasonlítja egy kifejezés értékét több egész értékű állandó kifejezés értékével, és az ennek megfelelő utasítást hajtja végre.
A case ágakban egy egész állandó vagy állandó egész értékű kifejezés található, és ha ennek értéke megegyezik a switch utáni kifejezés értékével, akkor végrehajtódnak az utasítások.
A default ág opcionális, akkor hajtódik végre, ha egyetlen case ághoz tartozó feltétel sem teljesült.
<programlisting><![CDATA[
switch (kifejezés) {
	case állandó kifejezés: utasítások
	case állandó kifejezés: utasítások
	.
	.
	.
	default: utasítások
}]]>
</programlisting>
A while ciklus esetén a program először kiértékeli a kifejezést. A ciklus addig folytatódik, amíg a kifejezés nullává (false) nem válik.
<programlisting><![CDATA[
while (kifejezés)
	utasítás]]>
	</programlisting>
A for utasítás mindhárom komponense kifejezés. 
Egyszerű inicializálás és újrainicializálás esetén előnyösebb a while ciklusnál, mivel a ciklust vezérlő utasítások jól látható formában helyezkednek el.
<programlisting><![CDATA[
for (1. kifejezés, 2. kifejezés, 3. kifejezés)
	utasítás]]>
	</programlisting>
A harmadik ciklusszervező utasítás a do-while.
A gép először végrehajtja az utasítást és csak utána értékeli a kifejezést.
Addig tart a ciklus, amíg a kifejezés értéke hamis nem lesz.
<programlisting><![CDATA[
do
	utasítás
while (kifejezés);]]>
</programlisting>
A break utasítás lehetővé teszi a for, while vagy do utasításokkal szervezett ciklusok idő előtti elhagyását, valamint a switch utasításból való kilépést.
A ciklusmagban található continue utasítás hatására azonnal megkezdődik a következő iterációs lépés.
</para>
<para>
A goto utasítással megadott címkékre ugorhatunk. Használatának egyik legelterjedtebb esete, amikor több szinten egymásba ágyazott szerkezet belsejében kívánjuk abbahagyni a feldolgozást és egyszerre több, egymásba ágyazott ciklusból szeretnénk kilépni.
        </para>
        <formalpara>
            <title>Utasítások:</title>
            <para>
Végrehajtásuk a hatásukban nyilvánul meg és nem rendelkeznek értékkel.
<programlisting><![CDATA[
utasítás:
	címkézett_utasítás
	kifejezésutasítás
	összetett_utasítás
	kiválasztó_utasítás
	iterációs_utasítás
	vezérlésátadó_utasítás]]>
	</programlisting>
Az utasításokhoz előtagként megadott címke tartozhat.
<programlisting><![CDATA[
címkézett_utasítás
	azonosító: utasítás
	case állandó_kifejezés: utasítás
	default: utasítás]]>
	</programlisting>
A címkék önmagukban nem módosítják az utasítások végrehajtásának sorrendjét.
Az utasítások többsége kifejezésutasítás. Funkcióját tekintve a legtöbb kifejezésutasítás értékadás vagy függvényhívás.
<programlisting><![CDATA[
kifejezésutasítás:
	kifejezés]]>
	</programlisting>
A C nyelvben lehetőség van összetett utasításokra is, melyek több utasítás egyetlen utasításkénti kezelését teszi lehetővé.
<programlisting><![CDATA[
összetett_utasítás:
	{deklarációs_lista utasítás_lista}
deklarációs_lista:
	deklaráció
	deklarációs_lista deklaráció
utasítás_lista:
	utasítás
	utasítás_lista utasítás]]>
	</programlisting>
A kiválasztó utasítások minden esetben a lehetséges végrehajtási sorrendek egyikét választják ki.
<programlisting><![CDATA[
kiválasztó_utasítás:
	if (kifejezés) utasítás
	if (kifejezés) utasítás else utasítás
	switch (kifejezés) utasítás]]>
	</programlisting>
Az iterációs utasítások egy ciklust határoznak meg.
<programlisting><![CDATA[
iterációs_utasítás:
	while (kifejezés) utasítás
	do utasítás while (kifejezés):
	for (kifejezés; kifejezés; kifejezés) utasítás]]>
</programlisting>
A vezérlésátadó utasítások a vezérlés feltétel nélküli átadására alkalmasak.
<programlisting><![CDATA[
vezérlésátadó_utasítás:
	goto azonosító;
	continue;
	break;
	return kifejezés;]]>
	</programlisting>
            </para>
        </formalpara>
    </section>
    
    <section>
        <title>Benedek-Levendovszky: Szoftverfejlesztés C++ nyelven</title>
    <formalpara>
        <title>A C és a C++ nyelv:</title>
    <para>
A C++ nyelvben az üres paraméterlista egy void paraméter megadásával ekvivalens: a függvénynek nincs paramétere.
<programlisting><![CDATA[
void f(void)
{
	// Az f függvény törzse...
}]]>
</programlisting>
A szabványos C++ nyelvben a main függvénynek két formája létezik:
<programlisting><![CDATA[
int main()
{
	...
}]]>
</programlisting>
és
<programlisting><![CDATA[
int main(int argc, char* argv[])
{
	...
}
//argc: parancssor-argumentumok száma
//argv: parancssor-argumentumok]]>
</programlisting>
A C++ nyelvben került bevezetésre a bool típus, ami logikai igaz/hamis értéket tud reprezentálni. Pl. bool success = false.
A bool típus olvashatóbb kódot eredményez, lehetőség van a függvénynevek és operátorok bool és int típusokra vonatkozó túlterhelésére.
</para>
</formalpara>
<para>
A C++ nyelvben a wchar_t beépített típus lett, így használatához a típusdefinícióra nincs szükség.
<programlisting><![CDATA[
wchar_t c = L's';
wchar_t* text = L"sss";]]>
</programlisting>
A függvényeket a nevük és az argumentumlistájuk együttesen azonosítja, tehát a C++ nyelvben van lehetőség azonos nevű függvények létrehozására.
A függvények argumentumainak alapértelmezett értékét is meg tudjuk már adni.
Amennyiben a függvény hívásakor nem adunk meg értéket, a függvény az adott argumentum alapértelmezett értékével kerül meghívásra.
</para>
<para>
A C++ bevezette a referenciatípust, ami megszünteti a pointerek szerepét a cím szerinti paraméterátadásban.
    </para>
    <formalpara>
        <title>Operátorok és túlterhelésük:</title>
    <para>
A C nyelvben az operátorok az argumentumaikon végeznek műveletet, az adott művelet eredményét a visszatérési értékük feldolgozásával használhatjuk.
Az adott operátor mellékhatásának nevezzük az operátorok értékének megváltoztatását.
</para>
</formalpara>
<para>
A c++ kifejezés esetén a c változó a ++ operátor argumentuma, az operátor visszatérési értéke a c változó eredeti értéke, mellékhatásként az operátor kiértékelése után a c változó értéke eggyel több lesz.
A C++ nyelv a C-hez képest bevezet néhány új operátort (pl. hatókör-operátor ::, pointer-tag operátor .* és ->*).
</para>
<para>
A C nyelvben csak érték szerinti paraméterátadás van, nem tudjuk megváltoztatni egy változó értékét, csak ha a változóra mutató pointert adunk át.
A C++-ban azonban a referencia szerinti paraméterátadás "mellékhatásra" is képes.
<programlisting><![CDATA[
//A prefix ++ operátort kétféleképpen is meghívhatjuk:
++i; //hagyományos, operátor-írásmód
operator++ (i); //C++: a függvényszintaxis is megengedett
//A C++-ban az operátor kulcsszó, ezzel adjuk meg, hogy egy speciális függvényről van szó:
c = a + b; //hagyományos, operátor-írásmód
c = operator + (a, b); //az = operátor-, a + függvényszintaxissal
operator = (c, operator + (a, b)); //függvényszintaxis]]>
</programlisting></para>
    <formalpara>
        <title>C++ sablonok:</title>
        <para>
Olyan osztálysablonok és függvénysablonok, melyek esetében az adott osztály, illetve függvény definiálásakor bizonyos elemeket nem adunk meg, hanem paraméterként kezelünk.
Ezen paraméterek  megadása explicit vagy implicit módon az adott osztálysablon, illetve függvénysablon felhasználásakor történik.
</para>
</formalpara>
<para>
A C++ sablonok a generikus típusok C++ nyelvbeli megfelelői.
Jellemző alkalmazási területük olyan tárolóosztályok (pl. dinamikusan nyújtózkodó tömb, láncolt lista stb.) létrehozása, amelyek tetszőleges típusú elem tárolására használhatók fel.
<programlisting><![CDATA[
//A függvénysablonok legegyszerűbb felhasználási módja az implicit példányosítás:
int n = max(3, 5);
double d = max(2.3, 4.2);
//A fordító a paraméterek típusából kikövetkezteti, milyen típust kell behelyettesíteni a sablonparaméterek helyére, vagyis a paramétereket nem adtuk meg explicit módon.]]>
</programlisting>
Implicit példányosítás esetén egy adott sablonparaméter csak egy típust jelölhet.
A sablonparaméter megadása során a class helyett a typename kulcsszó is használható.
Amennyiben egy adott függvénynek több implementációja létezik, felmerül a kérdés, hogy a függvényhívás során melyik függvény fog meghívódni.
</para>
<para>
Ha létezik olyan közönséges függvény, melynek paraméterei típus szerint pontosan megegyeznek, akkor az adott függvény hívódik meg.
Ha létezik olyan függvénysablon, melynek paraméterei típus szerint pontosan megegyeznek, akkor az adott függvény hívódik meg.
Ha létezik közönséges függvény vagy függvénysablon, mely esetében típuskonverzióval megegyeznek a paraméterek, akkor az adott függvény hívódik meg.
<programlisting><![CDATA[
//Osztálydefinícióból sablondefiníciót a template kulcsszó használatával készíthetünk:
template <class ItemType> class Fifo
{
...
};]]>
</programlisting>
        </para>
    <formalpara>
        <title>A szabványos adatfolyamok:</title>
        <para>
A C++ adatfolyamokban (stream) gondolkodik, amelyek bájtok sorozatát jelentik.
Az adatfolyam típusától függően az istream típusú objektumok csak olvasható, bemeneti adatfolyamokat (input stream) takarnak, míg az ostream osztály példányai csak írható, kimeneti adatfolyamonként (output stream) használhatók.
</para>
</formalpara>
<para>
A rendszerhívások költsége igen nagy, az adatfolyamokat egy bufferrel látják el, amelyeket az adatfolyambuffer osztályok példányai valósítanak meg.
Az adatfolyambufferek összegyűjtik a karaktersorozatokat, és több cout kiírást egy rendszerhívással írnak ki a képernyőre.
Az endl, illetve egy következő cin beolvasás automatikusan kiírja a couthoz tartozó buffereket.
Ha szeretnénk kiüríteni a buffert, akkor a <![CDATA[cout << flush;]]> vagy <![CDATA[cout.flush();]]> megoldásokat alkalmazhatjuk.
</para>
<para>
Az adatfolyam állapotát egy iostate típusú tagváltozó jelzi, amelynek állapotát az alábbi konstansokkal lehet  beállítani: eofbit, failbit, badbit, goodbit.
Ha a failbit be van állítva, az hibát jelent. A badbit komoly, fatális hibát jelent.
Ha az eofbit be van állítva, akkor az adatfolyam elérte az állomány végét.
A goodbit konstans azt jelzi, hogy a fenti hibák közül egy sem lépett fel, vagyis ez nem tekinthető önálló jelzőbitnek.
</para>
<para>
A C++ szabványos könyvtára tartalmaz egy string osztályt, amely szükség szerint változtatja a méretét: ha karaktereket fűzünk hozzá, automatikusan elvégzi a szükséges helyfoglalást.
Ha egy ilyen sztringet szeretnénk beolvasni, természetesen használhatjuk a >> operátort.
Ha olyan stringet szeretnénk beolvasni, amely szóközt is tartalmaz, akkor az <![CDATA[std::getline]]> függvényt használhatjuk.
    </para>
    <formalpara>
        <title>Manipulátorok és formázás:</title>
    <para>
Az adatfolyam-objektumoknak vannak tagfüggvényeik, amelyekkel beállíthatjuk az állapotát, adatokat olvashatunk és írhatunk, valamint egyéb műveleteket végezhetünk az adatfolyamon.
Ugyanakkor az adatfolyamok manipulálásának nem ez az egyedüli módja: használhatunk úgynevezett manipulátorokat.
</para>
</formalpara>
<para>
Az I/O manipulátor egy olyan adatfolyam-módosító speciális objektum, amelyet a szokásos kiviteli (<![CDATA[<<]]>) és bemeneti (<![CDATA[>>]]>) operátorok argumentumaként alkalmazunk az adatfolyamokra.
Az előre definiált manipulátorok az <![CDATA[#include <iomanip>]]> állományban és az std névtérben találhatók.
</para>
<para>
Egy másik gyakran használt manipulátor pl. az endl, amely elhelyez egy sor vége karaktert az adatfolyamban, majd kiüríti a buffert.
Az ends egy sztring vége karaktert helyez el az adatfolyamban.
Vannak olyan manipulátorok, melyeknek van paramétere (pl. setprecision) és vannak, melyeknek nincs (pl. endl).
</para>
<para>
A jelzőbitek olyan bitek, amelyeket beállíthatunk vagy törölhetünk (pl. <![CDATA[ios::fixed]]>).
Előfordulhat, hogy egy tulajdonságot több biten tárolunk, ilyenkor egy olyan bináris számot adunk meg, amit maszknak nevezünk.
A C++ I/O-hoz kapcsolódó jelzőbitek az ios nevű osztályban vannak definiálva.
</para>
<para>
A normál alakos kiírást az <![CDATA[ios::scientific]]> jelzőbittel állíthatjuk be.
Ha két tulajdonságot egyszerre szeretnénk állítani, az <![CDATA[ios::floatfield]]> maszkot használhatjuk.
</para>
    <formalpara>
        <title>Állománykezelés:</title>
<para>
A C++ az állománykezeléshez is adatfolyamokat használ, amelyeket ezúttal az ifstream (bemeneti állomány-adatfolyam), illetve az ofstream (kimeneti állomány-adatfolyam) osztályok reprezentálnak.
A kétirányú adatfolyamot az fstream osztály valósítja meg.
</para>
</formalpara>
<para>
Mivel az objektumorientált konstrukciók lehetővé teszik a konstruktorok és destruktorok használatát, az állományok megnyitását a konstruktorok végzik, lezárását pedig a destruktorok.
Az állomány-adatfolyamosztályok definíciói az fstream fejlécfájlban találhatók az std névtérben.
A megnyitandó állomány nevét a konstruktorban adhatjuk meg, a hibakezelés a már megszokott módon, az adatfolyam-objektum vizsgálatával végezhető.
</para>
<para>
Ha a konstruktor vagy a destruktor nem felel meg nekünk, az adatfolyam-objektumoknak létezik open, illetve close függvényük.
Az istream és ostream adatfolyamok mindegyike megnyitható írásra és olvasásra.
Az értelmezett műveletek azonban az adatfolyamok mögött lévő buffer típusától függenek.
</para>
    <formalpara>
        <title>Típuskonverziók:</title>
        <para>
A C nyelvben az enum és az int típus között oda-vissza létezik implicit konverzió. Ezzel szemben C++-ban, ha enum típusra konvertálunk, ki kell írnunk a típuskonverziót.
Ha egy másik típusról szeretnénk konvertálni a mi osztályunk típusára, a konverziós konstruktor jelent megoldást.
Ha az osztályunkról szeretnénk egy másik típusra konvertálni, akkor a konverziós operátor a megfelelő eszköz.
</para>
</formalpara>
<para>
A C++ "szeletelés kapás" (slicing-on-the-fly) jelensége során az eredeti, konvertált objektum megmarad, mindössze a konverzió során nem másolódik át egy rész, bár az új objektum kétségkívül úgy néz ki, mintha a réginek levágták volna az alját.
Mivel másolókonstruktor mindig van, ez a típusú konverzió szükség esetén automatikusan is végbemegy.
</para>
<para>
A konstans típuskonverzió képes egyedül konstans típust nem konstanssá tenni, illetve volatile típust nem azzá.
Egyéb konverziókra nem alkalmazható.
A dinamikus típuskonverzió az öröklési hierarchián lefelé történő konverziókhoz szükséges.
Az újraértelmező típuskonverzió az implementációfüggő konverziók esetén használható.
        </para>
<formalpara>
    <title>Kivételkezelés:</title>
    <para>
C++-ban a hibás esetek kezelésére használjuk a következő hívási láncot:
<programlisting><![CDATA[
main() -> Wrap() -> Save() -> ValidateAndPrepare() -> DoSave()]]>
</programlisting>
Ha pl. nem sikerült megnyitni a fájlt, vagy érvénytelen az egyik megkapott 
függvényparaméter, és a hibát nem tudjuk helyben kezelni, 
akkor ezt a hívó függvény (Save) számára a visszatérési értékben megadott, 
a hibára jellemző hibakóddal jelezzük.
</para>
</formalpara>
<para>
A kivételkezelés olyan mechanizmus, amely biztosítja, hogy ha hibát észlelünk valahol, akkor a futás a hibakezelő ágon folytatódjon.
<programlisting><![CDATA[
#include <iostream>
using namespace std;

int main()
{
	try
	{
		double szam;
		cout << "Adj meg egy nemnulla számot: " << endl;
		cin >> szam;
		if (szam == 0)
			throw "A szám nem lehet nulla!";
			cout << "A szám reciproka: " << 1/szam << endl;
	}
	catch (const char* kiv)
	{
		cout << "HIBA! A hibaüzenet: " << kiv << endl;
	}
	cout << "Kész." << endl;
}]]>
</programlisting>
A main függvényen belül, a try védett blokkba írtuk be a normál működés kódját, illetve a catch ágba a hibakezelő kódot.
Ha a védett blokkban nem találunk hibát, akkor valamennyi utasítása lefut, illetve a vezérlés a catch ág után folytatódik.
Kiiratásra kerül a megadott szám reciproka és a "Kész." szöveg.
Ha a bemenet érvénytelen, akkor a throw kulcsszóval kivételt dobunk ("A szám nem lehet nulla!").
Az adott catch ág pedig elkapja a dobott kivételt.
</para>
<para>
A verem visszacsévéléséről (stack rewind) beszélünk akkor, amikor egy kivétel dobásától elkapásáig az egyes függvények lokális változói felszabadulnak.
<programlisting><![CDATA[
int main()
{
	try
	{
		f1();
	}
	catch (const char* hibaUzenet)
	{
		cerr << hibaUzenet << endl;
	}
}
void f1()
{
	Fifo fifo;
	f2();
	...
}
void f2()
{
	int i = 1;
	throw "error1";
}]]>
</programlisting>
Először az f2 kivételt dob, majd az i lokális változó felszabadul.
Ezután az f1-ben lefoglalt Fifo fifo objektum felszabadul, meghívódik a destruktor, majd lefut a main-ben a catch blokk.
A kivétel dobása és elkapása között nem dobunk újabb kivételt, mert ennek kezelése nem lehetséges.
</para>
<para>
A kivételek használata az erőforrások menedzselésében komolyabb problémákhoz vezethet. A következő kivételkezelési technika segíthet ezek elkerülésében:
<programlisting><![CDATA[
class UzenetKezelo
{
	public:
		void UzenetFeldolgozas(istream& is)
		{
			Message *pMessage;
			while ((pMessage = readNextMessage(is)) != NULL)
			{
				try
				{
					pMessage -> Process();
					delete pMessage;
				}
				catch (...)
				{
					delete pMessage;
					throw;
				}
			}
		}
	private:
	Message* KovetkezoUzenet(istream& is)
	{ ... }
};]]>
</programlisting>
Az UzenetKezelo egy olyan osztály, ami bemeneti folyamból üzeneteket olvas ki és dolgoz fel.
Az UzenetFeldolgozas addig olvas objektumokat ki, amíg nem tér vissza NULL értékkel.
A KovetkezoUzenet a new operátorral létrehoz egy Message objektumot, a hozzá tartozó adatokat kiolvassa, és visszatér a Message objektumra mutató mutatóval.
</para>
<para>
Az UzenetFeldolgozas a KovetkezoUzenet-nek köszönhetően olyan függvényeket hív, melyek feldolgozzák a beolvasott üzenetet, majd a delete operátorral felszabadítja a Message objektumot.
Amennyiben az üzenet feldolgozása során bármilyen kivétel keletkezik, azt elkapjuk a catch segítségével, majd újradobjuk a kivételt.
</para>
    </section>
    
</chapter>