<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Liskov!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>Liskov-helyettesítés sértése</title>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Liskov/Sertes">https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Liskov/Sertes</link>
        </para>
        
        <para>
            Tanulságok, tapasztalatok, magyarázat...:
            </para>
            
            <para>
Forrás: <link xlink:href="https://reiteristvan.wordpress.com/2011/07/05/s-o-l-i-d-objektum-orientalt-tervezesi-elvek-3-lsp/">
    https://reiteristvan.wordpress.com/2011/07/05/s-o-l-i-d-objektum-orientalt-tervezesi-elvek-3-lsp/</link>
</para>

<para>
Az objektumorientált programozás öt fő tervezési elve közé tartozik az ún. Liskov-helyettesítés.
Ha S osztály T osztály leszármazottja, akkor S szabadon behelyettesíthető minden olyan helyre (pl. változó), ahol T típust várunk.
</para>

<para>
Tegyük fel, hogy a Madar osztály lesz a mi példánkban a T osztály.
Az S osztályaink (T osztály leszármazottjai) a következők: RepuloMadar, Sas, Pingvin.
Két osztály alkotja a P programot az LPS-ben. 
A programban a Madar már nem tud repülni, hiába lesz a leszármazott típusoknak repul metódusa, azt a <![CDATA[Madar& madar]]>-ra úgysem lehet hívni.
Ezzel tehát a Liskov-helyettesítés elvére odafigyeltünk.
</para>
<programlisting language="C++"><![CDATA[
class Madar {

};

class Program {
public:
     void fgv ( Madar &madar ) {
     }
};

class RepuloMadar : public Madar {
public:
     virtual void repul() {};
};

class Sas : public RepuloMadar
{};

class Pingvin : public Madar
{};

int main ( int argc, char **argv )
{
     Program program;
     Madar madar;
     program.fgv ( madar );

     Sas sas;
     program.fgv ( sas );

     Pingvin pingvin;
     program.fgv ( pingvin );

}]]>
</programlisting>

<para>
Ebből a kódcsipetből kiindulva megkezdődhet az elv megsértése.
Továbbra is megmaradt a T osztály, illetve az S osztályok, viszont ezúttal nem a RepuloMadar (S) osztályban jelenik meg a repülés.
Ezúttal tehát így a P programban is tud repülni a madár.
Sérül a Liskov-helyettesítés elve, hiszen ebben a kódban a pingvin repül, ami lehetetlenség.

<programlisting language="C++"><![CDATA[
class Madar {
public:
     virtual void repul() {};
};

class Program {
public:
     void fgv ( Madar &madar ) {
          madar.repul();
     }
};

class Sas : public Madar
{};

class Pingvin : public Madar
{};

int main ( int argc, char **argv )
{
     Program program;
     Madar madar;
     program.fgv ( madar );

     Sas sas;
     program.fgv ( sas );

     Pingvin pingvin;
     program.fgv ( pingvin );

}]]>
    </programlisting>             
    </para>
    </section>        

    <section>
        <title>Szülő-gyerek</title>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Liskov/SzGy">https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Liskov/SzGy</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...:
        </para>
    <para>Tutor: <link xlink:href="https://drive.google.com/file/d/12ahRzjFAYkBWgYpLjjAlWxhHzq6XKFIe/view?fbclid=IwAR03L0uUTpcXfNbAN_C4HYSb1PV7PhHH3Y79K8-gyAWXULJGUu_t_JuzMf0">Kovács Ferencz</link></para>

<para>
Az objektumorientált programozásban azért használjuk az öröklést, mert ezáltal egy létező osztály tulajdonságait alapul véve tudunk új osztályt lérehozni.
Az új osztály (azaz a gyerekosztály) használhatja a szülőosztály tulajdonságait és metódusait, de felülbírálhatja azokat, illetve létre is hozhat újakat.
</para>

<para>
C++-ban:
<programlisting language="C++"><![CDATA[
Szulo& szulo
//referencia
Szulo* szulo
//mutató
Szulo szulo
//objektum]]>
</programlisting>
Csak akkor van dinamikus kötés, ha a viselkedés virtuálisra van deklarálva. Ugyanúgy igaz, hogy ősosztály referencián vagy pointeren keresztül, csak az ős üzenetei küldhetőek.
</para>

<programlisting language="C++"><![CDATA[
#include <iostream>

class Teglalap
{
    public:
        int m_szelesseg;
        int m_magassag;
        
        Teglalap(int szelesseg, int magassag) {
            m_szelesseg = szelesseg;
            m_magassag = magassag;
        }
        
        int getSzelesseg(){
            return m_szelesseg;
        }
        
        int getMagassag(){
            return m_magassag;
        }
};
    
class Negyzet: public Teglalap
{
    public:
        Negyzet(int oldal): Teglalap(oldal, oldal)
        {
            m_szelesseg = oldal;
            m_magassag = oldal;
        }
        
        int getTerulet(){
            return m_szelesseg * m_magassag;
        }
};
    
int main ()
{
    Teglalap* r = new Negyzet(10);
    Negyzet* s = new Negyzet(10);
        
    std::cout << s->getTerulet() << r->getTerulet() << std::endl;
}]]>
</programlisting>

<para>
A fordítás sikertelen lesz, ugyanis az altípus új függvényei nem lesznek elérhetőek.
<programlisting><![CDATA[
$ g++ szgy.cpp -o szgy
szgy.cpp: In function ‘int main()’:
szgy.cpp:42:40: error: ‘class Teglalap’ has no member named ‘getTerulet’
   42 |     std::cout << s->getTerulet() << r->getTerulet() << std::endl;
      |                                        ^~~~~~~~~~]]>
</programlisting>
</para>

<para>
Java-ban:
<programlisting language="Java"><![CDATA[
Szulo szulo = new Gyerek()]]>
</programlisting>
Minden objektum referencia, mindig dinamikus a kötés.
De ezzel nem küldhetjük a gyerekosztály által hozott új üzeneteket.
</para>

<programlisting language="Java"><![CDATA[
class szulo
{
    protected int m_kor;
    protected String m_nev;
    public void setKor(int kor) {
        m_kor = kor;
    }
    
    public void setNev(String nev) {
        m_nev = nev;
    }
    
    public int getNev() {
        return m_kor;
    }
}

class gyerek extends szulo
{
    public String getNev() {
        return m_nev;
    }
}

class szgy
{
    public static void main (String args[])
    {
        szulo s = new gyerek();
        s.setNev("Apa");
        s.setKor(60);
        
        gyerek gy = new gyerek();
        s.setNev("Geza");
        s.setKor(15);
        
        System.out.println(gy.getNev() + " " + s.getNev());
    }
}]]>
</programlisting>

<para>
A Java program ugyan nem csak egy átirat, de fordításnál hasonló hibába ütközünk:
<programlisting><![CDATA[
$ javac szgy.java
szgy.java:20: error: getNev() in gyerek cannot override getNev() in szulo
    public String getNev() {
                  ^
  return type String is not compatible with int
1 error]]>
</programlisting>
</para>

    </section>        
    
    
    <section>
        <title>Anti OO</title>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Liskov/Anti">https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Liskov/Anti</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...:
        </para>
        <para>
Az előző fejezet 'Kódolás from scratch' feladatában a BBP algoritmus Java változatának segítségével számítottuk ki a Pi hexa jegyeit.
Ezúttal a 0. pozíciótól számított 10^6, 10^7 és 10^8 darab jegyét határozzuk meg C, C++, C# és Java nyelveken, majd összehasonlítjuk a kapott futási időket.
</para>

<para>
Ahhoz, hogy a futási időket megkapjuk terminálban, az eredeti kódban a d értékét kell állítanunk, nyelvtől függetlenül.
Ha a 0. pozíciótól számított 10^6 darab jegyet szeretnénk meghatározni, akkor a for ciklusban kezdésképp a d-nek 1000000-t kell beírnunk.

<programlisting language="Java"><![CDATA[
for(int d=1000000; d<1000001; ++d) {
            
            d16Pi = 0.0d;
            
            d16S1t = d16Sj(d, 1);
            d16S4t = d16Sj(d, 4);
            d16S5t = d16Sj(d, 5);
            d16S6t = d16Sj(d, 6);
            
            d16Pi = 4.0d*d16S1t - 2.0d*d16S4t - d16S5t - d16S6t;
            
            d16Pi = d16Pi - Math.floor(d16Pi);
            
            jegy = (int)Math.floor(16.0d*d16Pi);
            
        }
]]>
</programlisting>
</para>

<mediaobject>
<imageobject>
<imagedata fileref="img/liskov_bench1.PNG" format="PNG" scale="100"/>
</imageobject>
</mediaobject>

<mediaobject>
<imageobject>
<imagedata fileref="img/liskov_bench2.PNG" format="PNG" scale="100"/>
</imageobject>
</mediaobject>

<para>
Látható, hogy ennél a "kis" értéknél még - a rendszerünk teljesítményétől függetlenül - rövid idő alatt megtörténik a futtatás.
Nálam szinte egy időben, körülbelül 1.5-1.7 másodpercig tartott a bench program C, C++ és Java átiratának futtatása is.
A C# átirat fordításához és futtatásához azonban <link xlink:href="https://www.onlinegdb.com/online_csharp_compiler">online compiler</link> használatához 
kellett folyamodnom, így az érték kb. 3 másodpercre nőtt.
</para>

<para>
Át is térhetünk a 10^7 darab jegy meghatározásához. Ahhoz, hogy az új értékhez tartozó futási időket kapjuk, a d változóban tárolt nullák számát meg kell növelnünk eggyel.
<programlisting language="Java"><![CDATA[
for(int d=10000000; d<10000001; ++d) {
            
            d16Pi = 0.0d;
            
            d16S1t = d16Sj(d, 1);
            d16S4t = d16Sj(d, 4);
            d16S5t = d16Sj(d, 5);
            d16S6t = d16Sj(d, 6);
            
            d16Pi = 4.0d*d16S1t - 2.0d*d16S4t - d16S5t - d16S6t;
            
            d16Pi = d16Pi - Math.floor(d16Pi);
            
            jegy = (int)Math.floor(16.0d*d16Pi);
            
        }
]]>
</programlisting>
</para>

<para>
Ha ez megvan, akkor az előbb látott módon indulhat a fordítás, majd a futtatás.
Az eredeti értékeinkhez képest most jelentősen több időt vett igénybe a kódok lefutása.
Nálam 3 és fél másodperc helyett ezúttal 18-20 másodpercet vett igénybe a folyamat a Java, C és C++ átiratoknál, míg (az online compiler miatt) a C# átirat 46 másodpercet.
</para>

<mediaobject>
<imageobject>
<imagedata fileref="img/liskov_bench3.PNG" format="PNG" scale="100"/>
</imageobject>
</mediaobject>

<mediaobject>
<imageobject>
<imagedata fileref="img/liskov_bench4.PNG" format="PNG" scale="100"/>
</imageobject>
</mediaobject>

<para>
A 10^8 darab jegy meghatározásához is csak a nullák számán kell változtatni az új értékek megszerzéséhez.
<programlisting language="Java"><![CDATA[
for(int d=100000000; d<100000001; ++d) {
            
            d16Pi = 0.0d;
            
            d16S1t = d16Sj(d, 1);
            d16S4t = d16Sj(d, 4);
            d16S5t = d16Sj(d, 5);
            d16S6t = d16Sj(d, 6);
            
            d16Pi = 4.0d*d16S1t - 2.0d*d16S4t - d16S5t - d16S6t;
            
            d16Pi = d16Pi - Math.floor(d16Pi);
            
            jegy = (int)Math.floor(16.0d*d16Pi);
            
        }
]]>
</programlisting>
</para>

<para>
A korábbi, egy perc alatti értékeimhez képest most a C, C++ és a Java változat körülbelül 3.5 perc alatt futott le.
A C# átirat online compiler használatával több, mint 9.5 perc alatt futott csak le.
</para>

<mediaobject>
<imageobject>
<imagedata fileref="img/liskov_bench5.PNG" format="PNG" scale="100"/>
</imageobject>
</mediaobject>

<mediaobject>
<imageobject>
<imagedata fileref="img/liskov_bench6.PNG" format="PNG" scale="100"/>
</imageobject>
</mediaobject>



    </section>     
        
    
    <section>
        <title>Hello, Android!</title>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Liskov/Android">https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Liskov/Android</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...:
            </para>
            <para>
Az SMNIST for Humans egy Android alkalmazás, mely kutatási célból készült.
Ahhoz, hogy kizárólag a .java források alapján tudjunk apró módosításokat eszközölni, elég módosítani a jelenlegi értékeket.
</para>

<para>
A színvilág módosításához pl. az <filename>SMNISTforHumansExp3/app/src/main/java/hu/blog/bhaxor/smnistforhumansexp3/SMNISTSurfaceView.java</filename> fájlt is használhatjuk.
Ha az RGB paramétereket átírjuk a bgColor-ban, akkor az app háttérszíne módosul.
<programlisting language="Java"><![CDATA[
int[] bgColor =
            {
                    android.graphics.Color.rgb(11, 180, 250),
                    android.graphics.Color.rgb(11, 250, 180)
            };]]>
</programlisting>
</para>

<para>
A képernyőn megjelenő üzeneteket is tudjuk ebben a fileban módosítani, vagy akár kibővíteni új Stringek létrehozásával.
<programlisting language="Java"><![CDATA[
private static String msg1 = "How many dots can you see?";
private static String msg2 = "Touch the appropriate number.";]]>
</programlisting>

<programlisting language="Java"><![CDATA[
static StringBuilder sb = new StringBuilder();
static StringBuilder sb2 = new StringBuilder();

    public static void msg() {
        sb.delete(0, sb.length());
        sb2.delete(0, sb2.length());

        sb.append("ms: (");
        sb.append(decisionTimeLimit);
        sb.append(") ");

        sb2.append("lvl/[...]: (");
        sb2.append(semValueLimit);
        sb2.append(") ");

        float ur = 0;
        for (int i = SEM_VALUE_LIMIT_START; i < NUM_OF_DIGITS; ++i) {

            sb.append(millisecs[i]);
            sb.append(" ");
            if (millisecs[i] != 0) {
                sb2.append(i + 1);
                ur += (((svmeans[i]+1.0)*(i + 1.0)) / millisecs[i]);
                sb2.append("/");
                sb2.append(svmeans[i]);
            }
            else {
                sb2.append(0);
                sb2.append("/");
                sb2.append(0);
            }
            sb2.append(" ");

        }

        sb2.append(" <");
        sb2.append(ur);
        sb2.append(">");

        msg1 = sb.toString();
        msg2 = sb2.toString();]]>
        </programlisting>
</para>

<para>
Többek között a szövegek, felugró üzenetek, szegélyek színét, elhelyezkedését és méretét is tudjuk befolyásolni.
<programlisting language="Java"><![CDATA[
        textPaint.setColor(android.graphics.Color.GRAY);
        textPaint.setStyle(android.graphics.Paint.Style.FILL_AND_STROKE);
        textPaint.setAntiAlias(true);
        textPaint.setTextAlign(android.graphics.Paint.Align.CENTER);
        textPaint.setTextSize(50);

        msgPaint.setColor(android.graphics.Color.GRAY);
        msgPaint.setStyle(android.graphics.Paint.Style.FILL_AND_STROKE);
        msgPaint.setAntiAlias(true);
        msgPaint.setTextAlign(android.graphics.Paint.Align.LEFT);
        msgPaint.setTextSize(40);

        dotPaint.setColor(android.graphics.Color.BLACK);
        dotPaint.setStyle(android.graphics.Paint.Style.FILL_AND_STROKE);
        dotPaint.setAntiAlias(true);
        dotPaint.setTextAlign(android.graphics.Paint.Align.CENTER);
        dotPaint.setTextSize(50);

        borderPaint.setStrokeWidth(2);
        borderPaint.setColor(android.graphics.Color.GRAY);
        fillPaint.setStyle(android.graphics.Paint.Style.FILL);
        fillPaint.setColor(android.graphics.Color.YELLOW);]]>
</programlisting>
</para>

<para>
Az <filename>SMNISTforHumansExp3/app/src/main/res/values/strings.xml</filename> tartalmazza az app nevét, természetesen ezt is lehet módosítani.
<programlisting><![CDATA[
<resources>
    <string name="app_name">SMNISTforHumansExp3, v0.0.3</string>
</resources>]]>
</programlisting>
Ebben az xml fájlban tárolódnak nemcsak a további lehetséges string nevek, de pl. a status állapotokhoz tartozó stringek is (a színmódosítás itt is megvalósítható lenne).
</para>
    </section>                     
                 
    
    <section>
        <title>Ciklomatikus komplexitás</title>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Liskov/Ciklomatikus">https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Liskov/Ciklomatikus</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...:
        </para>
<para>
Források: 
<link xlink:href="https://www.tankonyvtar.hu/en/tartalom/tamop425/0046_szoftverteszteles/ch04s04.html">Tankönyvtár</link>,
<link xlink:href="https://www.guru99.com/cyclomatic-complexity.html">Guru99</link>
</para>

<para>
Gráfelméletben a ciklomatikus komplexitás a vezérlési gráfban megtalálható független utak maximális számát jelenti.
Két út független, ha mindkettőben létezik olyan pont vagy él, amelyik nem eleme a másik útnak.
Képlete: M = E - N + 2P, ahol E a gráf éleinek száma, N a gráfban lévő csúcsok száma és P az összefüggő komponensek száma.
</para>

<para>
A ciklomatikus komplexitás egy metrika is, amely forráskód alapján, számértékben határozza meg a szoftverünk komplexitását.
A korábban megírt programok függvényeinek vizsgálatára én az Eclipse C++ 2018. szeptemberi változatán belül a 'metriculator' nevű plugint használtam.
</para>

<mediaobject>
<imageobject>
<imagedata fileref="img/cc_1.PNG" format="PNG" scale="100"/>
</imageobject>
</mediaobject>

<para>
Elsőnek egy egyszerűbb programmal próbálkoztam, mégpedig a Liskov-elvet betartó C++ kóddal.
A 'metriculator' a ciklomatikus komplexitást a McCabe oszlopban írja, ugyanis Thomas J. McCabe volt az, aki publikálta a metrikát.
Mivel a kapott érték 1, ezért elmondható, hogy a program nagyon egyszerű, kevés kockázattal.
</para>

<mediaobject>
<imageobject>
<imagedata fileref="img/cc_2.PNG" format="PNG" scale="100"/>
</imageobject>
</mediaobject>

<para>
Ezután az előző heti polártranszformációs normális generátor C++ változatát elemeztem ki a plugin segítségével.
Ezt is egyszerű programnak tekintette, de a komplexitása megnőtt az első példához képest.
</para>

<mediaobject>
<imageobject>
<imagedata fileref="img/cc_3.PNG" format="PNG" scale="100"/>
</imageobject>
</mediaobject>

<para>
Végezetül pedig az általam legnehezebbnek ítélt feladatot néztem meg a tavalyi csokorból: az LZWBinFa C++ átiratának mozgató szemantikás változatát.
A kapott eredmény erősen hasonlít az én elképzeléseimhez, hiszen a ciklomatikus komplexitás elvének megfelelően a program bonyolult, magas kockázattal.
</para>

    </section>                  
                    

</chapter>                
