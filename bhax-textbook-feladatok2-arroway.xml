<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Arroway!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>OO szemlélet</title>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Arroway/OO">https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Arroway/OO</link>                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...:
        </para>
        <para>
Az objektumorientált programozás (OOP) olyan módszert nyújt a programozók számára, 
amely lehetővé teszi a programok bonyolultságának csökkentését, a megbízhatóság és a hatékonyság növelését.
Objektumokból, tehát a valós világ elemeinek programozási modelljeiből építi fel a programot.
A C++ és a Java is objektumorientált programozási nyelv.
</para>
<para>
Remek OO bevezető példa lehet egy polártranszformációs normális generátor megírása C++-ban és Javaban. 
A módosított polármódszeres algoritmus matematikai háttere a feladatmegoldás szempontjából lényegtelen, 
fontos viszont az a tény, hogy egy számítási lépés két normális eloszlású számot állít elő, 
tehát elég az előző lépés másik számát visszaadnunk.
</para>
<para>
A C++ megoldásban használjuk a scope operátort, amely lehetővé teszi, hogy hozzáférjünk az std névtérhez.
Ennek köszönhetően tudunk random számot visszaadni, gyököt vonni, illetve logaritmizálni.
Kiiratásnál és sortörésnél is hasznos.
A nincsTarolt változóval jelöljük azt, hogy páros vagy páratlan lépésben hívtuk-e meg a <function>kovetkezo()</function> függvényt. 
Ha értéke igaz, akkor tárolt lebegőpontos változóban van a visszaadandó szám.

<programlisting language="C++"><![CDATA[
$ more polargen.cpp
#include "polargen.h"

double PolarGen::kovetkezo()
{
	if (nincsTarolt)
	{
		double u1, u2, v1, v2, w;
		do
		{
			u1 = std::rand() / (RAND_MAX + 1.0);
			u2 = std::rand() / (RAND_MAX + 1.0);
			v1 = 2*u1-1;
			v2 = 2*u2-1;
			w = v1*v1+v2*v2;
		}
		while (w > 1);
		
		double r = std::sqrt ((-2*std::log (w)) / w);
		tarolt = r*v2;
		nincsTarolt = !nincsTarolt;
		return r*v1;
	}
	else
	{
		nincsTarolt = !nincsTarolt;
		return tarolt;
	}
}

$ more polargenteszt.cpp
#include <iostream>
#include "polargen.h"

int main(int argc, char **argv)
{
	PolarGen pg;
	for (int i = 0; i < 10; ++i)
		std::cout << pg.kovetkezo () << std::endl;
	return 0;
}]]>
</programlisting>            

A C++ megoldásunk fordításához és futtatásához szükségünk lesz a CMake nevű szoftverre, amely megkönnyíti a több fájlból álló programok véglegesítését.
Fontos, hogy a kódok azonos mappában szerepeljenek!
Ha megvolt a telepítés, akkor meg kell írnunk a saját <filename>CMakeLists.txt</filename> szövegfájlunkat, hogy a szoftver felismerje a fordítási és futtatási paramétereket.
<programlisting><![CDATA[
//A terminálban leadott parancsok:
$ sudo apt install cmake
$ more CMakeLists.txt
cmake_minimum_required (VERSION 2.6)
project (polargen)
$ cmake .
-- The C compiler identification is GNU 7.3.0
-- The CXX compiler identification is GNU 7.3.0
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Configuring done
-- Generating done
-- Build files have been written to: /polar
$ make
Scanning dependencies of target polar
[50%] Building CXX object src/CMakeFiles/polar.dir/polargen.cpp.o
[100%] Building CXX object src/CMakeFiles/polar.dir/polargenteszt.cpp.o
Linking CXX executable polar
[100%] Built target polar
$ src/polar
0.681487
0.791811
-0.452172
0.305843
-1.1143
-2.67287
0.923875
0.690822
-0.816956
-0.422164]]>
</programlisting>
A Java változatban természetesen el kell hagynunk a C++ kódban inkludált könyvtárakat.
A <filename>polargen.h</filename> fájlban private minősítést is használtunk, ezt is elhagyhatjuk.
Ezúttal nincsenek scope operátorok sem, a matematikai függvényeket a Java Math package segítségével érjük el.
<programlisting language="Java"><![CDATA[
$ more PolárGenerátor.java
public class PolárGenerátor {
	boolean nincsTárolt = true;
	double tárolt;
	
	public PolárGenerátor() {
		nincsTárolt = true;
	}
	
	public double következő() {
		if (nincsTárolt) {
			double u1, u2, v1, v2, w;
			do {
				u1 = Math.random();
				u2 = Math.random();
				v1 = 2*u1-1;
				v2 = 2*u2-1;
				w = v1*v1+v2*v2;
			} while (w > 1);
			double r = Math.sqrt((-2*Math.log(w)) / w);
			tárolt = r*v2;
			nincsTárolt = !nincsTárolt;
			return r*v1;
		} else {
			nincsTárolt = !nincsTárolt;
			return tárolt;
		}
	}
	
	public static void main(String[] arps) {
		PolárGenerátor g = new PolárGenerátor();
		for (int i = 0; i < 10; ++i) {
			System.out.println(g.következő());
			}
		}
	}]]>
	</programlisting>
	A program megírása után a JDK (Java Development Kit) <filename>src.zip</filename> állományában a <filename>java/util/Random.java</filename> forrásban látható, 
hogy hasonlóan oldották meg a feladatot a Sun programozói is.
Érdemes itt megfigyelni a <function>nextGaussian()</function> függvény törzsét és a kapcsolódó haveNextNextGaussian és nextNextGaussian példánytagokat.
        <programlisting><![CDATA[
//A terminálban leadott parancsok:
$ javac PolárGenerátor.java
$ java PolárGenerátor
0.06639699734310518
-0.716748177803525
1.8730199649634127
-0.1442162714486144
0.5602127975531246
-0.061948264444216986
-1.0528782027170556
1.0829468865590293
0.4199916511872636
0.9242852828700335]]>
</programlisting>
        </para>                

    </section>        

    <section>
        <title>Homokozó</title>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Arroway/Homokozo">https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Arroway/Homokozo</link>              
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...:
        </para>
        <para>Az LZWBinFa osztályban absztraháljuk az LZW algoritmus bináris fa építését. 
<programlisting language="Java"><![CDATA[
public class LZWBinFa {

  public LZWBinFa() {

    fa = gyoker;

  }]]>
</programlisting>
</para>

<para>Ezúttal nem terheljük túl a <![CDATA[<<]]> operátort.
Ha az érték 0, akkor megnézzük, hogy van-e 0-nak nulla cimkéjű gyereke, ebben az esetben továbbmegyünk.
Amennyiben nincs, úgy létrehozunk egy újat, és az új nullás gyermeket beletesszük a fába.
Ezt követően vizsgáljuk az 1 értéket: ha van egy címkéjű gyereke, akkor továbbmegyünk, ellenkező esetben pedig létrehozunk egy újat és beletesszük a fába.
<programlisting language="Java"><![CDATA[    
  public void egyBitFeldolg(char b) {
    
    if (b == '0') {

      if (fa.nullasGyermek() == null)
      {
        Csomopont uj = new Csomopont('0');
        fa.ujNullasGyermek(uj);
        fa = gyoker;
      } else
      {
        fa = fa.nullasGyermek();
      }
    }
    else {
      if (fa.egyesGyermek() == null) {
        Csomopont uj = new Csomopont('1');
        fa.ujEgyesGyermek(uj);
        fa = gyoker;
      } else {
        fa = fa.egyesGyermek();
      }
    }
  }]]>
</programlisting>
</para>

<para>A fa kiiratásához a kiir rekurzív függvényt fogjuk használni.
A <![CDATA[<<]]> operátor felüldefiniálása az output streamen ezúttal kimarad.
A Java átiratunkban a PrintWriter class-t vesszük igénybe.
<programlisting language="Java"><![CDATA[
  public void kiir() {
    melyseg = 0;
    kiir(gyoker, new java.io.PrintWriter(System.out));

  }
  
  public void kiir(java.io.PrintWriter os) {
    melyseg = 0;
    kiir(gyoker, os);
  }]]>
</programlisting>
</para>

<para>
A két gyermekre mutató mutatót nullra állítjuk, C++-ban 0-t, most NULL-t írunk.
Az ezutáni függvények visszaadják az aktuális csomópont jobb és bal gyermekét. 
A metódusok pedig arra szolgálnak, hogy az aktuális csomópont aktuális gyerekeit ráállítsák az új csomópontokra. 
Végül létrehozzuk a privát változókat, mutatókat és a másoló konstruktort, amit letiltunk.
<programlisting language="Java"><![CDATA[
  class Csomopont {

    public Csomopont(char betu) {
      this.betu = betu;
      balNulla = null;
      jobbEgy = null;
    }
    ;
    
    public Csomopont nullasGyermek() {
      return balNulla;
    }

    public Csomopont egyesGyermek() {
      return jobbEgy;
    }

    public void ujNullasGyermek(Csomopont gy) {
      balNulla = gy;
    }

    public void ujEgyesGyermek(Csomopont gy) {
      jobbEgy = gy;
    }

    public char getBetu() {
      return betu;
    }

    private char betu;
    private Csomopont balNulla = null;
    private Csomopont jobbEgy = null;
  };

  private Csomopont fa = null;
  private int melyseg, atlagosszeg, atlagdb;
  private double szorasosszeg;]]>
</programlisting>
</para>

<para>A kiir függvény kap egy csomópont elemet, majd egy output streamet, amibe írni kell.
Ha még nem értünk le a fának az aljára, akkor inorder bejárással megtörténik az egyes ág kiiratása, egészen a fa mélyéig.
Kiirjuk önmagunkat, majd kiírjuk a nullás ágat is.
<programlisting language="Java"><![CDATA[
  public void kiir(Csomopont elem, java.io.PrintWriter os) {
    if (elem != null) {
      ++melyseg;
      kiir(elem.egyesGyermek(), os);
      for (int i = 0; i < melyseg; ++i) {
        os.print("---");
      }
      os.print(elem.getBetu());
      os.print("(");
      os.print(melyseg - 1);
      os.println(")");
      kiir(elem.nullasGyermek(), os);
      --melyseg;
    }
  }]]>
	</programlisting>
	</para>
	
<para>Kiszámítjuk a fa mélységét, átlagát és szórását.
Ha a gyerek NULL, akkor levélnél vagyunk. 
Ha nem, akkor végigmegyünk a fán, és visszaadjuk a legmélyebb elemet, így kapjuk meg a fa mélységét (depth).
Átlagszámításnál elosztjuk az elemek összegét az elemszámmal (avg).
Szórásszámításnál pedig a korábban kiszámított mélységet és átlagot is elővesszük (var).
<programlisting language="Java"><![CDATA[
protected Csomopont gyoker = new Csomopont('/');
  int maxMelyseg;
  double atlag, szoras;
  
  public int getMelyseg() {
    melyseg = maxMelyseg = 0;
    rmelyseg(gyoker);
    return maxMelyseg - 1;
  }

  public double getAtlag() {
    melyseg = atlagosszeg = atlagdb = 0;
    ratlag(gyoker);
    atlag = ((double) atlagosszeg) / atlagdb;
    return atlag;
  }

  public double getSzoras() {
    atlag = getAtlag();
    szorasosszeg = 0.0;
    melyseg = atlagdb = 0;

    rszoras(gyoker);

    if (atlagdb - 1 > 0) {
      szoras = Math.sqrt(szorasosszeg / (atlagdb - 1));
    } else {
      szoras = Math.sqrt(szorasosszeg);
    }

    return szoras;
  }

  public void rmelyseg(Csomopont elem) {
    if (elem != null) {
      ++melyseg;
      if (melyseg > maxMelyseg) {
        maxMelyseg = melyseg;
      }
      rmelyseg(elem.egyesGyermek());
      rmelyseg(elem.nullasGyermek());
      --melyseg;
    }
  }

  public void ratlag(Csomopont elem) {
    if (elem != null) {
      ++melyseg;
      ratlag(elem.egyesGyermek());
      ratlag(elem.nullasGyermek());
      --melyseg;
      if (elem.egyesGyermek() == null && elem.nullasGyermek() == null) {
        ++atlagdb;
        atlagosszeg += melyseg;
      }
    }
  }

  public void rszoras(Csomopont elem) {
    if (elem != null) {
      ++melyseg;
      rszoras(elem.egyesGyermek());
      rszoras(elem.nullasGyermek());
      --melyseg;
      if (elem.egyesGyermek() == null && elem.nullasGyermek() == null) {
        ++atlagdb;
        szorasosszeg += ((melyseg - atlag) * (melyseg - atlag));
      }
    }
  }]]>
</programlisting>
</para>

<para>A bemenetet binárisan olvassuk, de a kimenő fájlt már karakteresen írjuk.
A kiírás szerint ./lzwtree in_file -o out_file alakra kell mennie (<function>usage</function> függvényben iratjuk ki),
ez 4 db argumentum. Ha nem annyit kapott a program, akkor értesítjük az operációs rendszert.
A main függvényben tehát először ellenőrizzük, hogy helyes bemenetet kaptunk parancssorból, majd létrehozzuk a binFa objektumot és a b változóba olvassuk be a bejövő fájl bájtjait. 
 </para>
 <para>Ezután következik az adatok beolvasása fájlból, amit binárisan olvasunk be, majd for ciklussal megnézzük egyenként a b-ben lévő bájt bitjeit. 
Ha végigmegyünk a biteken és végig nullát kapunk (a végét leszámítva, ami lehet 0 vagy 1 is), akkor aszerint tesszük a fába az '1' vagy '0' betűt. 
<programlisting language="Java"><![CDATA[
public static void usage() {
    System.out.println("Usage: lzwtree in_file -o out_file");
  }

  public static void main(String args[]) {

    if (args.length != 3) {
      usage();
      System.exit(-1);
    }

    String inFile = args[0];

    if (!"-o".equals(args[1])) {
      usage();
      System.exit(-1);
    }

    try {

      java.io.FileInputStream beFile =
              new java.io.FileInputStream(new java.io.File(args[0]));
      java.io.PrintWriter kiFile =
              new java.io.PrintWriter(
              new java.io.BufferedWriter(
              new java.io.FileWriter(args[2])));

      byte[] b = new byte[1];
      LZWBinFa binFa = new LZWBinFa();

      while (beFile.read(b) != -1) {
        if (b[0] == 0x0a) {
          break;
        }
      }
      
      boolean kommentben = false;

      while (beFile.read(b) != -1) {

        if (b[0] == 0x3e) {			
          kommentben = true;
          continue;
        }

        if (b[0] == 0x0a) {			
          kommentben = false;
          continue;
        }

        if (kommentben) {
          continue;
        }

        if (b[0] == 0x4e)
        {
          continue;
        }

        for (int i = 0; i < 8; ++i) {
          if ((b[0] & 0x80) != 0)
          {
            binFa.egyBitFeldolg('1');
          } else
          {
            binFa.egyBitFeldolg('0');
          }
          b[0] <<= 1;
        }

      }

      binFa.kiir(kiFile);

      kiFile.println("depth = " + binFa.getMelyseg());
      kiFile.println("mean = " + binFa.getAtlag());
      kiFile.println("var = " + binFa.getSzoras());

      kiFile.close();
      beFile.close();

    } catch (java.io.FileNotFoundException fnfException) {
      fnfException.printStackTrace();
    } catch (java.io.IOException ioException) {
      ioException.printStackTrace();
    }

  }
}]]>
</programlisting>
</para>

<para>Amennyiben lezajlott a fordítás, és megadtuk helyesen a 4 argumentumot, megkapjuk a kirajzolt bináris fát, illetve annak magasságát, szórását és átlagát:
<programlisting language="Java"><![CDATA[
$ javac LZWBinFa.java
$ java LZWBinFa bin.txt -o out.txt
---------1(2)
------------0(3)
------------------1(5)
---------------0(4)
------1(1)
------------1(3)
---------0(2)
------------------1(5)
---------------------0(6)
---------------1(4)
------------------0(5)
------------0(3)
---------------0(4)
------------------0(5)
---/(0)
------------1(3)
------------------1(5)
---------------0(4)
------------------0(5)
---------1(2)
------------0(3)
------------------1(5)
---------------0(4)
------------------0(5)
------0(1)
---------------1(4)
---------------------1(6)
---------------------------1(8)
------------------------0(7)
------------------0(5)
------------1(3)
---------------0(4)
---------0(2)
---------------1(4)
------------0(3)
------------------1(5)
---------------0(4)
depth = 8
mean = 5.0
var = 1.1547005383792515]]>
</programlisting>
        </para>
    </section>        
    
    
    <section>
        <title>"Gagyi"</title>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Arroway/Gagyi">https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Arroway/Gagyi</link>              
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...:
        </para>
        <para>
A <![CDATA["while (x <= t && t >= x && t != x)"]]> tesztkérdéstípus lényege, hogy végtelen ciklust objektum által hordozott érték, vagy objektum referenciája esetén kapunk.
</para>
<para>
Az első Java tesztprogramban x egy int típusú változó, ami az 5 értéket tárolja, t pedig egy olyan változó, amiben x - 0 kerül tárolásra. 
Ez azt jelenti, hogy mivel 0-t vontunk ki, ezért megegyezik a két változóban tárolt érték.
Kiiratjuk a két értéket, majd beleírjuk a kódba a while ciklust.
Futtatáskor látjuk azt, hogy végtelen ciklust indítottunk, illetve hogy mindkét alkalommal az 5 érték került ki a képernyőre.

<programlisting language="Java"><![CDATA[
$ more Gagyi.java
public class Gagyi
{
    public static void main (String[]args)
    {
        Integer x = new Integer (5);
        Integer t = new Integer (x - 0);
        System.out.println (x);
        System.out.println (t);
        while (x <= t && x >= t && t != x);
    }
}
$ javac Gagyi.java
$ java Gagyi
5
5
]]>
</programlisting>
</para>
<para>
A második tesztprogramban kijelentjük, hogy -129 lesz az az érték, ami a két változóba kerül. 
Végtelen ciklust kapunk, ugyanis a <filename>java/lang/Integer.java</filename> forrásból megtudhatjuk, hogy az <![CDATA["if (i >= IntegerCache.low && i <= IntegerCache.high)"]]> 
feltétel nem teljesül (i-ben -129 van), ezért új integert fog visszadobni, két különböző című objektumunk lesz.

<programlisting language="Java"><![CDATA[
$ more Gagyi2.java
public class Gagyi2
{
    public static void main (String[]args)
    {
        Integer x = -129;
        Integer t = -129;
        System.out.println (x);
        System.out.println (t);
        while (x <= t && x >= t && t != x);
    }
}
$ javac Gagyi2.java
$ java Gagyi2
-129
-129
]]>
</programlisting>
</para>
<para>
Az utolsó programban -128 a megadott érték, ami az integerCache tartomány része, tehát nem kapunk végtelen ciklust. 
Ugyanarra a számra ugyanazt az objektumot kapjuk, tehát a két memóriacím is egyenlő lesz.

<programlisting language="Java"><![CDATA[
$ more Gagyi3.java
public class Gagyi3
{
    public static void main (String[]args)
    {
        Integer x = -128;
        Integer t = -128;
        System.out.println (x);
        System.out.println (t);
        while (x <= t && x >= t && t != x);
    }
}
$ javac Gagyi3.java
$ java Gagyi3
-128
-128]]>
</programlisting>
        </para>
    </section>     
        
    
    <section>
        <title>Yoda</title>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Arroway/Yoda">https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Arroway/Yoda</link>              
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...:
            </para>
            <para>
            Tutor: <link xlink:href="https://drive.google.com/file/d/12ahRzjFAYkBWgYpLjjAlWxhHzq6XKFIe/view?fbclid=IwAR03L0uUTpcXfNbAN_C4HYSb1PV7PhHH3Y79K8-gyAWXULJGUu_t_JuzMf0">Kovács Ferencz</link>
</para>
<para>
A Yoda conditions a szakzsargonban egy olyan programozási stílus, 
melyben a kifejezés sorrendje fel van cserélve. 
Ez azt jelenti, hogy ilyenkor a konstans a kifejezés bal oldalára kerül.
A terminológia természetesen a Star Wars ikonikus karakterének fogalmazási készségeire utal.
</para>

<para>
A Yoda conditions-t a null pointerrel kapcsolatos hibák elkerülésére használják.
Nekünk viszont most olyan programot kell írni Java-ban, ami leáll amennyiben nem követjük a Yoda conditions szabályait.
</para>

<para>
Ehhez felveszünk egy String típusú változót, értékét pedig null-ra állítjuk.
Mivel a yodaString egy null pointer, ezért a "nem null" szöveg nem kerül kiiratásra.
<programlisting language="Java"><![CDATA[
$ more Yoda.java
public class Yoda
{
    public static void main (String[] args)
    {
        String yodaString = null;
        if (yodaString.equals("barmi ami nem null")) {
            System.out.println("nem null");
        }
    }
}
$ javac Yoda.java
$ java Yoda
Exception in thread "main" java.lang.NullPointerException
        at Yoda.main(Yoda.java:6)]]>
</programlisting>
        </para>
    </section>                     
                 
    
    <section>
        <title>Kódolás from scratch</title>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Arroway/Scratch">https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Arroway/Scratch</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...:
        </para>
        <para>
A BBP (Bailey-Borwein-Plouffe) algoritmus a Pi hexa jegyeit segít meghatározni.
A feladat ennek átültetése <link xlink:href="https://www.davidhbailey.com//dhbpapers/bbp-alg.pdf">David H. Bailey 2006-os írása</link> alapján Java nyelvre.
Az algoritmus a következő:
<mediaobject>
<imageobject>
<imagedata fileref="img/bbp.PNG" format="PNG" scale="100"/>
</imageobject>
</mediaobject>
</para>

<para>
Létrehozunk a BBP algoritmust a Pi-hez alkalmazó objektumot (PiBBP).
A Pi hexa kifejtésében a d+1. hexa jegytől számoljuk a hexa jegyeket.
Az algoritmus alapján először a <![CDATA[{16^d Pi} = {4*{16^d S1} - 2*{16^d S4} - {16^d S5} - {16^d S6}}]]>
 részt számítjuk ki, a {} a törtrészt jelöli.
<programlisting language="Java"><![CDATA[
public class PiBBP {

    public PiBBP(int d) {
        
        double d16Pi = 0.0d;
        
        double d16S1t = d16Sj(d, 1);
        double d16S4t = d16Sj(d, 4);
        double d16S5t = d16Sj(d, 5);
        double d16S6t = d16Sj(d, 6);
        
        d16Pi = 4.0d*d16S1t - 2.0d*d16S4t - d16S5t - d16S6t;
        
        d16Pi = d16Pi - StrictMath.floor(d16Pi);
        
        StringBuffer sb = new StringBuffer();
        
        Character hexaJegyek[] = {'A', 'B', 'C', 'D', 'E', 'F'};
        
        while(d16Pi != 0.0d) {
            
            int jegy = (int)StrictMath.floor(16.0d*d16Pi);
            
            if(jegy<10)
                sb.append(jegy);
            else
                sb.append(hexaJegyek[jegy-10]);
            
            d16Pi = (16.0d*d16Pi) - StrictMath.floor(16.0d*d16Pi);
        }
        
        d16PiHexaJegyek = sb.toString();
    }]]>
</programlisting>
</para>

<para>
Következhet ezután a  {16^d Sj} részlet kiszámítása.
A d paraméter segítségével továbbra is a d+1. hexa jegytől számolhatjuk a hexa jegyeket.
A j paraméter lesz Sj indexe.
<programlisting language="Java"><![CDATA[
public double d16Sj(int d, int j) {
        
        double d16Sj = 0.0d;
        
        for(int k=0; k<=d; ++k)
            d16Sj += (double)n16modk(d-k, 8*k + j) / (double)(8*k + j);
        
        return d16Sj - StrictMath.floor(d16Sj);
    }]]>
</programlisting>
</para>

<para>
A 16^n mod k kiszámításához a bináris hatványozást vesszük igénybe.
A két paraméter közül n a hatványkitevőt, k pedig a modulust jelöli.
<programlisting language="Java"><![CDATA[
public long n16modk(int n, int k) {
        
        int t = 1;
        while(t <= n)
            t *= 2;
        
        long r = 1;
        
        while(true) {
            
            if(n >= t) {
                r = (16*r) % k;
                n = n - t;
            }
            
            t = t/2;
            
            if(t < 1)
                break;
            
            r = (r*r) % k;
            
        }
        
        return r;
    }]]>
</programlisting>
</para>

<para>
A main() függvényben példányosítunk egy BBP algoritmust implementáló objektumot.
Mivel a jelenlegi programban d = 1000000, ezért most a Pi hexadecimális kifejtése a 1000001. hexa jegytől kerül kiiratásra.
Fordítást és futtatást követően ki is jön az eredmény: 6C65E5308.
<programlisting language="Java"><![CDATA[
public String toString() {
        
        return d16PiHexaJegyek;
    }
    
    public static void main(String args[]) {        
        System.out.print(new PiBBP(1000000));
    }
}]]>
</programlisting>
</para>

<para>
A main() függvény módosításával természetesen több jegy pontosságot érhetünk el.
<programlisting language="Java"><![CDATA[
public static void main(String args[]) {
        
    for(int i=1000000; i<1001000; i+=2) {
        PiBBP piBBP = new PiBBP(i);
        System.out.print(piBBP.toString().charAt(0));
        System.out.print(piBBP.toString().charAt(1));            
    }        
}
$ javac PiBBP2.java
$ java PiBBP2
6C65E52CB459350050E4BB178F4C67A0FCF7BF27206290FBE70F93B828CD939C475C728F2FD
B0CB923CF52C40D631D4DB2E98340AA25A6F07DB685C0A9C04F3F6E667CFD6E1764C83ECA94
E79661FC180E6AEF581987E79E13278712CB01255E8CE4D9E048F782D756370548FB0778323
CF2074C2716D121639F1DD5A31EF6C242676B3783AD528852CCA52A9B4F999C526B0750859A
EEC9CE6635B30996A210CD419D5FD47A4E7AAF906E26A4CCF99A2E493BBB5E7D5E0B94F1519
6DA8CD1A0C57FE03A629B2D5842317C173D163EA8717B46930EE0FE82FEC4B01016F155FB44
6AA6958EAD9265EC0C914CB84755DD1BCE5100C23804D67A787BEC57CD7D8E190B3F55E3D25
58927215504F141AC8B0BA836F7781E19664EFA8B22BEB3816A70F7210E4784A1F377623612
86448CD051BCE3A4CE156D70CDBA256C1A36C38648633C8F13A53405795635084A2DEAF3B90
66BC3863BB07447DDDBDE5644034A6893E3E1CFDB369631BAA4240D93F17F667F7C51ABF076
F7C1BB35DECC240153F4817A579CBD1DAC895E8555929D1ADA3C787A0BF2881BBC44C4BE505
E91FE5A28B9BA47D4845B7639239AD71D8B63BF9D23B2CC88C9D39C033B0482F5F801D778BB
B734EA8B1BE878D129514BFA5C4A6D60E80CF4B14A2A5673992B1839723054BD44F767B0324
5F2873973EF6D84B2B96EFC9A]]>
</programlisting>
</para>
    </section>                  
                    

</chapter>                
