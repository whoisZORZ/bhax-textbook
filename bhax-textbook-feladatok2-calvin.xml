<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Calvin!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

<section>
        <title>MNIST</title>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Calvin/MNIST">https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Calvin/MNIST</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...:
        </para>
        <para>
Forrás: <link xlink:href="http://biointelligence.hu/pdf/tf_bkp.pdf">Dr. Búzáné dr. Kis Piroska - Ismerkedés a TensorFlow rendszerrel</link>
                </para>
            <para>
A TensorFlow egy szoftverkönyvtár, gépi tanulási algoritmusok leírására és végrehajtására.
Roppant flexibilis, nagyon széles körű algoritmusok megvalósítására alkalmas, például a beszédfelismerésben, a robotikában, az információ kinyerésben, a számítógépek
elleni támadások felderítésében, és az agykutatásban.
</para>
<para>
A TensorFlow számítást egy irányított gráf írja le. Az adatáramlás a gráf élei mentén
történik. A gráfban mindegyik csúcs egy műveletet reprezentálhat és
mindegyik csúcsnak lehet nulla vagy több inputja.
A gráf normál élei mentén áramló értékek tenzorok, tetszőleges dimenziójú vektorok.
        </para>
        <para>
            A feladatban a TensorFlow segítségével készítünk fel egy modellt kézírású számjegyek felismerésére.
            Ehhez az MNIST adatállományt is felhasználjuk, ami kézírással írt számjegyek képeit tartalmazza.
        </para>
        <para>
            A Softmax egy olyan függvény, ami valószínűségeloszlást ad meg.
            Egy x inputhoz kiszámítja az egyes osztályokba tartozás súlyait, azután megadja az osztályokba tartozási valószínűségeket.
            A következő képletben W a súlyokat jelenti, b pedig a torzítási (bias) érték:
            <![CDATA[y=softmax(Wx + b)]]>.
        </para>
        <para>
A TensorFlow telepítését a Python programozási nyelv pip package managerével végeztem el.
Első lépésként a Python fejlesztői környezetét kell ehhez telepíteni (a MatPlotLib könyvtárral együtt), amely Ubuntu esetén a következő parancsok beírását jelenti:
<programlisting><![CDATA[
$ sudo apt update
$ sudo apt install python3-dev python3-pip
$ sudo apt-get install python3-matplotlib
$ sudo pip3 install -U virtualenv]]>
</programlisting>
Ezután következhet a Python virtuális környezetének létrehozása, majd a TensorFlow pip package telepítése:
<programlisting><![CDATA[
$ virtualenv --system-site-packages -p python3
$ source ./venv/bin/activate
(venv) $ pip install --upgrade pip
(venv) $ pip install --upgrade tensorflow
(venv) $ python -c "import tensorflow as tf; print(tf.reduce_sum(tf.random.normal([1000, 1000])))"
(venv) $ deactivate]]>
</programlisting>
</para>
<para>
Az <filename>mnist_softmax_UDPROG61.py</filename> fájl segítségével tehát a 28x28 pixeles png képeken lévő, kézzel rajzolt számjegyek felismerésére tanítjuk a gépi modellt.
A használat előtt importálnunk kell a TensorFlow-t, illetve a korábban már említett MatPlotLib könyvtárat.
A modell létrehozásához definiáljuk x és y változókat. A modellünkhöz szükség lesz súlyokra és bias értékekre is (W és b változókban tároljuk ezeket).
</para>
<para>
A keresztentrópia implementálásához szükségünk van egy y_ placeholderre is a helyes válasz bevitelére.
A tanítás során a hiba csökkentésére használhatjuk a gradiens módszeren alapuló
optimalizáló eljárást.
Ezután a modellünket interaktív session-be tehetjük.
</para>
<programlisting language="python"><![CDATA[
import argparse

from tensorflow.examples.tutorials.mnist import input_data

import tensorflow as tf

import matplotlib.pyplot

FLAGS = None

def readimg():
    file = tf.read_file("sajat8as.png")
    img = tf.image.decode_png(file, 1)
    return img

def main(_):
  mnist = input_data.read_data_sets(FLAGS.data_dir, one_hot=True)

  x = tf.placeholder(tf.float32, [None, 784])
  W = tf.Variable(tf.zeros([784, 10]))
  b = tf.Variable(tf.zeros([10]))
  y = tf.matmul(x, W) + b

  y_ = tf.placeholder(tf.float32, [None, 10])
  
  cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(labels=y, logits=y_))
  train_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)
  
  sess = tf.InteractiveSession()
  
  tf.global_variables_initializer().run()]]>
</programlisting>
<para>
Megkezdődik a hálózat tesztelése: kiiratjuk a pontosság értékét, amelyet az határoz meg, hogy milyen arányban képes a gépi modell észrevenni azt, hogy milyen szám van írva a képre.
Kiiratjuk a tesztképet, így mi magunk is meggyőződhetünk arról, hogy milyen értéket kéne visszaadnia.
A kép megvizsgálása és az ablak bezárása után pedig kiiratásra kerül az, hogy a hálózat milyen értéket észlelt.</para>
<programlisting language="python"><![CDATA[
print("-- A halozat tanitasa")  
  for i in range(1000):
    batch_xs, batch_ys = mnist.train.next_batch(100)
    sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})
    if i % 100 == 0:
      print(i/10, "%")
  print("----------------------------------------------------------")

  # Test trained model
  print("-- A halozat tesztelese")  
  correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))
  accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))  
  print("-- Pontossag: ", sess.run(accuracy, feed_dict={x: mnist.test.images,
                                      y_: mnist.test.labels}))
  print("----------------------------------------------------------")
  
  print("-- A MNIST 42. tesztkepenek felismerese, mutatom a szamot, a tovabblepeshez csukd be az ablakat")
  
  img = mnist.test.images[42]
  image = img

  matplotlib.pyplot.imshow(image.reshape(28, 28), cmap=matplotlib.pyplot.cm.binary)
  matplotlib.pyplot.savefig("4.png")  
  matplotlib.pyplot.show()

  classification = sess.run(tf.argmax(y, 1), feed_dict={x: [image]})

  print("-- Ezt a halozat ennek ismeri fel: ", classification[0])
  print("----------------------------------------------------------")

  print("-- A sajat kezi 8-asom felismerese, mutatom a szamot, a tovabblepeshez csukd be az ablakat")

  img = readimg()
  image = img.eval()
  image = image.reshape(-1, 28*28)

  matplotlib.pyplot.imshow(image.reshape(28, 28), cmap=matplotlib.pyplot.cm.binary)
  matplotlib.pyplot.savefig("8.png")  
  matplotlib.pyplot.show()

  image=image.reshape(-1)

  classification = sess.run(tf.argmax(y, 1), feed_dict={x: [image]})

  print("-- Ezt a halozat ennek ismeri fel: ", classification[0])
  print("----------------------------------------------------------")

if __name__ == '__main__':
  parser = argparse.ArgumentParser()
  parser.add_argument('--data_dir', type=str, default='/tmp/tensorflow/mnist/input_data',
                      help='Directory for storing input data')
  FLAGS = parser.parse_args()
  tf.app.run()]]>
 </programlisting>
 <para>Nálam így nézett ki a program futtatása, sajnos a vártnál alacsonyabb pontosságot kaptam:
 
 <mediaobject>
            <imageobject>
            <imagedata fileref="img/softmax1.PNG" format="PNG" scale="50"/>
            </imageobject>
        </mediaobject>

<mediaobject>
            <imageobject>
            <imagedata fileref="img/softmax2.PNG" format="PNG" scale="50"/>
            </imageobject>
        </mediaobject>
</para>
</section>

<section>
        <title>CIFAR-10</title>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Calvin/CIFAR">https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Calvin/CIFAR</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...:
        </para>
        <para>
Források: <link xlink:href="https://pytorch.org/tutorials/beginner/blitz/cifar10_tutorial.html">PyTorch - Training a Classifier</link>,
<link xlink:href="https://www.cs.toronto.edu/~kriz/cifar.html">The CIFAR-10 Dataset</link>
</para>

<para>
A CIFAR-10 60000 db 32x32-es színes kép gyűjteménye, melyet gépi tanulásra használnak.
A képek 10 különböző osztályba vannak besorolva, annak alapján, hogy mit is tartalmaznak: repülőgép, autó, madár, macska, szarvas, kutya, béka, macska, hajó vagy kamion.
A CIFAR-10 képek betanításához a TensorFlow mellett további packageket is le kell töltenünk, ehhez érdemes használni a Python package managerét, a pip-et.
</para>

<para>
Ha az előző feladatból indulunk ki, akkor a TensorFlow már sikeresen telepítve van. 
A torch, torchvision, matplotlib és numpy csomagokhoz a következő parancsokat kell beírnunk a terminálba:
<programlisting><![CDATA[
$ pip install torchvision
$ pip install matplotlib
$ pip install numpy]]>
</programlisting>
</para>

<para>
A CIFAR-10 osztályok letöltéséhez a torchvision-t fogjuk igénybe venni. A programunk futtatásakor megvizsgálja, hogy le lettek-e rántva a mappánkba a képek korábban, ha nem, akkor elindul a letöltés és a kicsomagolás.
Ellenőrzés céljából a numpy és a matplotlib segítségével jelenítsünk meg néhány képet az adattárból:

<programlisting language="Python"><![CDATA[
transform = transforms.Compose(
    [transforms.ToTensor(),
     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])

trainset = torchvision.datasets.CIFAR10(root='./data', train=True,
                                        download=True, transform=transform)
trainloader = torch.utils.data.DataLoader(trainset, batch_size=4,
                                          shuffle=True, num_workers=2)

testset = torchvision.datasets.CIFAR10(root='./data', train=False,
                                       download=True, transform=transform)
testloader = torch.utils.data.DataLoader(testset, batch_size=4,
                                         shuffle=False, num_workers=2)

classes = ('plane', 'car', 'bird', 'cat',
           'deer', 'dog', 'frog', 'horse', 'ship', 'truck')
def imshow(img):
    img = img / 2 + 0.5     
    npimg = img.numpy()
    plt.imshow(np.transpose(npimg, (1, 2, 0)))
    plt.show()

dataiter = iter(trainloader)
images, labels = dataiter.next()

imshow(torchvision.utils.make_grid(images))

print(' '.join('%5s' % classes[labels[j]] for j in range(4)))]]>
</programlisting>

<mediaobject>
  <imageobject>
    <imagedata fileref="img/cifar1.png" format="PNG" scale="35"/>
  </imageobject>
</mediaobject>
</para>

<para>
A képek megvannak, az osztályuk is kiiratásra került, így következhet a neurális háló létrehozása a torch segítségével.
Vegyük figyelembe, hogy kisméretű, színes képeink háromcsatornásak (RGB, nem grayscale).

<programlisting language="Python"><![CDATA[
class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(3, 6, 5)
        self.pool = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(6, 16, 5)
        self.fc1 = nn.Linear(16 * 5 * 5, 120)
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, 10)

    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = x.view(-1, 16 * 5 * 5)
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return x

net = Net()

criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)]]>
</programlisting>
</para>

<para>
A képek és osztályok betanításához for ciklussal megyünk végig az adattáron.
Kiiratjuk a lehetséges adatveszteséget három tizedesjegy pontossággal.
Sikeres tréning esetén le is mentjük a torch segítségével az új modellt.

<programlisting language="Python"><![CDATA[
for epoch in range(2):  

    running_loss = 0.0
    for i, data in enumerate(trainloader, 0):
        
        inputs, labels = data

        optimizer.zero_grad()

        outputs = net(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        running_loss += loss.item()
        if i % 2000 == 1999:    
            print('[%d, %5d] loss: %.3f' %
                  (epoch + 1, i + 1, running_loss / 2000))
            running_loss = 0.0

print('Finished Training')

PATH = './cifar_net.pth'
torch.save(net.state_dict(), PATH)]]>
</programlisting>
</para>

<para>
A betanítás elméletileg megtörtént, ideje tehát tesztelni a neurális hálót.
Ehhez először kiválasztunk a torchvision-nel 4 tesztfotót, és kiiratjuk ezeknek a tényleges osztályát az outputra.
Kis idő után a számítás megtörténik, és megkapjuk a tippeket: az eddigi tesztjeim alapján valószínűleg legalább 2 osztályt el is fog találni.

<programlisting language="Python"><![CDATA[
dataiter = iter(testloader)
images, labels = dataiter.next()

imshow(torchvision.utils.make_grid(images))
print('GroundTruth: ', ' '.join('%5s' % classes[labels[j]] for j in range(4)))

net = Net()
net.load_state_dict(torch.load(PATH))

outputs = net(images)

_, predicted = torch.max(outputs, 1)

print('Predicted: ', ' '.join('%5s' % classes[predicted[j]]
                              for j in range(4)))]]>
</programlisting>
</para>

<mediaobject>
  <imageobject>
    <imagedata fileref="img/cifar2.png" format="PNG" scale="35"/>
  </imageobject>
</mediaobject>

<para>
A 10000 tesztfotó átvizsgálása után kapott pontosságról úgy kapunk eredményt, hogy a predicted képek számát elosztjuk az osztályok tényleges méretével.
Ennek megfelelően osztályonként is megkaphatjuk, hogy a képek hány százalékát sikerült helyesen felismernie a modellnek.

<programlisting language="Python"><![CDATA[
correct = 0
total = 0
with torch.no_grad():
    for data in testloader:
        images, labels = data
        outputs = net(images)
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

print('Accuracy of the network on the 10000 test images: %d %%' % (
    100 * correct / total))

class_correct = list(0. for i in range(10))
class_total = list(0. for i in range(10))
with torch.no_grad():
    for data in testloader:
        images, labels = data
        outputs = net(images)
        _, predicted = torch.max(outputs, 1)
        c = (predicted == labels).squeeze()
        for i in range(4):
            label = labels[i]
            class_correct[label] += c[i].item()
            class_total[label] += 1

for i in range(10):
    print('Accuracy of %5s : %2d %%' % (
        classes[i], 100 * class_correct[i] / class_total[i]))]]>
</programlisting>

<mediaobject>
  <imageobject>
    <imagedata fileref="img/cifar3.png" format="PNG" scale="50"/>
  </imageobject>
</mediaobject>

</para>
</section>

<section>
        <title>Android telefonra a TF objektum detektálója</title>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Calvin/App">https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Calvin/App</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...:
        </para>
        <para>
            A TensorFlow egy szoftverkönyvtár, mely lehetővé teszi gépi tanulási algoritmusok végrehajtását.
            Ezek a számítások nemcsak számítógéprendszereken, de akár mobiltelefonokon is végrehajthatóak.
        </para>
        <para>
            A TensorFlow számítást egy irányított gráf írja le, melynek élein keresztül adatok (tenzorok) áramlása történik.
            A gráf csúcsai műveleteket reprezentálnak, a csúcsok inputjainak és outputjainak száma lehet nulla vagy több.
            A gráfok szerkezetének áttekintését a TensorBoard nevű vizualizációs eszközzel érhetjük el.
        </para>
        <para>
            A TensorFlow segítségével tehát képesek vagyunk betanítani Androidos készülékünket különféle objektumok detektálására.
            A teszteléshez én az <link xlink:href="https://play.google.com/store/apps/details?id=hash.tf.objectdetection">Object Detector and Classifier - TensorFlow</link> nevű appot töltöttem le a Google Play Áruházból.
            Ez az objektumfelismerő alkalmazás a Google TensorFlow gépi tanulás modelljét használja fel.
        </para>
        <para>
            A hátsó kamera segítségével valós időben próbálja érzékelni a képen látható tárgyakat.
            A tárgy nevén kívül egy 2 tizedesjegyű számértéket (százalékot) is kapunk, amely azt érzékelteti, hogy mennyire biztos a felismerésben.
            Az alkalmazás viszonylag sok nyelvet ismer, magyar nyelv hiányában én a tárgyak angol megfelelőit kaptam.
        </para>
        <para>
            Az informatikai eszközök felismerésével nem volt különösebb problémám.
            Jó értékeket és megnevezést kaptam többek között egérre, billentyűzetre, távirányítóra is.
            Az emberi test felismerése is gyorsan és pontosan működött.
            
            <mediaobject>
            <imageobject>
            <imagedata fileref="img/tfapp1.png" format="PNG" scale="20"/>
            </imageobject>
        </mediaobject>
        </para>
        <para>
            A probléma ott kezdődött, hogy az app leírásában szereplő képeken is hasonlóan egyértelmű példák vannak, méghozzá nem véletlenül.
            Könnyen félrevezethető, ráadásul ilyenkor a pontatlan megnevezés mellé még a számérték is viszonylag magas lesz.
            A tollamat például a viszonylag vastag kupak miatt baseball ütőnek ismerte fel, de a kuka és a papírzsebkendő felismerése is sikertelen volt.
            
            <mediaobject>
            <imageobject>
            <imagedata fileref="img/tfapp2.png" format="PNG" scale="25"/>
            </imageobject>
        </mediaobject>
        </para>
        <para>
            Sajnos az általam kipróbált alkalmazás nem tanítható, tehát kizárólag előre meghatározott, betanított tárgyakat tud csak felismerni, így a szűkös tudástára miatt többszöri használatra szerintem nem kifejezetten alkalmas.
        </para>
</section>

<section>
        <title>Minecraft MALMO-s példa</title>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Calvin/MALMO">https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Calvin/MALMO</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...:
        </para>
        <para>
            Források: <link xlink:href="https://bhaxor.blog.hu/2018/10/28/minecraft_steve_szemuvege">Bátf41 Haxor Str34m</link>, 
            <link xlink:href="https://microsoft.github.io/malmo/0.17.0/Python_Examples/Tutorial.pdf">Project Malmo Python tutorial</link>
        </para>
        <para>
A Project Malmo egy olyan platform, amely segítségével kutatásokat végezhetünk a mesterséges intelligencia világában, 
méghozzá a népszerű játék, a Minecraft használatával.
Olyan Python ágenst készítünk, amely egy alapértelmezett biomban gazdag világban az akadályokat legyőzve, jobbra-balra tartva felfedezi a világot.
</para>
<para>
Először meg kell látogatnunk a <link xlink:href="https://github.com/Microsoft/malmo">hivatalos GitHub repót</link>, ahol láthatjuk,
hogy a telepítés elvégezhető akár a Python Pip Package segítségével, de dolgozhatunk pre-built verzióval is, oprendszertől függetlenül.
Én ezúttal Windows oprendszeren dolgoztam, és a pre-built fájlok közül töltöttem le egy <link xlink:href="https://github.com/microsoft/malmo/releases/download/0.36.0/Malmo-0.36.1-Windows-64bit_withBoost_Python3.6.zip">stabil Windows release</link>-t.
</para>
<para>
Ha megvolt az <link xlink:href="https://adoptopenjdk.net">OpenJDK Java 8</link>, 
és a <link xlink:href="https://www.codesynthesis.com/products/xsd/download.xhtml">CodeSynthesis XSD</link> 
telepítése, illetve az <link xlink:href="http://ffmpeg.org">FFmpeg</link> kicsomagolása, akkor jöhetnek a speciális rendszerbeállítások között megtalálható környezeti változók.
A JAVA_HOME rendszerváltozó értékének meg kell adnunk az OpenJDK 8.0 főkönyvtárát, a MALMO_XSD_PATH-nek pedig a kicsomagolt pre-built zipben található MALMO mappa Schemas könyvtárát.
Végezetül a Path változóhoz hozzárendeljük az FFmpeg bin almappáját.
</para>

<para>
Ezután indíthatjuk is a Windows PowerShell-t, melyben a következő parancsokat kell leadnunk:
<programlisting><![CDATA[
PS D:\> cd .\Malmo-0.36.0-Windows-64bit_withBoost_Python3.6\
PS D:\Malmo-0.36.0-Windows-64bit_withBoost_Python3.6> cd Minecraft
PS D:\Malmo-0.36.0-Windows-64bit_withBoost_Python3.6\Minecraft> .\launchClient.bat]]>
</programlisting>
Mostmár fut a játék, nyithatunk egy másik PowerShell terminált, amely segítségével az ágenseket fogjuk működésre bírni.
Nézzük meg egyfajta tesztként az első tutorialt. Itt még az ágens nem mozdul, tíz másodperc után le is áll ez a küldetés.
<programlisting><![CDATA[
PS D:\Malmo-0.36.0-Windows-64bit_withBoost_Python3.6> cd Python_Examples
PS D:\Malmo-0.36.0-Windows-64bit_withBoost_Python3.6\Python_Examples> python tutorial_1.py]]>
</programlisting>

<mediaobject>
<imageobject>
<imagedata fileref="img/malmo0.PNG" format="PNG" scale="80"/>
</imageobject>
</mediaobject>

</para>

<para>
Az ágensnek természetesen tudunk adni utasításokat is, melyekkel mozgásra tudjuk bírni:
<programlisting language="Python"><![CDATA[
//turn [-1, 1] pl.:
agent_host.sendCommand("turn -1") //balra fordul, teljes sebességgel

//move [-1, 1] pl.:
agent_host.sendCommand("move 1") //előre halad, teljes sebességgel

//pitch [-1, 1] pl.:
agent_host.sendCommand("pitch 1") //felfele tekintés, teljes sebességgel

//strafe [-1, 1] pl.:
agent_host.sendCommand("strafe -1") //bal oldalra mozdul, teljes sebességgel

//jump 1/0 pl.:
agent_host.sendCommand("jump 1") //folyamatos ugrálás

//crouch 1/0 pl.:
agent_host.sendCommand("crouch 1") //folyamatos guggolás

//attack 1/0 pl.:
agent_host.sendCommand("attack 1") //folyamatos támadás

//use 1/0 pl.:
agent_host.sendCommand("use 1") //itemek folyamatos használata]]>
</programlisting>
</para>

<para>
A my_mission = MalmoPython.MissionSpec() parancs létrehoz egy XML stringet, amelyet a Minecraft képes értelmezni, így el is tud indulni a küldetésünk.
A missionXML részben röviden összegezhetjük a mission-t, időlimitet állíthatunk (ms-ben megadva), illetve játékmódot is itt tudunk beállítani.
</para>

<para>
A mission alapértelmezett élővilágát, biomját is meg tudjuk meghatározni a FlatWorldGenerator generatorString segítségével.
Ahhoz, hogy olyan paramétereket adjunk meg, amelyeket értelmezni tud a játék, 
használhatjuk pl. a <link xlink:href="https://www.minecraft101.net/superflat/">Superflat Preset Generator</link>-t.
<mediaobject>
            <imageobject>
            <imagedata fileref="img/malmo1.PNG" format="PNG" scale="60"/>
            </imageobject>
        </mediaobject>
<programlisting language="Python"><![CDATA[
<FlatWorldGenerator generatorString="3;1*minecraft:bedrock,7*minecraft:dirt,1*minecraft:grass;4;village,decoration,lake"/>]]>
</programlisting>
</para>

<para>
Mielőtt a küldetés végéig tartó while ciklussal foglalkoznánk, utasítanunk kell az ágenst arra, hogy haladjon előre teljes sebességgel.
Továbbá deklarálnunk kell néhány változót: a pozíció koordinátákat a stevex, stevey és stevez változók, az irányt a steveyaw változó, 
a nézetet pedig a stevepitch változó fogja tárolni.
<programlisting language="Python"><![CDATA[
# Loop until mission starts:
print("Waiting for the mission to start ", end=' ')
world_state = agent_host.getWorldState()
while not world_state.has_mission_begun:
    print(".", end="")
    time.sleep(0.1)
    world_state = agent_host.getWorldState()
    for error in world_state.errors:
        print("Error:",error.text)

print()
print("Mission running ", end=' ')

agent_host.sendCommand( "move 1" )

stevex = 0
stevez = 0
stevey = 0
steveyaw = 0
stevepitch = 0
elotteidx = 0
elotteidxj = 0
elotteidxb = 0
akadaly = 0]]>
</programlisting>
</para>

<para>
A yaw értéke a Minecraft koordinátarendszeréhez igazodik: észak 180, dél 0, nyugat 90, kelet pedig -90.
Ezt hivatott szemléltetni a következő ábra is:
<mediaobject>
            <imageobject>
            <imagedata fileref="img/malmo2.png" format="PNG" scale="60"/>
            </imageobject>
        </mediaobject>
</para>

<para>
Miközben Steve mozog, blokkok veszik körül, előfordulhat tehát, hogy akadályokkal kell szembenéznie és pl. vízbe esik vagy fának ütközik.
Hogy ezt elkerüljük, a json függvény segítségével információt szerzünk az őt körülvevő blokkokról, ezeknek típusát ki is tudjuk iratni a terminálra (pl. air, grass, tallgrass).
3x3-as, blokkokból álló griddel dolgozunk, ahol egy nyugat felé tekintő ágenssel szemben lévő négyzet pl. a 3-as pozíción lenne:
<mediaobject>
    
            <imageobject>
            <imagedata fileref="img/malmo3.png" format="PNG" scale="50"/>
            </imageobject>
        </mediaobject>
        
        <mediaobject>
            <imageobject>
            <imagedata fileref="img/malmo4.png" format="PNG" scale="50"/>
            </imageobject>
        </mediaobject>
        
<programlisting language="Python"><![CDATA[
if world_state.number_of_observations_since_last_state > 0:
	msg = world_state.observations[-1].text
	observations = json.loads(msg)
	nbr = observations.get("nbr3x3", 0)
	print("Mit latok: ", nbr)
	
	if "Yaw" in observations:
		steveyaw = observations["Yaw"]
	if "Pitch" in observations:
		stevepitch = observations["Pitch"]
	if "XPos" in observations:
		stevex = observations["XPos"]
	if "ZPos" in observations:
		stevez = observations["ZPos"]
	if "YPos" in observations:
		stevey = observations["YPos"]
		
	print ("Pozicio koordinatak: ", stevex, stevez, stevey)
	print ("Irany: ", steveyaw)
	print ("Nezet: ", stevepitch)
	
	if steveyaw >= 180-22.5 and steveyaw <= 180+22.5 :
		elotteidx = 1
		elotteidxj = 2
		elotteidxb = 0
		
	if steveyaw >= 180+22.5 and steveyaw <= 270-22.5 :
		elotteidx = 2
		elotteidxj = 5 
		elotteidxb = 1
		
	if steveyaw >= 270-22.5 and steveyaw <= 270+22.5 :
		elotteidx = 5
		elotteidxj = 8
		elotteidxb = 2
		
	if steveyaw >= 270+22.5 and steveyaw <= 360-22.5 :
		elotteidx = 8
		elotteidxj = 7
		elotteidxb = 5
		
	if steveyaw >= 360-22.5 or steveyaw  <= 0+22.5 :
		elotteidx = 7
		elotteidxj = 6 
		elotteidxb = 8
		
	if steveyaw >= 0+22.5 and steveyaw <= 90-22.5 :
		elotteidx = 6
		elotteidxj = 3
		elotteidxb = 7
		
	if steveyaw >= 90-22.5 and steveyaw <= 90+22.5 :
		elotteidx = 3
		elotteidxj = 0
		elotteidxb = 6
		
	if steveyaw >= 90+22.5 and steveyaw <= 180-22.5 :
		elotteidx = 0
		elotteidxj = 1
		elotteidxb = 3
		
	print ("racsindex", elotteidx)]]>
</programlisting>
</para>

<para>
Ha Steve számára épp nem szabad az út, akkor utasítjuk arra, hogy forduljon meg, és megnöveljük az akadályokat számláló változó értékét eggyel.
Ha szabad az út, nem kell fordulnia, ugrania sem, csupán előre haladnia teljes sebességgel.
Az akadályokat ugrálással is kivédheti, pl. így tud kiugrani a vízből is.
<programlisting language="Python"><![CDATA[
if nbr[elotteidx]!="air" or nbr[elotteidxj]!="air" or nbr[elotteidxb]!="air":
		print ("Nincs szabad utam, elottem: ", nbr[elotteidx])
		agent_host.sendCommand ("turn" + str(turn))
		akadaly = akadaly + 1
	else:
		print ("Szabad az ut!")
		agent_host.sendCommand ("turn 0")
		agent_host.sendCommand ("jump 0")
		akadaly = 0
		
	if akadaly > 8:
		agent_host.sendCommand ("jump 1")
	
	time.sleep(1)

print()
print("Mission ended")
# Mission has ended.]]>
</programlisting>
</para>
</section>

</chapter>
